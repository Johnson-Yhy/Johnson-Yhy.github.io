<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/07/02/%E5%8E%9F%E7%A0%81-%E8%A1%A5%E7%A0%81-%E5%8F%8D%E7%A0%81/"/>
      <url>/2023/07/02/%E5%8E%9F%E7%A0%81-%E8%A1%A5%E7%A0%81-%E5%8F%8D%E7%A0%81/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>医院局域网规划</title>
      <link href="/2023/07/02/%E5%8C%BB%E9%99%A2%E5%B1%80%E5%9F%9F%E7%BD%91%E8%A7%84%E5%88%92/"/>
      <url>/2023/07/02/%E5%8C%BB%E9%99%A2%E5%B1%80%E5%9F%9F%E7%BD%91%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<div class="note success simple"><p class='p cyan'>医院局域网规划</p></div><p class='p cyan'></p><p class='p cyan'></p><p class='p cyan'></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://wx2.sinaimg.cn/orj360/0083eW3Tly1hfmz29ywpij31i20x57ra.jpg" style="width:650px;"/></div></div><p class='p cyan'></p><p class='p cyan'></p><p class='p cyan'></p><div class="note success simple"><p class='p cyan'>GitHub开源仓库</p></div><p><center> <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Johnson-Yhy/Hospital-LAN"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Johnson-Yhy&repo=Hospital-LAN&theme=solarized-dark&show_owner=true"/></a> </p><details class="folding-tag" red><summary> 项目需求 </summary>              <div class='content'>              <p>某医院需建设两个相互独立的网络：一个为内部网络，用于医务管理系统；一个为信息网络，连接Internet。每间房间至少布设两个信息点，一个为内部网，一个为信息网。</p><ol><li>门诊大楼1幢（11层），一楼为挂号、药房、收费等10个窗口科室，每个科室布设两个信息点，大厅安装5台服务器终端，一台用于大屏幕显示，4台为触摸屏式医务服务导航。2至11楼为诊断科室，每层楼有20间科室，每间科室布设2个信息点。</li><li>病房大楼1幢（11层），每层有40间病房，每间病房最多3个病人，4间值班室，每间值班室布设两个信息点。病房提供无线网络接入，需要考虑带宽流量。需要进行接入带宽限制。</li><li>行政大楼1幢（7层），每层10个办公室，每间办公室布设两个信息点。网络中心位于大楼一层，机房布设20个信息点。</li><li>应用系统支持：医院对外发表信息的网站，内部网络的医务管理系统，并配备磁盘阵列和数据备份系统。</li><li>网络安全支持：配备防火墙，防病毒系统网络版，上网行为管理系统。</li></ol>              </div>            </details><details class="folding-tag" yellow><summary> 配置语法 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> AC </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sys</span><br><span class="line">sys AC</span><br><span class="line">vlan batch 40 100</span><br><span class="line">int vlan 100</span><br><span class="line"> ip add 192.168.100.100 24</span><br><span class="line">int g0/0/10</span><br><span class="line"> p l t</span><br><span class="line"> p t a v 40 100</span><br><span class="line"></span><br><span class="line">capwap source ip-address 192.168.100.100</span><br><span class="line"></span><br><span class="line">wlan </span><br><span class="line"> ap auth-mode no-auth </span><br><span class="line">  ssid-profile name 1</span><br><span class="line">  ssid yiyuan</span><br><span class="line">  security-profile name 1</span><br><span class="line">  security wpa-wpa2 psk pass-phrase 12345678 aes</span><br><span class="line">  vap-profile name 1</span><br><span class="line">  service-vlan vlan-id 40</span><br><span class="line">  ssid-profile 1</span><br><span class="line">  security-profile 1</span><br><span class="line">  ap-id 0 </span><br><span class="line">  vap 1 wlan 1 radio all</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> sys </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sys</span><br><span class="line">int g0/0/2</span><br><span class="line">ip address 200.100.1.2 30 </span><br><span class="line">int g0/0/1</span><br><span class="line">ip address 100.100.1.2 30 </span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 防火墙 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">interface GigabitEthernet1/0/0</span><br><span class="line"> undo shutdown</span><br><span class="line"> ip address 192.168.77.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/1</span><br><span class="line"> undo shutdown</span><br><span class="line"> ip address 192.168.50.254 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/2</span><br><span class="line"> undo shutdown</span><br><span class="line"> ip address 192.168.88.2 255.255.255.0</span><br><span class="line"></span><br><span class="line">security-policy</span><br><span class="line"> rule name T2U</span><br><span class="line">  source-zone trust</span><br><span class="line">  destination-zone untrust</span><br><span class="line">  action permit</span><br><span class="line"> rule name T2D</span><br><span class="line">  source-zone trust</span><br><span class="line">  destination-zone dmz</span><br><span class="line">  action permit</span><br><span class="line"> rule name L2A</span><br><span class="line">  source-zone local</span><br><span class="line">  action permit</span><br><span class="line">   rule name U2D</span><br><span class="line">  source-zone untrust</span><br><span class="line">  destination-zone dmz</span><br><span class="line">  action permit</span><br><span class="line"> rule name U2T</span><br><span class="line">  source-zone untrust</span><br><span class="line">  destination-zone trust</span><br><span class="line">  source-address 172.16.0.0 mask 255.255.0.0</span><br><span class="line">  action permit</span><br><span class="line"></span><br><span class="line">ospf 1</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.50.0 0.0.0.255</span><br><span class="line">  network 192.168.77.0 0.0.0.255</span><br><span class="line">  network 192.168.88.0 0.0.0.255</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 防火墙2 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">interface GigabitEthernet1/0/0</span><br><span class="line"> undo shutdown</span><br><span class="line"> ip address 192.168.77.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/1</span><br><span class="line"> undo shutdown</span><br><span class="line"> ip address 192.168.50.254 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/2</span><br><span class="line"> undo shutdown</span><br><span class="line"> ip address 192.168.88.2 255.255.255.0</span><br><span class="line"></span><br><span class="line">security-policy</span><br><span class="line"> rule name T2U</span><br><span class="line">  source-zone trust</span><br><span class="line">  destination-zone untrust</span><br><span class="line">  action permit</span><br><span class="line"> rule name T2D</span><br><span class="line">  source-zone trust</span><br><span class="line">  destination-zone dmz</span><br><span class="line">  action permit</span><br><span class="line"> rule name L2A</span><br><span class="line">  source-zone local</span><br><span class="line">  action permit</span><br><span class="line">   rule name U2D</span><br><span class="line">  source-zone untrust</span><br><span class="line">  destination-zone dmz</span><br><span class="line">  action permit</span><br><span class="line"> rule name U2T</span><br><span class="line">  source-zone untrust</span><br><span class="line">  destination-zone trust</span><br><span class="line">  source-address 172.16.0.0 mask 255.255.0.0</span><br><span class="line">  action permit</span><br><span class="line"></span><br><span class="line">ospf 1</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.50.0 0.0.0.255</span><br><span class="line">  network 192.168.77.0 0.0.0.255</span><br><span class="line">  network 192.168.88.0 0.0.0.255</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 分布出口 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">sys</span><br><span class="line">sys WB-CK</span><br><span class="line">dhcp enable</span><br><span class="line">int g0/0/1</span><br><span class="line"> ip add 100.100.1.1 30</span><br><span class="line"> nat outbound 3001</span><br><span class="line"> ipsec policy map1</span><br><span class="line">int g0/0/2</span><br><span class="line"> ip add 172.16.10.254 24</span><br><span class="line"> dhcp sel intface </span><br><span class="line"> </span><br><span class="line">ip route-static 0.0.0.0 0 100.100.1.2</span><br><span class="line"></span><br><span class="line">acl 3001</span><br><span class="line"> rule deny ip source 172.16.0.0 0.0.255.255 destination 192.168.0.0 0.0.255.255</span><br><span class="line"> rule permit ip </span><br><span class="line"></span><br><span class="line">acl 3000</span><br><span class="line"> rule permit ip source 172.16.0.0 0.0.255.255 destination 192.168.0.0 0.0.255.255</span><br><span class="line"> </span><br><span class="line">ipsec proposal fb2zb</span><br><span class="line">transform esp</span><br><span class="line"></span><br><span class="line">ipsec policy map1 10 isakmp</span><br><span class="line">security acl 3000</span><br><span class="line">proposal fb2zb</span><br><span class="line">ike-peer zb</span><br><span class="line"></span><br><span class="line">ike proposal 5</span><br><span class="line"></span><br><span class="line">ike peer zb v1</span><br><span class="line">exchange-mode main</span><br><span class="line">pre-shared-key cipher huawei</span><br><span class="line">ike-proposal 5</span><br><span class="line">local-address 100.100.1.1</span><br><span class="line">remote-address 200.100.1.1</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 各接入交换机 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">sys</span><br><span class="line">sys MZ-JR</span><br><span class="line">vlan batch 10 40</span><br><span class="line">int g0/0/1</span><br><span class="line"> p l t </span><br><span class="line"> p t a v 10 40</span><br><span class="line">int e0/0/1</span><br><span class="line"> p l a</span><br><span class="line"> p d v 40</span><br><span class="line">int e0/0/2</span><br><span class="line"> p l a </span><br><span class="line"> p d v 10</span><br><span class="line"></span><br><span class="line">sys</span><br><span class="line">sys BF-JR</span><br><span class="line">vlan batch 20 40 100</span><br><span class="line">int g0/0/1</span><br><span class="line"> p l t </span><br><span class="line"> p t a v 20 40 100</span><br><span class="line">int e0/0/1</span><br><span class="line"> p l a</span><br><span class="line"> p d v 20</span><br><span class="line">int e0/0/2</span><br><span class="line"> p l a </span><br><span class="line"> p d v 40</span><br><span class="line">int e0/0/3</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 40 100</span><br><span class="line"> p t p v 100</span><br><span class="line"></span><br><span class="line">sys</span><br><span class="line">sys XZ-JR</span><br><span class="line">vlan batch 30 40</span><br><span class="line">int g0/0/1</span><br><span class="line"> p l t </span><br><span class="line"> p t a v 30 40</span><br><span class="line">int e0/0/1</span><br><span class="line"> p l a</span><br><span class="line"> p d v 30</span><br><span class="line">int e0/0/2</span><br><span class="line"> p l a </span><br><span class="line"> p d v 40</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 核心交换机 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">sys</span><br><span class="line">sys YX-HX</span><br><span class="line">vlan batch 10 20 30 40 77 100</span><br><span class="line">dhcp enable</span><br><span class="line">int g0/0/1</span><br><span class="line"> p l t</span><br><span class="line"> p t a v 10 40</span><br><span class="line">int g0/0/2</span><br><span class="line"> p l t</span><br><span class="line"> p t a v 20 40 100</span><br><span class="line">int g0/0/3</span><br><span class="line"> p l t</span><br><span class="line"> p t a v 30 40</span><br><span class="line">int g0/0/10</span><br><span class="line"> p l t</span><br><span class="line"> p t a v 40 100</span><br><span class="line">int g0/0/24</span><br><span class="line"> p l a</span><br><span class="line"> p d v 77   &quot;port default vlan&quot;命令是用于配置交换机端口的默认VLAN</span><br><span class="line"></span><br><span class="line">int vlan 10 </span><br><span class="line"> ip add 192.168.10.254 24</span><br><span class="line"> dhcp sel int</span><br><span class="line"> dhcp server dns-list 192.168.50.10</span><br><span class="line">int vlan 20 </span><br><span class="line"> ip add 192.168.20.254 24</span><br><span class="line"> dhcp sel int</span><br><span class="line"> dhcp server dns-list 192.168.50.10</span><br><span class="line">int vlan 30 </span><br><span class="line"> ip add 192.168.30.254 24</span><br><span class="line"> dhcp sel int</span><br><span class="line"> dhcp server dns-list 192.168.50.10</span><br><span class="line">int vlan 40 </span><br><span class="line"> ip add 192.168.40.254 24</span><br><span class="line"> dhcp sel int</span><br><span class="line"> dhcp server dns-list 192.168.50.10</span><br><span class="line">int vlan 100</span><br><span class="line"> ip add 192.168.100.254 24</span><br><span class="line"> dhcp sel int</span><br><span class="line"> dhcp server dns-list 192.168.50.10</span><br><span class="line"> dhcp server option 43 sub 2 ip 192.168.100.100</span><br><span class="line">int vlan 77</span><br><span class="line"> ip add 192.168.77.1 24</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ospf 1 </span><br><span class="line"> a 0</span><br><span class="line"> net 192.168.77.0 0.0.0.255</span><br><span class="line"> net 192.168.10.0 0.0.0.255</span><br><span class="line"> net 192.168.20.0 0.0.0.255</span><br><span class="line"> net 192.168.30.0 0.0.0.255</span><br><span class="line"> net 192.168.40.0 0.0.0.255</span><br><span class="line"> net 192.168.100.0 0.0.0.255</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">acl 3000</span><br><span class="line"> rule deny ip source 192.168.40.0 0.0.0.255 des 192.168.10.0 0.0.0.255</span><br><span class="line"> rule deny ip source 192.168.40.0 0.0.0.255 des 192.168.20.0 0.0.0.255</span><br><span class="line"> rule deny ip source 192.168.40.0 0.0.0.255 des 192.168.30.0 0.0.0.255</span><br><span class="line"> rule permit ip</span><br><span class="line">int g0/0/1</span><br><span class="line"> traffic-filter inbound acl 3000</span><br><span class="line">int g0/0/2</span><br><span class="line"> traffic-filter inbound acl 3000</span><br><span class="line">int g0/0/3</span><br><span class="line"> traffic-filter inbound acl 3000</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 总部出口 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">sys</span><br><span class="line">sys YX-CK</span><br><span class="line">nat alg all enable</span><br><span class="line">acl 3001    //配置nat</span><br><span class="line"> rule deny ip source 192.168.0.0 0.0.255.255 destination 172.16.0.0 0.0.255.255</span><br><span class="line"> rule permit ip</span><br><span class="line">int g0/0/1</span><br><span class="line"> ip add 192.168.88.1 24</span><br><span class="line">int g0/0/2</span><br><span class="line"> ip add 200.100.1.1 30</span><br><span class="line"> nat outbound 3001   //配置nat </span><br><span class="line"> nat server protocol tcp global current-interface www inside 192.168.50.20 www</span><br><span class="line"> nat server protocol tcp global current-interface ftp inside 192.168.50.30 ftp   //端口映射--此配置命令表示将公共网络上的TCP流量的特定端口（www）转发到私有网络中的192.168.50.20设备上的相应端口（也是www）。这将允许公共网络上的设备或用户通过访问公共网络上的特定端口，与私有网络中的192.168.50.20设备上的服务进行通信。</span><br><span class="line"> ipsec policy map1</span><br><span class="line"></span><br><span class="line">ip route-s 0.0.0.0 0 200.100.1.2    </span><br><span class="line"></span><br><span class="line"> ospf 1</span><br><span class="line"> default-route-advertise      //缺省路由下发到ospf里面</span><br><span class="line">  a 0</span><br><span class="line">  net 192.168.88.0 0.0.0.255</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">acl 3000</span><br><span class="line"> rule permit ip source 192.168.0.0 0.0.255.255 destination 172.16.0.0 0.0.255.255</span><br><span class="line"></span><br><span class="line">ipsec proposal zb2fb     //zb2fb是一个IPsec提案的名称，而esp是一个用于提案中的转换，它指定了使用ESP来保护IPsec通信的数据包。请注意，具体的配置和参数可能根据不同的设备和实际部署环境而有所不同。</span><br><span class="line">transform esp</span><br><span class="line"></span><br><span class="line">ipsec policy map1 10 isakmp</span><br><span class="line">security acl 3000</span><br><span class="line">proposal zb2fb</span><br><span class="line">ike-peer fb  //1. `ipsec policy map1 10 isakmp`: 这个命令表示在IPsec策略`map1`中的第10条策略中使用ISAKMP（Internet Security Association and Key Management Protocol）协商安全参数。</span><br><span class="line"></span><br><span class="line">2. `security acl 3000`: 这个命令指定ACL（Access Control List）编号为3000，用于定义允许或拒绝IPsec流量的安全策略。</span><br><span class="line"></span><br><span class="line">3. `proposal zb2fb`: 这个命令指定使用名为`zb2fb`的IPsec提案。该提案定义了在IPsec通信中使用的安全参数，例如加密算法、认证算法等。</span><br><span class="line"></span><br><span class="line">4. `ike-peer fb`: 这个命令指定了一个名为`fb`的IKE（Internet Key Exchange）对等体。IKE是在IPsec建立安全通道时进行密钥协商和身份验证的协议。该命令可能包含了与对等体相关的配置参数，例如IP地址、预共享密钥等。</span><br><span class="line"></span><br><span class="line">综上所述，根据提供的配置命令，它们涉及到IPsec策略、ACL、IPsec提案以及IKE对等体的配置。具体的配置和参数可能会根据设备和实际部署环境而有所不同。</span><br><span class="line"></span><br><span class="line">ike proposal 5</span><br><span class="line"></span><br><span class="line">ike peer fb v1</span><br><span class="line">exchange-mode main</span><br><span class="line">pre-shared-key cipher huawei</span><br><span class="line">ike-proposal 5</span><br><span class="line">local-address 200.100.1.1</span><br><span class="line">remote-address 100.100.1.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 🎈Ensp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧Ensp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记</title>
      <link href="/2023/07/02/%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/07/02/%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 🎈笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧 个人笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL教程</title>
      <link href="/2023/07/01/STL%E6%95%99%E7%A8%8B/"/>
      <url>/2023/07/01/STL%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 🎈c puls plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧c plus plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++教程</title>
      <link href="/2023/06/28/C-%E6%95%99%E7%A8%8B/"/>
      <url>/2023/06/28/C-%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一门很厉害的语言。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一门让你掉头发的语言。<br><!-- <details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details></p><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details> --><h1 id="c-初识"><a href="#c-初识" class="headerlink" title="c++初识"></a>c++初识</h1><details class="folding-tag" yellow><summary> c plus plus初识 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 常量 </summary>              <div class='content'>              <p>C++定义常量两种放式：</p><p>1：#define 宏常量： define 常量名 常量值</p><p>  通常在文件上方定义 表示一个常量</p><p>2： const 修饰的变量 const   数据类型 常量名 =常量值</p><p>  通常在变量定义前加关键字const，修饰该变量为常量，不可修改</p><p><br/></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># denfine day 7</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;&quot;一周共有&quot;&lt;&lt;day&lt;&lt;&quot;天&quot;&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//const 修饰的变量</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int month=12;    //正常的变量</span><br><span class="line">  const int month=12;  //加了const变为不可修改的常量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 标识符 </summary>              <div class='content'>              <ul><li>标识符不能是关键字</li><li><p>标识符只能由字母，数字，下划线组成</p></li><li><p>第一个字符必须为字母或下划线</p></li><li>标识符中字母是区分大小写的</li></ul>              </div>            </details>              </div>            </details><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><details class="folding-tag" yellow><summary> 数据类型 </summary>              <div class='content'>              <details class="folding-tag" green><summary> 整形 </summary>              <div class='content'>              <p><br/></p><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th>占用空间</th></tr></thead><tbody><tr><td style="text-align:center">short（短整型）</td><td>2字节</td></tr><tr><td style="text-align:center">int（整形）</td><td>4字节</td></tr><tr><td style="text-align:center">long（长整型）</td><td>Windows4字节</td></tr><tr><td style="text-align:center">long long（长长整形）</td><td>8字节</td></tr></tbody></table></div>              </div>            </details><details class="folding-tag" red><summary> 浮点型 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">专用空间</th><th style="text-align:center">位数</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4字节</td><td style="text-align:center">6~7位有效数字</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8字节</td><td style="text-align:center">15~16位有效数字</td></tr><tr><td style="text-align:center">long double</td><td style="text-align:center">8字节</td><td style="text-align:center">15~16位有效数字</td></tr></tbody></table></div><hr><p><br/></p><p>保留小数点后几位格式：</p><pre><code>1：头文件：#include&lt;iomanip&gt;2：输出格式：cout&lt;&lt;fixed&lt;&lt;setprecision( 1 )&lt;&lt;a&lt;&lt;endl;              //setprecision( 填写保留的位数 )</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;iomanip&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  const float a=2.5;</span><br><span class="line">    const float b=1.5;</span><br><span class="line">    int c,d;</span><br><span class="line">    float e;</span><br><span class="line">    cin&gt;&gt;c&gt;&gt;d;</span><br><span class="line">    e=((c-1)*a)+(d*b);</span><br><span class="line">    cout&lt;&lt;fixed&lt;&lt;setprecision(1)&lt;&lt;e&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> sizeof </summary>              <div class='content'>              <p>利用sizeof关键字可以统计数据类型所占用的大小空间</p><p>语法：sizeof（数据类型/变量）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  short num1=100;</span><br><span class="line">  cout&lt;&lt;&quot;short所占用的字节数为&quot;&lt;&lt;sizeof(num1)&lt;&lt;endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 实型 </summary>              <div class='content'>              <p>单精度：float</p><p>双精度：double</p><p>c++在默认情况下，输出一个小数，会显示6位有效数字</p><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">占用空间</th><th style="text-align:center">有效数字范围</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4字节</td><td style="text-align:center">7位有效数字</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8字节</td><td style="text-align:center">15-16位有效数字</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //1；单精度</span><br><span class="line">  float f1 =3.14f;  //加f是转换为单精度类型</span><br><span class="line">  //2：双精度</span><br><span class="line">  double f2=3.14;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>科学计数法</p><p>float f2 =3e2;      //3*10^2</p><p>float f3=3e-2    //3*0.1^2</p>              </div>            </details><details class="folding-tag" red><summary> 字符型 </summary>              <div class='content'>              <p>作用：字符型变量用于显示单个字符</p><p>语法：char ch=’a’;</p><ul><li><p>在显示字符型变量时，用单引号将字符括起来，不能用双引号</p></li><li><p>单引号内只能有一个字符，不可以是字符串</p></li></ul><p>==c和c++中只占用1个字节==</p>              </div>            </details><details class="folding-tag" blue><summary> 转义字符 </summary>              <div class='content'>              <p>作用：用于表示一些不能显示出来的ASCII字符</p><p>现阶段常用的转义字符有：\n    \ \    \t</p><p>\n 换行，将当前位置移到下一行开头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;&quot;hello world \n&quot;</span><br></pre></td></tr></table></figure><p>\ \ 代表一个反斜杠字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;&quot;hello world \\&quot;</span><br></pre></td></tr></table></figure><p>\t 水平制表，（跳到下一个tab位置）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;&quot;hello world \t&quot;&lt;&lt;&quot;aaa&quot;&lt;&lt;endl;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 字符串类型 </summary>              <div class='content'>              <p>C风格字符串： char 变量名【】=“字符串值”</p><p>==字符串为双引号，字符为单引号==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  char str1[]=&quot;hello world&quot;</span><br><span class="line">  cout&lt;&lt;str1&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++风格字符串： string 变量名 =“字符串值”</p><p>==必须加头文件  #include<string>==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  string str2=&quot;hello world&quot;</span><br><span class="line">  cout&lt;&lt;str2&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 布尔数据类型 </summary>              <div class='content'>              <p>bool类型只有两个值：(bool 只占用1个字节)</p><ul><li>true ~~~~真（本质是1）</li><li>flase ~~~~假（本质是0）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  bool flag=true;</span><br><span class="line">  cout&lt;&lt;flag&lt;&lt;endl;</span><br><span class="line">  flag =false;</span><br><span class="line">  cour&lt;&lt;flag&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><details class="folding-tag" yellow><summary> 运算符 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 算数运算符 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">术语</th><th style="text-align:center">示例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td><td style="text-align:center">10+5</td><td style="text-align:center">15</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td><td style="text-align:center">10-5</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td><td style="text-align:center">10*5</td><td style="text-align:center">50</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除</td><td style="text-align:center">10/5</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取模</td><td style="text-align:center">10%3</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">++</td><td style="text-align:center">前置递增</td><td style="text-align:center">a=2;b=++a</td><td style="text-align:center">a=3;b=3</td></tr><tr><td style="text-align:center">++</td><td style="text-align:center">后置递增</td><td style="text-align:center">a=2;b=a++</td><td style="text-align:center">a=3;b=2</td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">前置递减</td><td style="text-align:center">a=2;b=—a</td><td style="text-align:center">a=1;b=1</td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">后置递减</td><td style="text-align:center">a=2;b=a—</td><td style="text-align:center">a=1;b=2</td></tr></tbody></table></div><p>前置递增</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  ++a;</span><br><span class="line">  cout&lt;&lt;&quot;a=&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后置递增</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int b=10;</span><br><span class="line">  b++;</span><br><span class="line">  cout&lt;&lt;&quot;b=&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==区别 ==</p><pre><code>$==前置递增先让变量+1然后再进行表达式的运算==$==后置递增 先进行表达式的运算，再让变量+1==</code></pre>              </div>            </details><details class="folding-tag" green><summary> 赋值运算符 </summary>              <div class='content'>              <p><br/></p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">术语</th><th style="text-align:center">示例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">赋值</td><td style="text-align:center">a=2;b=3</td><td style="text-align:center">a=2;b=3</td></tr><tr><td style="text-align:center">+=</td><td style="text-align:center">加等于</td><td style="text-align:center">a=0;a+=2</td><td style="text-align:center">a=2</td></tr><tr><td style="text-align:center">-=</td><td style="text-align:center">减等于</td><td style="text-align:center">a=5;a-=3</td><td style="text-align:center">a=2</td></tr><tr><td style="text-align:center">*=</td><td style="text-align:center">乘等于</td><td style="text-align:center">a=2;a*=2</td><td style="text-align:center">a=4</td></tr><tr><td style="text-align:center">/=</td><td style="text-align:center">除等于</td><td style="text-align:center">a=4;a/=2</td><td style="text-align:center">a=2</td></tr><tr><td style="text-align:center">%=</td><td style="text-align:center">模等于</td><td style="text-align:center">a=3;a%=2;</td><td style="text-align:center">a=1</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  a+=2;  //a=a+2  =&gt; a=10+2;</span><br><span class="line">  cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  a%=2;   //a=a%2  =&gt;a=10%2;</span><br><span class="line">  cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 比较运算符 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">术语</th><th style="text-align:center">示例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">==</td><td style="text-align:center">相等于</td><td style="text-align:center">4==3</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">！=</td><td style="text-align:center">不等于</td><td style="text-align:center">4！=3</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td><td style="text-align:center">4&lt;3</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td><td style="text-align:center">4&gt;3</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">小等于</td><td style="text-align:center">4&lt;=3</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">大等于</td><td style="text-align:center">4&gt;=3</td><td style="text-align:center">1</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=10;</span><br><span class="line">  cout&lt;&lt;(a&lt;b)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;(a!=10)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;(a&lt;=10)&lt;&lt;endl</span><br><span class="line">  cout&lt;&lt;(a==10)&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" bule><summary> 逻辑运算符 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">术语</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">！</td><td style="text-align:center">非</td><td style="text-align:center">！a</td></tr><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">与</td><td style="text-align:center">a&amp;&amp;b</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center"></td><td style="text-align:center"></td><td>或</td><td>a\</td><td></td><td>b</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=20;</span><br><span class="line">  //在C++中 除了0 都为真</span><br><span class="line">  cout&lt;&lt;!a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;!!a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;(a&amp;&amp;b)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;(a||b)&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="程序流程结构"><a href="#程序流程结构" class="headerlink" title="程序流程结构"></a>程序流程结构</h1><details class="folding-tag" yellow><summary> 程序流程结构 </summary>              <div class='content'>              <details class="folding-tag" red><summary> 选择结构 </summary>              <div class='content'>              <h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><h3 id="单行if语句"><a href="#单行if语句" class="headerlink" title="单行if语句"></a>单行if语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int score;</span><br><span class="line">  cin&gt;&gt;score;</span><br><span class="line">  if(score&gt;60)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;及格&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多行if语句"><a href="#多行if语句" class="headerlink" title="多行if语句"></a>多行if语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int score;</span><br><span class="line">  cin&gt;&gt;score;</span><br><span class="line">  if(score&gt;60)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;及格&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;不及格&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多条件if语句"><a href="#多条件if语句" class="headerlink" title="多条件if语句"></a>多条件if语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int score;</span><br><span class="line">  cin&gt;&gt;score;</span><br><span class="line">  if(score&gt;80)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;优秀&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  else if(score&gt;60)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;一般&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  else (score&lt;60)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;继续加油&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><p>==语法：表达式1 ？表达式2 ：表达式3==</p><p>如果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表达式1的值为真，执行表达式2的结果</span><br><span class="line"></span><br><span class="line">表达式2的值为假，执行表达式3的结果</span><br></pre></td></tr></table></figure><h2 id="Switch语句"><a href="#Switch语句" class="headerlink" title="Switch语句"></a>Switch语句</h2><p>==作用：执行多条件分支语句==</p><p>缺点：判断的时候只能是整形或者是字符型，不可以是一个区间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">switch(表达式)</span><br><span class="line">&#123;</span><br><span class="line">  case 结果1：执行语句；break;</span><br><span class="line">  case 结果2：执行语句；break;</span><br><span class="line">  case 结果3：执行语句；break;</span><br><span class="line">  case 结果4：执行语句；break;</span><br><span class="line">  …………</span><br><span class="line">  default: 执行语句；break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int score;</span><br><span class="line">  cin&gt;&gt;score;</span><br><span class="line">  switch(score)</span><br><span class="line">  &#123;</span><br><span class="line">    case 8: cout&lt;&lt;&quot;您认为是经典电影&quot;&lt;&lt;endl;</span><br><span class="line">    break;</span><br><span class="line">    case 5: cout&lt;&lt;&quot;您认为是一般电影&quot;&lt;&lt;endl;</span><br><span class="line">    break;</span><br><span class="line">    case 3: cout&lt;&lt;&quot;您认为是尿片电影&quot;&lt;&lt;endl;</span><br><span class="line">    break;</span><br><span class="line">    case 2: cout&lt;&lt;&quot;您认为是辣鸡电影&quot;&lt;&lt;endl;</span><br><span class="line">    break;</span><br><span class="line">    default： cout&lt;&lt;&quot;您认为是烂片&quot;&lt;&lt;endl;</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 循环结构 </summary>              <div class='content'>              <h2 id="while循环语句（先买票再上船）"><a href="#while循环语句（先买票再上船）" class="headerlink" title="while循环语句（先买票再上船）"></a>while循环语句（先买票再上船）</h2><p>==语法： while（循环条件）{ 循环语句 }==</p><p>==解释： 只要循环条件为真，就执行循环语句==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int num=0;</span><br><span class="line">  while(num&lt;10)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dowhile循环语句-先上船再买票"><a href="#dowhile循环语句-先上船再买票" class="headerlink" title="dowhile循环语句(先上船再买票)"></a>dowhile循环语句(先上船再买票)</h2><p>==语法： do{ 循环语句 }  while { 循环语句 }==</p><p>==区别： 与while语句的区别在于do……while会先执行一次循环语句，再判断循环条件==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int num=0;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    num++</span><br><span class="line">  &#125;while(num&lt;10);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h2><p>==for（起始表达式；条件表达式；末尾循环体）{ 循环语句； }==</p><h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2>              </div>            </details><details class="folding-tag" green><summary> 跳转语句 </summary>              <div class='content'>              <h2 id="while循环语句（先买票再上船）"><a href="#while循环语句（先买票再上船）" class="headerlink" title="while循环语句（先买票再上船）"></a>while循环语句（先买票再上船）</h2><p>==语法： while（循环条件）{ 循环语句 }==</p><p>==解释： 只要循环条件为真，就执行循环语句==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int num=0;</span><br><span class="line">  while(num&lt;10)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dowhile循环语句-先上船再买票"><a href="#dowhile循环语句-先上船再买票" class="headerlink" title="dowhile循环语句(先上船再买票)"></a>dowhile循环语句(先上船再买票)</h2><p>==语法： do{ 循环语句 }  while { 循环语句 }==</p><p>==区别： 与while语句的区别在于do……while会先执行一次循环语句，再判断循环条件==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int num=0;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    num++</span><br><span class="line">  &#125;while(num&lt;10);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h2><p>==for（起始表达式；条件表达式；末尾循环体）{ 循环语句； }==</p><h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2>              </div>            </details>              </div>            </details><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><details class="folding-tag" yellow><summary> 数组 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 一维数组 </summary>              <div class='content'>              <h2 id="一维数组的定义方式"><a href="#一维数组的定义方式" class="headerlink" title="一维数组的定义方式"></a>一维数组的定义方式</h2><ol><li>数据类型 数组名【数组长度】</li><li>数据类型 数组名【数组长度】={ 值1，值2，值3，…… }</li><li>数据类型 数组名【】={ 值1，值2，值3，…… }</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int score[5];</span><br><span class="line">  score[0]=1;</span><br><span class="line">  score[1]=2;</span><br><span class="line">  score[2]=3;</span><br><span class="line">  score[3]=4;</span><br><span class="line">  score[4]=5;</span><br><span class="line">  int list[10]=&#123;1,2,3,4,5,6,7,8,9,10&#125;</span><br><span class="line">  int num[]=&#123;A,B,C,D,E,F,G&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一维数组名的用途"><a href="#一维数组名的用途" class="headerlink" title="一维数组名的用途"></a>一维数组名的用途</h3><p>==1：可以统计整个数组在内存中的长度==</p><p>==2：可以获取数组在内存中的首地址==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //1：可以统计整个数组在内存中的长度</span><br><span class="line">  int score[10]=&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">  cout&lt;&lt;&quot;整个数组所占内存空间为&quot;&lt;&lt;sizeof(score)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;每个元素所占空间为&quot;&lt;&lt;sizeof(score[0])&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;数组的元素个数为&quot;&lt;&lt;sizeof(score)/sizeof(score[0])&lt;&lt;endl;</span><br><span class="line">  //2：可以获取数组在内存中的首地址</span><br><span class="line">  cout&lt;&lt;&quot;数组的首地址为: &quot;&lt;&lt;(int)score&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;数组第一个元素地址为&quot;&lt;&lt;(int)&amp;score[0]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 二维数组 </summary>              <div class='content'>              <h2 id="二维数组的定义方式"><a href="#二维数组的定义方式" class="headerlink" title="二维数组的定义方式"></a>二维数组的定义方式</h2><ol><li>数据类型 数组名[ 行数 ] [ 列数 ]；</li><li>数据类型 数组名[ 行数 ] [ 列数 ]={ { 数据1，数据2 }，{ 数据2，数据4 } }；</li><li>数据类型 数组名[ 行数 ] [ 列数 ]={ 数据1，数据2，数据3，数据4…… }；</li><li><p>数据类型 数组名[   ] [ 列数 ]={ 数据1，数据2，数据3，数据4…… }；</p><p>==不可以写成 数据类型 数组名 [ 行数 ] [  ] 等于 { 数据1，数据2，数据3，数据4…… }；==</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int arr[][3]=&#123;1,2,3,4,5,6,7,8&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组数组名"><a href="#二维数组数组名" class="headerlink" title="二维数组数组名"></a>二维数组数组名</h3><p>1：查看二维数组所占内存空间</p><p>2：获取二维数组首地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int score[2][3]=&#123;1,2,3,4,5,6&#125;;</span><br><span class="line">  cout&lt;&lt;&quot;查看二维数组所占内存空间：&quot;&lt;&lt;sizeof(score)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;获取二维数组一行大小：&quot;&lt;&lt;sizeof(score[0])&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;获取二维数组元素大小：&quot;&lt;&lt;sizeof(score[0][0])&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;获取二维数组首地址 &quot;&lt;&lt;(int)&amp;score&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;获取二维数组第一个元素地址&quot;&lt;&lt;(int)&amp;score[0][0]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 冒泡排序 </summary>              <div class='content'>              <p>1：比较相邻的元素。如果第一个比第二个大，就交换两个数</p><p>2：对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值 </p><p>3：重复以上步骤，每次比较次数-1，直到不需要比较</p><p><br/></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int arr[9]=&#123;4,2,8,0,5,7,1,3,9&#125;;</span><br><span class="line">  for(int i=0;i&lt;9-1;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    for(int j=0;j&lt;9-1;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      if(arr[j]&gt;arr[j+1])</span><br><span class="line">      &#123;</span><br><span class="line">        int temp=arr[j];</span><br><span class="line">        arr[j]=arr[j+1];</span><br><span class="line">        arr[j+1]=temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><details class="folding-tag" yellow><summary> 程序流程结构 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 函数的定义 </summary>              <div class='content'>              <h2 id="函数的定义一般主要有5个步骤："><a href="#函数的定义一般主要有5个步骤：" class="headerlink" title="函数的定义一般主要有5个步骤："></a>函数的定义一般主要有5个步骤：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">==1：返回值类型：一个函数可以返回一个值。在函数定义中==</span><br><span class="line"></span><br><span class="line">==2：函数名：给函数起个名称==</span><br><span class="line"></span><br><span class="line">==3：参数列表：使用函数时，传入的数据==</span><br><span class="line"></span><br><span class="line">==4：函数体语句：花括号内的代码，函数内需要执行的语句==</span><br><span class="line"></span><br><span class="line">==5：return表达式：和返回值类型挂钩，函数执行完后，返回相应的数据==</span><br></pre></td></tr></table></figure><p><br/></p><hr><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名（参数列表）</span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  函数体语句</span><br><span class="line">  </span><br><span class="line">  return 表达式</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br/></p><p>例子：</p><blockquote><p>实现一个加法函数，功能为：传入两个整形数据，计算数据相加的结果，并且返回</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int add(int num1,int num2)</span><br><span class="line">&#123;</span><br><span class="line">  int sum=num1+num2;</span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 函数的调用 </summary>              <div class='content'>              <p>==功能：使用定义好的函数==</p><p>==语法：函数名（参数）==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int add(int num1,int num2)</span><br><span class="line">&#123;</span><br><span class="line">  int sun=num1+num2;</span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=10;</span><br><span class="line">  //调用add函数</span><br><span class="line">  int sum=add(a,b)</span><br><span class="line">  cout&lt;&lt;&quot;sum= &quot;&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 值传递 </summary>              <div class='content'>              <p>==所谓值传递，就是 函数调用时实参将数值传入给形参==</p><p>==值传递，如果形参发生，并不会影响实参==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void swap(int num1,int num2)</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;&quot;交换前:&quot;&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;num1=&quot;&lt;&lt;num1&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;num2=&quot;&lt;&lt;num2&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">  int temp=num1;</span><br><span class="line">  num1=num2;</span><br><span class="line">  num2=temp;</span><br><span class="line">  </span><br><span class="line">  cout&lt;&lt;&quot;交换后:&quot;&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;num1=&quot;&lt;&lt;num1&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;num2=&quot;&lt;&lt;num2&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">  //return ；当函数声明的时候，不需要返回值，可以不写return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=20;</span><br><span class="line">  swap(a,b);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" ><summary> 函数的常见样式 </summary>              <div class='content'>              <p>==常见的函数样式有4种==</p><pre><code>==1：无参无返====2：有参无返====3：无参有饭====4：有参有返==</code></pre><hr><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">//1：无参无饭</span><br><span class="line">void test1()</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;&quot;代码太难了&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//2：有参无返</span><br><span class="line">void test2(int a)</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;&quot;this is test2 a= &quot;&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//3：无参有返</span><br><span class="line">int test3()</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;&quot;this is test3 &quot;&lt;&lt;endl;</span><br><span class="line">  teturn 100;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//4：有参有返</span><br><span class="line">int test4(int b,int c)</span><br><span class="line">&#123;</span><br><span class="line">  sum=s1+s2;</span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //无参无饭函数调用</span><br><span class="line">  test1();</span><br><span class="line">  </span><br><span class="line">  //有参无返函数调用</span><br><span class="line">  test2(100);</span><br><span class="line">  </span><br><span class="line">  //无参有返函数调用</span><br><span class="line">  int c=test3();</span><br><span class="line">  cout&lt;&lt;&quot;c= &quot;&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">  //有参有返函数调用</span><br><span class="line">  int s1=100;</span><br><span class="line">  int s2=200;</span><br><span class="line">  int sum=test4(s1,s2);</span><br><span class="line">  cout&lt;&lt;&quot;sum=&quot;&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 函数的声明 </summary>              <div class='content'>              <p>==作用：告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义==</p><p>==函数声明可以多次，但是函数的定义只能有一次==</p><hr><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//函数声明</span><br><span class="line">//比较函数，实现两个整形数字进行比较，返回较大的值</span><br><span class="line">int max(int a,int b)   //提前声明</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=20;</span><br><span class="line">  int c=max(a,b);</span><br><span class="line">  cout&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int max(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">  return a&gt;b?a:b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 函数的分文件编写 </summary>              <div class='content'>              <p>==作用：让代码结构更加清晰==</p><p><br/></p><p>==函数分文件编写一般有4个步骤==</p><pre><code>1：创建后缀名为.h的头文件2：创建后缀名为.cpp的源文件3：在头文件中写函数声明4：在源文件中写函数的定义</code></pre>              </div>            </details>              </div>            </details><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><details class="folding-tag" yellow><summary> 指针 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 指针变量的定义和使用 </summary>              <div class='content'>              <h2 id="指针的基本概念"><a href="#指针的基本概念" class="headerlink" title="指针的基本概念"></a>指针的基本概念</h2><p>==指针的作用：可以通过指针间接访问内存==</p><ul><li>内存编号是从0开始记录的，一般用十六进制的数字表示</li><li>可以利用指针变量保存地址</li></ul><h2 id="指针变量的定义和使用"><a href="#指针变量的定义和使用" class="headerlink" title="指针变量的定义和使用"></a>指针变量的定义和使用</h2><p>==指针定义的语法：数据类型 * 指针变量名；==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //1：定义指针</span><br><span class="line">  int a=10;</span><br><span class="line">  int *p；   //定义指针</span><br><span class="line">  p=&amp;a;      //让指针记录a的地址</span><br><span class="line">  cout&lt;&lt;&quot;a的地址为：&quot;&lt;&lt;&amp;a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;指针p为：&quot;&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">  //2：使用指针</span><br><span class="line">  //可以通过解引用（指针前面加一个*   被称为解引用的操作）的方式来找到指针指向的内存</span><br><span class="line">  *p=1000;</span><br><span class="line">  cout&lt;&lt;&quot;a= &quot;&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;*p= &quot;&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 指针所占的内存空间 </summary>              <div class='content'>              <p>指针也是种数据类型:：占用4个字节（32位）8个字节（64位）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a;</span><br><span class="line">  int *p=&amp;a;</span><br><span class="line">  //不管什么数据类型都占4个字节</span><br><span class="line">  cout&lt;&lt;&quot;sizeof(int*)= &quot;&lt;&lt;sizeof(p)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;sizeof(int*)= &quot;&lt;&lt;sizeof(int *)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;sizeof(double*)= &quot;&lt;&lt;sizeof(double *)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;sizeof(float*)= &quot;&lt;&lt;sizeof(float *)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;sizeof(char*)= &quot;&lt;&lt;sizeof(char *)&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 空指针和野指针 </summary>              <div class='content'>              <h2 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h2><p>==空指针：指针变量指向内存中编号为0的空间==</p><p>==用途：初始化指针变量==</p><p>==注意：空指针指向的内存是不可以访问的==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //指针变量p指向内存编号为0的内存</span><br><span class="line">  int *p=NULL;</span><br><span class="line">  //空指针指向的内存是不可以访问的</span><br><span class="line">  *p =100;    //显示不能访问</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h2><p>==野指针：指针变量指向非法的内存空间==</p><p>在操作中尽量避免野指针</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int *p=(int *)0x1100;   //野指针</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" bule><summary> const修饰指针 </summary>              <div class='content'>              <p>==const修饰指针的三种情况==</p><ul><li><p>const修饰指针   ——— 常量指针</p><p>特点：指针的指向可以修改，但是指针指向的值不可以修改</p></li><li><p>const修饰常量   ———指针常量</p><p>特点：  指针的指向不可以修改，但是指针指向的值可以修改</p></li><li>const即修饰指针，有修饰常量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"> int a=10;</span><br><span class="line"> int b=10;</span><br><span class="line"> int *p=&amp;a;</span><br><span class="line"> const int *p=&amp;a;             //常量指针</span><br><span class="line"> int * const p=&amp;a;           //指针常量</span><br><span class="line"> const int *const p=&amp;a;     //const即修饰指针，有修饰常量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 指针和数组 </summary>              <div class='content'>              <p>==作用：利用指针访问数组中的元素==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int arr[10]=&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">  int *p=arr;   //arr就是数组首地址</span><br><span class="line">  //p++;</span><br><span class="line">  //cout&lt;&lt;&quot;利用指针访问第二个元素：&quot;&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">  for(int i=0;i&lt;10;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">    p++;</span><br><span class="line">  &#125;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 指针和函数 </summary>              <div class='content'>              <p>==作用：利用指正作为函数参数，可以修改实参的值==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">void swap1(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">  int temp=a;</span><br><span class="line">  a=b;</span><br><span class="line">  b=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void swap2(int *p1,int *p2)</span><br><span class="line">&#123;</span><br><span class="line">  int temp=*p1;</span><br><span class="line">  *p1=*p2;</span><br><span class="line">  *p2=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //指针和函数</span><br><span class="line">  //1:值传递</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=20;</span><br><span class="line">  swap1(a,b);</span><br><span class="line">  //2:地址传递    ///地址传输可以修改实参</span><br><span class="line">  swap2(&amp;a,&amp;b);</span><br><span class="line">  cout&lt;&lt;&quot;a= &quot;&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;b= &quot;&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 指针、数组、函数 </summary>              <div class='content'>              <p>案例：封装一个函数，利用冒泡排序，实现对整形数组的升序排序</p><p>数组：int arr[10]={4,3,6,9,1,2,10,8,7,5};</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void bubbleSort(int *arr,int length)</span><br><span class="line">&#123;</span><br><span class="line">  for(int i=0;i&lt;length-1;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    for(int j=0;j&lt;length-i-1;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      if(arr[j]&gt;arr[j+1])</span><br><span class="line">      &#123;</span><br><span class="line">        int temp=arr[j];</span><br><span class="line">        arr[j]=arr[j+1];</span><br><span class="line">        arr[j+1]=temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void printArray(int *arr,int length)</span><br><span class="line">&#123;</span><br><span class="line">  for(int i=0;i&lt;length;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;arr[i]&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int arr[10]=&#123;4,3,6,9,1,2,10,8,7,5&#125;;</span><br><span class="line">  int length=sizeof(arr)/sizeof(arr[0]);</span><br><span class="line">  bubbleSort(arr,length);</span><br><span class="line">  printArray(arr,length);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><details class="folding-tag" yellow><summary> 结构体 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 结构体定义和使用 </summary>              <div class='content'>              <h2 id="结构体的基本概念"><a href="#结构体的基本概念" class="headerlink" title="结构体的基本概念"></a>结构体的基本概念</h2><p>结构体属于用户自定义的数据类型，允许用户储存不同的数据类型</p><p><br/></p><h2 id="结构体定义和使用"><a href="#结构体定义和使用" class="headerlink" title="结构体定义和使用"></a>结构体定义和使用</h2><p>==语法：struct 结构体名{ 结构体成员列表 } ；==</p><p>通过结构体创建变量的方式有三种：</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 ={ 成员1值，成员2值…… }</li><li>定义结构体时顺便创建变量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct studnet&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  bool sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct studnet&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  bool sex;</span><br><span class="line">&#125;s3;</span><br><span class="line">//同过学生类型来创建具体学生</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //1. struct student s1</span><br><span class="line">  struct student s1;    //给s1属性赋值通过.访问结构体变量中的属性(创建变量时struct可以省略)</span><br><span class="line">  s1.name=&quot;张三&quot;；</span><br><span class="line">  s1.age=18;</span><br><span class="line">  s1.sex=1;</span><br><span class="line">  </span><br><span class="line">  cout&lt;&lt;&quot;姓名: &quot;&lt;&lt;s1.name&lt;&lt;&quot;年龄：&quot;&lt;&lt;s1.age&lt;&lt;&quot;性别 &quot;&lt;&lt;s1.sex&lt;&lt;endl;</span><br><span class="line">  //2. struct student s2=&#123; .... &#125;;</span><br><span class="line">  </span><br><span class="line">  struct student s2=&#123;&quot;李四&quot;,19,0&#125;;</span><br><span class="line">  cout&lt;&lt;&quot;姓名: &quot;&lt;&lt;s2.name&lt;&lt;&quot;年龄：&quot;&lt;&lt;s2.age&lt;&lt;&quot;性别 &quot;&lt;&lt;s2.sex&lt;&lt;endl;</span><br><span class="line">  //在定义结构体时顺便创建变量</span><br><span class="line">  s3.name=&quot;王五&quot;;</span><br><span class="line">  s3.age=200;</span><br><span class="line">  s3.sex=1</span><br><span class="line">  cout&lt;&lt;&quot;姓名: &quot;&lt;&lt;s3.name&lt;&lt;&quot;年龄：&quot;&lt;&lt;s3.age&lt;&lt;&quot;性别 &quot;&lt;&lt;s3.sex&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" ><summary> 结构体数组 </summary>              <div class='content'>              <p>==作用：将自定义的结构体放入到数组中方便维护==</p><p><strong>语法：struct 结构体名 数组名[ 元素个数 ]={ { }，{ }，{ }，…… }</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  int sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //创建结构体数组</span><br><span class="line">  struct student arr[3]</span><br><span class="line">  &#123;</span><br><span class="line">    &#123;&quot;张三&quot;,18,0&#125;,</span><br><span class="line">    &#123;&quot;李四&quot;,20,1&#125;,</span><br><span class="line">    &#123;&quot;王五&quot;,19,0&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  //给结构体数组中的元素赋值</span><br><span class="line">  arr[2].name=&quot;赵六&quot;;</span><br><span class="line">  arr[2].age=28;</span><br><span class="line">  //遍历结构体数组</span><br><span class="line">  for(int i=0;i&lt;3;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;arr[i].name&lt;&lt;arr[i].age&lt;&lt;arr[i].sex&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 结构体指针 </summary>              <div class='content'>              <p>==作用：通过指针访问结构体中的成员==</p><p>利用操作符-&gt;可以通过结构体指针访问结构体属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//定义学生的结构体</span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  int sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //创建学生结构体变量</span><br><span class="line">  struct student s1=&#123;&quot;张三&quot;,18,0&#125;;</span><br><span class="line">  //通过指针指向结构体变量</span><br><span class="line">  struct student *p=&amp;s1;</span><br><span class="line">  //通过指针访问结构体变量的数据</span><br><span class="line">  cout&lt;&lt;&quot;姓名：&quot;&lt;&lt;p-&gt;name&lt;&lt;&quot;年龄：&quot;&lt;&lt;p-&gt;age&lt;&lt;&quot;性别：&quot;&lt;&lt;p-&gt;sex&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 结构体嵌套结构体 </summary>              <div class='content'>              <p>==作用：结构体中的成员可以是另一个结构体==</p><p>==例如：每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  int sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct teacher</span><br><span class="line">&#123;</span><br><span class="line">  int id;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  struct student stu;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  teacher t;</span><br><span class="line">  t.id=100;</span><br><span class="line">  t.name=&quot;老王&quot;；</span><br><span class="line">  t.age=30;</span><br><span class="line">  t.stu.name=&quot;小王&quot;；</span><br><span class="line">  t.stu.age=20;</span><br><span class="line">  t.stu.sex=0;</span><br><span class="line">  //打印</span><br><span class="line">  cout&lt;&lt;&quot;老师姓名：&quot;&lt;&lt;t.name&lt;&lt;&quot;老师编号：&quot;&lt;&lt;t.id&lt;&lt;&quot;老师年龄：&quot;&lt;&lt;t.age&lt;&lt;&quot;学生姓名&quot;&lt;&lt;t.stu.name&lt;&lt;&quot;学生年龄&quot;&lt;&lt;t.stu.age&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 结构体做函数参数 </summary>              <div class='content'>              <p>==作用：将结构体作为参数向函数中传递==</p><p>==传递方式有两种：==</p><ul><li>==值传递==</li><li>==地址传递==</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//定义学生结构体</span><br><span class="line">struct student&#123;</span><br><span class="line">    string name;</span><br><span class="line">    int age;</span><br><span class="line">    int sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//打印学生信息</span><br><span class="line">//1:值传递</span><br><span class="line">void printstudent1(struct student s)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;子函数中 姓名：&quot;&lt;&lt;s.name&lt;&lt;&quot;年龄：&quot;&lt;&lt;s.age&lt;&lt;&quot;性别：&quot;&lt;&lt;s.sex&lt;&lt;endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//2：地址传递</span><br><span class="line">void printstudent2(struct student *p)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;子函数2中 姓名：&quot;&lt;&lt;p-&gt;name&lt;&lt;&quot;年龄：&quot;&lt;&lt;p-&gt;age&lt;&lt;&quot;性别：&quot;&lt;&lt;p-&gt;sex&lt;&lt;endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //创建结构体变量</span><br><span class="line">    struct student s;</span><br><span class="line">    s.name=&quot;张三&quot;;</span><br><span class="line">    s.age=18;</span><br><span class="line">    s.sex=0;</span><br><span class="line">    printstudent1(s);</span><br><span class="line">    printstudent2(&amp;s);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 结构体中const使用场景 </summary>              <div class='content'>              <p>==作用：用const来防止误操作==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  int sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void printstudent(const struct student *s)</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;s-&gt;name&lt;&lt;s-&gt;age&lt;&lt;s-&gt;sex&lt;&lt;endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  struct student s=&#123;&quot;张三&quot;,18,0&#125;;</span><br><span class="line">  printstudent(&amp;s);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 结构体案例1 </summary>              <div class='content'>              <p><strong>案例描述：</strong><br>学校正在做毕设项目，每名老师带领5个学生，总共有8名老师，需求如下：<br>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员<br>学生的成员有姓名，考试分数，创建数组存放3名老师 ，通过函数给每个老师及所带学生赋值<br>最终打印出老师数据以及老师所带学生数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct student&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct  teacher&#123;</span><br><span class="line">  string name;</span><br><span class="line">  struct student stu[5];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void allocatespace(struct teacher arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">  string nameseed=&quot;ABCDE&quot;;</span><br><span class="line">  int scorel[5]=&#123;1,2,3,4,5&#125;;</span><br><span class="line">  for(int i=0;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    arr[i].name=&quot;Teacher_a&quot;;</span><br><span class="line">    arr[i].name+=nameseed[i];</span><br><span class="line">    for(int j=0;j&lt;5;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      arr[i].stu[j].name=&quot;Student_&quot;;</span><br><span class="line">      arr[i].stu[j].name+=nameseed[j];</span><br><span class="line">      arr[i].stu[j].score=scorel[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void printInfo(struct teacher arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">  for(int i=0;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;老师姓名：&quot;&lt;&lt;arr[i].name&lt;&lt;endl;</span><br><span class="line">    for(int j=0;j&lt;5;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      cout&lt;&lt;&quot;\t老师学生姓名：&quot;&lt;&lt;arr[i].stu[j].name&lt;&lt;endl&lt;&lt;&quot;\t成绩：&quot;&lt;&lt;arr[i].stu[j].score&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  struct teacher arr[3];</span><br><span class="line">  int len=sizeof(arr)/sizeof(arr[0]);</span><br><span class="line">  allocatespace(arr,len);</span><br><span class="line">  printInfo(arr,len);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 结构体案例2 </summary>              <div class='content'>              <p><strong>案例描述：</strong></p><p>设计一个英雄的结构体，包括成员姓名，年龄，性别；创建结构体数据数组，数组中存放5名英雄。</p><p>通过冒泡排序算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p><hr><p>==五名英雄信息：==</p><p>{“刘备”,23,“男”}，</p><p>{“关羽”,22,“男”}，</p><p>{“张飞”,20,“男”}，</p><p>{“赵云”,21,“男”}，</p><p>{“貂蝉”,19,“女”}，</p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct hero</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  string sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void heroInfo(struct hero arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">  string xingming[5]=&#123;&quot;刘备&quot;,&quot;关羽&quot;,&quot;张飞&quot;,&quot;赵云&quot;,&quot;貂蝉&quot;&#125;;</span><br><span class="line">  int nianlin[5]=&#123;23,22,20,21,19&#125;;</span><br><span class="line">  string xingbie[5]=&#123;&quot;男&quot;,&quot;男&quot;,&quot;男&quot;,&quot;男&quot;,&quot;女&quot;&#125;;</span><br><span class="line">  for(int i=0;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    arr[i].name=xingming[i];</span><br><span class="line">    arr[i].age=nianlin[i];</span><br><span class="line">    arr[i].sex=xingbie[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void herosort(struct hero arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">  for(int i=0;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    for(int j=0;j&lt;len-i-1;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      if(arr[j].age&lt;arr[j+1].age)</span><br><span class="line">      &#123;</span><br><span class="line">        struct hero temp=arr[j];</span><br><span class="line">        arr[j]=arr[j+1];</span><br><span class="line">        arr[j+1]=temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void printhero(struct hero arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">  for(int i=0;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;英雄姓名：&quot;&lt;&lt;arr[i].name&lt;&lt;&quot;英雄年龄:&quot;&lt;&lt;arr[i].age&lt;&lt;&quot;英雄性别:&quot;&lt;&lt;arr[i].sex&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  struct hero arr[5];</span><br><span class="line">  int len=sizeof(arr)/sizeof(arr[0]);</span><br><span class="line">  heroInfo(arr,len);</span><br><span class="line">  herosort(arr,len);</span><br><span class="line">  printhero(arr,len);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 🎈c puls plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧c plus plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2023/06/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/06/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><details class="folding-tag" yellow><summary> 程序流程结构 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 选择结构 </summary>              <div class='content'>              </div>            </details><details class="folding-tag" blue><summary> 循环结构 </summary>              <div class='content'>              </div>            </details><details class="folding-tag" blue><summary> 跳转语句 </summary>              <div class='content'>              </div>            </details>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 🎈c puls plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧c plus plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题日记</title>
      <link href="/2023/06/17/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/"/>
      <url>/2023/06/17/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p>Mathison and pangrams</p></div><p>题目链接</p><h3 id="https-www-codechef-com-problems-MATPAN-tab-statement"><a href="#https-www-codechef-com-problems-MATPAN-tab-statement" class="headerlink" title="https://www.codechef.com/problems/MATPAN?tab=statement"></a><a href="https://">https://www.codechef.com/problems/MATPAN?tab=statement</a></h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://wx2.sinaimg.cn/orj360/0083eW3Tly1hfmz29ywpij31i20x57ra.jpg" style="width:650px;"/></div></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码实现思想：定义一个标签f，将字母a-z与字符串中的每一个字符相比，如果有则标签改为true,如果没有则</span></span><br><span class="line"><span class="comment">//计入将该位置的价格记下来，进行累加</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="string">&#x27;a&#x27;</span>;i&lt;=<span class="string">&#x27;z&#x27;</span>;i++)&#123;</span><br><span class="line">        <span class="type">bool</span> f=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;s.<span class="built_in">length</span>();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==s[j])&#123;</span><br><span class="line">                f=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="literal">false</span>)&#123;</span><br><span class="line">            c+=a[i<span class="number">-97</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="tip home"><p>Lapindromes</p></div><p>题目链接</p><h3 id="https-www-codechef-com-problems-LAPIN-tab-statement"><a href="#https-www-codechef-com-problems-LAPIN-tab-statement" class="headerlink" title="https://www.codechef.com/problems/LAPIN?tab=statement"></a><a href="https://">https://www.codechef.com/problems/LAPIN?tab=statement</a></h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://wx2.sinaimg.cn/orj360/0083eW3Tly1hfmz29ywpij31i20x57ra.jpg" style="width:650px;"/></div></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="type">int</span> f1[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> f2[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> f=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n=s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)&#123;</span><br><span class="line">                f1[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=n/<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line">                f2[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)</span><br><span class="line">                f1[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=n/<span class="number">2</span>+<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">                f2[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f1[i]!=f2[i])&#123;</span><br><span class="line">                f=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="number">0</span>)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cout&lt;&lt;&quot;s[&quot;&lt;&lt;i&lt;&lt;&quot;]:&quot;&lt;&lt;s[i]&lt;&lt;&quot;s[i]-a:&quot;&lt;&lt;s[i]-&#x27;a&#x27;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;f1[s[i]-&#x27;a&#x27;]&lt;&lt;endl;</span></span><br></pre></td></tr></table></figure><hr><div class="tip home"><p>Asymmetric Swaps</p></div><p>题目链接</p><h3 id="https-www-codechef-com-problems-ARRSWAP"><a href="#https-www-codechef-com-problems-ARRSWAP" class="headerlink" title="https://www.codechef.com/problems/ARRSWAP"></a><a href="https://">https://www.codechef.com/problems/ARRSWAP</a></h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://wx2.sinaimg.cn/orj360/0083eW3Tly1hfmz29ywpij31i20x57ra.jpg" style="width:650px;"/></div></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a[m],b[m],c[m+m];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">c[x++]=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">cin&gt;&gt;b[j];</span><br><span class="line">c[x++]=b[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(c,c+m+m);</span><br><span class="line"><span class="type">int</span> p=c[m<span class="number">-1</span>]-c[<span class="number">0</span>];</span><br><span class="line"><span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">p=<span class="built_in">min</span>(p,c[m+k]-c[i]);</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;p&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="tip home"><p>Distinct Codes</p></div><p>题目链接</p><h3 id="https-www-codechef-com-problems-DISTCODE-tab-statement"><a href="#https-www-codechef-com-problems-DISTCODE-tab-statement" class="headerlink" title="https://www.codechef.com/problems/DISTCODE?tab=statement"></a><a href="https://">https://www.codechef.com/problems/DISTCODE?tab=statement</a></h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://wx2.sinaimg.cn/orj360/0083eW3Tly1hfmz29ywpij31i20x57ra.jpg" style="width:650px;"/></div></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">string str;</span><br><span class="line">cin&gt;&gt;str;</span><br><span class="line"><span class="type">int</span> c=str.<span class="built_in">length</span>();</span><br><span class="line">string arr[c<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;c<span class="number">-1</span>;i++)&#123;</span><br><span class="line">arr[i]=str.<span class="built_in">substr</span>(i,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;c<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line"><span class="keyword">if</span>(arr[i]==arr[j])</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(j==i)</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;count&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 🎈c puls plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧c plus plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>personal website</title>
      <link href="/2023/06/02/%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BD%91%E9%A1%B5/"/>
      <url>/2023/06/02/%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BD%91%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>此网页为博主第一次尝试制作个人网页，技术菜菜，希望各位大佬能够手下留情。<br>本项目因为视频太大缘故，不能上传到GitHub，如有需要源码的小伙伴可以Email留言。</p>]]></content>
      
      
      <categories>
          
          <category> 🎈website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧 WXML/WXSS </tag>
            
            <tag> 🥧 php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吃啦咪微信小程序</title>
      <link href="/2023/05/27/%E5%90%83%E5%95%A6%E5%92%AA%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2023/05/27/%E5%90%83%E5%95%A6%E5%92%AA%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>目前小程序只能发布体验版本⛱️，因为涉及支付功能，不能以个人账户进行发布❄️，但是项目源码已经在GitHub上开源🤟🤟🤟，有兴趣的小伙伴可以下载下来在自己的微信开发者工具上运行哦 ，别忘了给个star⭐️呦！！！</p><p>微信小程序在手机端一键拨号功能和导航功能及摇一摇功能展示</p>]]></content>
      
      
      <categories>
          
          <category> 🎈Wechat miniprogram </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧 JavaScript </tag>
            
            <tag> 🥧 WXML/WXSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>烟雨阁website网站</title>
      <link href="/2023/05/21/%E7%83%9F%E9%9B%A8%E9%98%81%E7%BD%91%E7%AB%99/"/>
      <url>/2023/05/21/%E7%83%9F%E9%9B%A8%E9%98%81%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 🎈website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧php </tag>
            
            <tag> 🥧MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>charts</title>
      <link href="/charts/index.html"/>
      <url>/charts/index.html</url>
      
        <content type="html"><![CDATA[<!-- 文章发布时间统计图 --><div id="posts-chart" data-start="2021-01" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 文章标签统计图 --><div id="tags-chart" data-length="10" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 文章分类统计图 --><div id="categories-chart" data-parent="true" style="border-radius: 8px; height: 300px; padding: 10px;"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/VolantisTags.css"/>
      <url>/css/VolantisTags.css</url>
      
        <content type="html"><![CDATA[* {    box-sizing: border-box;    outline: none;    margin: 0;    padding: 0;  }  details {    display: block;    padding: 20px;    margin: 0.5rem 0;    border-radius: 4px;    background: #fff;    font-size: 0.9375rem;    transition: all 0.28s ease;    -moz-transition: all 0.28s ease;    -webkit-transition: all 0.28s ease;    -o-transition: all 0.28s ease;    border: 1px solid #f6f6f6;  }  summary {    display: block;  }  details summary {    cursor: pointer;    padding: 16px;    margin: -20px;    border-radius: 4px;    color: rgba(85, 85, 85, 0.7);    font-size: 0.875rem;    font-weight: bold;    position: relative;    line-height: normal;  }  details summary > p,  details summary > h1,  details summary > h2,  details summary > h3,  details summary > h4,  details summary > h5,  details summary > h6 {    display: inline;    border-bottom: none !important;  }  details summary:hover {    color: #555;  }  details summary:hover:after {    position: absolute;    content: "+";    text-align: center;    top: 50%;    transform: translateY(-50%);    right: 16px;  }  details > summary {    background: #f6f6f6;  }  details[blue] {    border-color: #e8f4fd;  }  details[blue] > summary {    background: #e8f4fd;  }  details[cyan] {    border-color: #e8fafe;  }  details[cyan] > summary {    background: #e8fafe;  }  details[green] {    border-color: #ebf9ed;  }  details[green] > summary {    background: #ebf9ed;  }  details[yellow] {    border-color: #fff8e9;  }  details[yellow] > summary {    background: #fff8e9;  }  details[red] {    border-color: #feefee;  }  details[red] > summary {    background: #feefee;  }  details[open] {    border-color: rgba(85, 85, 85, 0.2);  }  details[open] > summary {    border-bottom: 1px solid rgba(85, 85, 85, 0.2);    border-bottom-left-radius: 0;    border-bottom-right-radius: 0;  }  details[open][blue] {    border-color: rgba(33, 150, 243, 0.3);  }  details[open][blue] > summary {    border-bottom-color: rgba(33, 150, 243, 0.3);  }  details[open][cyan] {    border-color: rgba(27, 205, 252, 0.3);  }  details[open][cyan] > summary {    border-bottom-color: rgba(27, 205, 252, 0.3);  }  details[open][green] {    border-color: rgba(61, 197, 80, 0.3);  }  details[open][green] > summary {    border-bottom-color: rgba(61, 197, 80, 0.3);  }  details[open][yellow] {    border-color: rgba(255, 189, 43, 0.3);  }  details[open][yellow] > summary {    border-bottom-color: rgba(255, 189, 43, 0.3);  }  details[open][red] {    border-color: rgba(254, 95, 88, 0.3);  }  details[open][red] > summary {    border-bottom-color: rgba(254, 95, 88, 0.3);  }  details[open] > summary {    color: #555;    margin-bottom: 0;  }  details[open] > summary:hover:after {    content: "-";  }    details[open] > div.content {    padding: 16px;    margin: -16px;    margin-top: 0;  }            /*note标签*/      div.note {    position: relative;    margin-top: 0.5rem;    margin-bottom: 0.5rem;    padding: 0.6rem 16px 0.5rem 16px;    padding-left: calc(16px + 16px);    border-radius: 4px;    background: #f6f6f6;    border-left: 4px solid #767676;  }  div.note h2,  div.note h3,  div.note h4,  div.note h5,  div.note h6 {    margin-top: 3px;    margin-bottom: 0;    padding-top: 0 !important;    border-bottom: initial;  }  div.note p,  div.note ul,  div.note ol,  div.note blockquote,  div.note img {    font-size: 14px;    margin-top: 0.5rem;    margin-bottom: 0.5rem;  }  div.note::before {    position: absolute;    top: calc(50% - 24px * 0.5);    left: 4px;    width: 24px;    height: 24px;    text-align: center;    font-weight: 600;    line-height: 24px;    vertical-align: middle;    font-family: 'Font Awesome 5 Free';  }  div.note::before {    color: #767676;    content: '\f054';  }  div.note::before {    content: '\f054';  }  div.note.quote {    background: #e8f4fd;    border-color: #2196f3;  }  div.note.quote::before {    color: #2196f3;    content: '\f10d';  }  div.note.info {    background: #e8f4fd;    border-color: #2196f3;  }  div.note.info::before {    color: #2196f3;    content: '\f129';  }  div.note.success,  div.note.done {    background: #ebf9ed;    border-color: #3dc550;  }  div.note.success::before,  div.note.done::before {    color: #3dc550;    content: '\f00c';  }  div.note.warning {    background: #fff8e9;    border-color: #ffbd2b;  }  div.note.warning::before {    color: #ffbd2b;    content: '\f12a';  }  div.note.danger,  div.note.error {    background: #feefee;    border-color: #fe5f58;  }  div.note.danger::before,  div.note.error::before {    color: #fe5f58;    content: '\f00d';  }  div.note.radiation::before {    content: '\f7b9';  }  div.note.bug::before {    content: '\f188';  }  div.note.idea::before {    content: '\f0eb';  }  div.note.link::before {    content: '\f0c1';  }  div.note.paperclip::before {    content: '\f0c6';  }  div.note.todo::before {    content: '\f0ae';  }  div.note.message::before {    content: '\f4ad';  }  div.note.guide::before {    content: '\f277';  }  div.note.download::before {    content: '\f019';  }  div.note.up::before {    content: '\f102';  }  div.note.undo::before {    content: '\f2ea';  }  div.note.play::before {    content: '\f144';  }  div.note.clear {    background: none;    border-color: none;  }  div.note.light {    background: #f6f6f6;    border-color: #aaa;  }  div.note.light::before {    color: #aaa;  }  div.note.gray {    background: #f6f6f6;    border-color: #767676;  }  div.note.gray::before {    color: #767676;  }  div.note.red {    background: #feefee;    border-color: #fe5f58;  }  div.note.red::before {    color: #fe5f58;  }  div.note.yellow {    background: #fff8e9;    border-color: #ffbd2b;  }  div.note.yellow::before {    color: #ffbd2b;  }  div.note.green {    background: #ebf9ed;    border-color: #3dc550;  }  div.note.green::before {    color: #3dc550;  }  div.note.cyan {    background: #e8fafe;    border-color: #1bcdfc;  }  div.note.cyan::before {    color: #1bcdfc;  }  div.note.blue {    background: #e8f4fd;    border-color: #2196f3;  }  div.note.blue::before {    color: #2196f3;  }      /*note标签结束*/    /*文字标签*/  p.p.subtitle {    font-weight: bold;    color: #2196f3;    padding-top: 1rem;  }  p.p.subtitle:first-child {    padding-top: 0.5rem;  }  span.p.logo,  p.p.logo {    font-family: "Varela Round", "PingFang SC", "Microsoft YaHei", Helvetica, Arial, Helvetica, monospace;  }  span.p.code,  p.p.code {    font-family: Menlo, UbuntuMono, Monaco, monospace, courier, sans-serif;  }  span.p.left,  p.p.left {    display: block;    text-align: left;  }  span.p.center,  p.p.center {    display: block;    text-align: center;  }  span.p.right,  p.p.right {    display: block;    text-align: right;  }  span.p.small,  p.p.small {    font-size: 0.875rem;  }  span.p.large,  p.p.large {    font-size: 3rem;    line-height: 1.4;  }  span.p.huge,  p.p.huge {    font-size: 4rem;    line-height: 1.4;  }  span.p.ultra,  p.p.ultra {    font-size: 6rem;    line-height: 1.4;  }  span.p.small,  p.p.small,  span.p.large,  p.p.large,  span.p.huge,  p.p.huge,  span.p.ultra,  p.p.ultra {    margin: 0;    padding: 0;  }  span.p.bold,  p.p.bold {    font-weight: bold;  }  span.p.h1,  p.p.h1 {    font-size: 1.625rem;    color: #555;    padding-top: 1rem;  }  span.p.h2,  p.p.h2 {    font-size: 1.375rem;    color: #555;    padding-top: 1rem;    border-bottom: 1px solid rgba(85,85,85,0.1);  }  span.p.h3,  p.p.h3 {    font-size: 1.25rem;    color: #2196f3;    padding-top: 1rem;  }  span.p.h4,  p.p.h4 {    font-size: 1.125rem;    color: #555;    padding-top: 1rem;  }  span.p.red,  p.p.red {    color: #fe5f58;  }  span.p.yellow,  p.p.yellow {    color: #ffbd2b;  }  span.p.green,  p.p.green {    color: #3dc550;  }  span.p.cyan,  p.p.cyan {    color: #1bcdfc;  }  span.p.blue,  p.p.blue {    color: #2196f3;  }  span.p.gray,  p.p.gray {    color: #666;  }  /*文字标签结束*/          div.tabs {    display: block;    position: relative;    margin-top: 0.5rem;    margin-bottom: 0.5rem;    border-radius: 4px;    background: #fff;    border: 1px solid rgba(85, 85, 85, 0.2);    font-size: 0.7375rem;  }    .tab::before {    content: none !important;  }    div.tabs ul li {    padding: 0 !important;    margin: 0 !important;  }    div.tabs ul li a {    border-radius: 0;  }    [data-theme="dark"] div.tabs {    border-radius: 2px;    border-color: rgba(0, 0, 0, 0.8);  }    [data-theme="dark"] div.tabs ul.nav-tabs {    background: rgba(0, 0, 0, 0.8);    color: white;    filter: brightness(0.7);  }  [data-theme="dark"] div.tabs .tab-content .tab-pane {    background: rgba(0, 0, 0, 0.8);    color: rgba(255, 255, 255, 0.7);  }  div.tabs .highlight,  div.tabs details,  div.tabs div.note,  div.tabs ol,  div.tabs p,  div.tabs ul {    margin-top: 0.5rem;    margin-bottom: 0.5rem;  }    div.tabs ul.nav-tabs {    display: -ms-flexbox;    display: flex;    overflow-x: auto;    white-space: nowrap;    -ms-flex-pack: start;    justify-content: flex-start;    margin: 0 !important;    padding: 0 !important;    background: #f6f6f6;    border-radius: 4px 4px 0 0;    line-height: 1.4em;  }    div.tabs ul.nav-tabs li.tab {    list-style-type: none;    margin-top: 0;    margin-bottom: 0;  }    div.tabs ul.nav-tabs li.tab:last-child {    padding-right: 16px;  }    div.tabs ul.nav-tabs li.tab a {    display: block;    cursor: pointer;    border-radius: 4px 4px 0 0;    padding: 8px;    text-align: center;    line-height: inherit;    font-weight: 700;    color: rgba(68, 68, 68, 0.65);    border: 1px solid transparent;  }    div.tabs ul.nav-tabs li.tab a:hover {    color: #555;  }    div.tabs ul.nav-tabs li.tab.active a {    cursor: default;    color: #555;    background: #fff;    border: 1px solid rgba(85, 85, 85, 0.2);    border-bottom: 1px solid #fff;  }    div.tabs .tab-content {    border-top: 1px solid rgba(85, 85, 85, 0.2);    margin-top: -1px;  }    div.tabs .tab-content .tab-pane {    padding: 16px;  }    div.tabs .tab-content .tab-pane:not(.active) {    display: none;    opacity: 0;  }    div.tabs .tab-content .tab-pane.active {    display: block;    opacity: 1;  }    div.tabs .tab-content .tab-pane > .fancybox:first-child,  div.tabs .tab-content .tab-pane > .highlight:first-child,  div.tabs .tab-content .tab-pane > .note:first-child,  div.tabs .tab-content .tab-pane > .tabs:first-child,  div.tabs .tab-content .tab-pane > ol:first-child,  div.tabs .tab-content .tab-pane > p:first-child,  div.tabs .tab-content .tab-pane > ul:first-child {    margin-top: 0;  }    div.tabs .tab-content .tab-pane > .fancybox:last-child,  div.tabs .tab-content .tab-pane > .highlight:last-child,  div.tabs .tab-content .tab-pane > .note:last-child,  div.tabs .tab-content .tab-pane > .tabs:last-child,  div.tabs .tab-content .tab-pane > ol:last-child,  div.tabs .tab-content .tab-pane > p:last-child,  div.tabs .tab-content .tab-pane > ul:last-child {    margin-bottom: 0;  }    div.btns {    margin: 0 -8px;    display: -ms-flexbox;    display: flex;    -ms-flex-wrap: wrap;    flex-wrap: wrap;    -ms-flex-align: start;    align-items: flex-start;    overflow: visible;  }    [data-theme="dark"] div.btns {    filter: brightness(0.7);  }    [data-theme="dark"] div.btns a {    background: 0 0;  }    div.btns,  div.btns a,  div.btns p {    font-size: 0.8125rem;    color: #555;  }    div.btns b {    font-size: 0.875rem;  }    .btns img {    margin: 0 !important;  }    div.btns.wide > a {    padding-left: 32px;    padding-right: 32px;  }    div.btns.fill > a {    -ms-flex-positive: 1;    flex-grow: 1;    width: auto;  }    div.btns.around {    -ms-flex-pack: distribute;    justify-content: space-around;  }    div.btns.center {    -ms-flex-pack: center;    justify-content: center;  }    div.btns.grid2 > a {    width: calc(100% / 2 - 16px);  }    @media screen and (max-width: 1024px) {    div.btns.grid2 > a {      width: calc(100% / 2 - 16px);    }  }    @media screen and (max-width: 768px) {    div.btns.grid2 > a {      width: calc(100% / 2 - 16px);    }  }    @media screen and (max-width: 500px) {    div.btns.grid2 > a {      width: calc(100% / 1 - 16px);    }  }    div.btns.grid3 > a {    width: calc(100% / 3 - 16px);  }    @media screen and (max-width: 1024px) {    div.btns.grid3 > a {      width: calc(100% / 3 - 16px);    }  }    @media screen and (max-width: 768px) {    div.btns.grid3 > a {      width: calc(100% / 3 - 16px);    }  }    @media screen and (max-width: 500px) {    div.btns.grid3 > a {      width: calc(100% / 1 - 16px);    }  }    div.btns.grid4 > a {    width: calc(100% / 4 - 16px);  }    @media screen and (max-width: 1024px) {    div.btns.grid4 > a {      width: calc(100% / 3 - 16px);    }  }    @media screen and (max-width: 768px) {    div.btns.grid4 > a {      width: calc(100% / 3 - 16px);    }  }    @media screen and (max-width: 500px) {    div.btns.grid4 > a {      width: calc(100% / 2 - 16px);    }  }    div.btns.grid5 > a {    width: calc(100% / 5 - 16px);  }    @media screen and (max-width: 1024px) {    div.btns.grid5 > a {      width: calc(100% / 4 - 16px);    }  }    @media screen and (max-width: 768px) {    div.btns.grid5 > a {      width: calc(100% / 3 - 16px);    }  }    @media screen and (max-width: 500px) {    div.btns.grid5 > a {      width: calc(100% / 2 - 16px);    }  }    div.btns a {    transition: all 0.28s ease;    -moz-transition: all 0.28s ease;    -webkit-transition: all 0.28s ease;    -o-transition: all 0.28s ease;    margin: 8px;    margin-top: calc(1.25 * 16px + 32px);    min-width: 120px;    font-weight: 700;    display: -ms-flexbox;    display: flex;    -ms-flex-pack: start;    justify-content: flex-start;    -ms-flex-line-pack: center;    align-content: center;    -ms-flex-align: center;    align-items: center;    -ms-flex-direction: column;    flex-direction: column;    padding: 8px;    text-align: center;    background: #f6f6f6;    border-radius: 4px;  }      div.btns a > i:first-child,  div.btns a > img:first-child {    transition: all 0.28s ease;    -moz-transition: all 0.28s ease;    -webkit-transition: all 0.28s ease;    -o-transition: all 0.28s ease;    height: 64px;    width: 64px;    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.1);    margin: 16px 8px 4px 8px;    margin-top: calc(-1.25 * 16px - 32px);    border: 2px solid #fff;    background: #fff;    line-height: 60px;    font-size: 28px;  }    div.btns a > i:first-child.auto,  div.btns a > img:first-child.auto {    width: auto;  }    div.btns a > i:first-child {    color: #fff;    background: #2196f3;  }    div.btns a b,  div.btns a p {    margin: 0.25em;    font-weight: 400;    line-height: 1.25;    word-wrap: break-word;  }    div.btns a b {    font-weight: 700;    line-height: 1.3;  }    div.btns a img {    margin: 0.4em auto;  }    div.btns a:not([href]) {    cursor: default;    color: inherit;  }    div.btns a[href]:hover {    background: rgba(255, 87, 34, 0.15);  }    div.btns a[href]:hover,  div.btns a[href]:hover b {    color: #ff5722;  }    div.btns a[href]:hover > i:first-child,  div.btns a[href]:hover > img:first-child {    transform: scale(1.1) translateY(-8px);    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.1);  }    div.btns a[href]:hover > i:first-child {    background: #ff5722;  }    div.btns.circle a > i:first-child,  div.btns.circle a > img:first-child {    border-radius: 32px;  }    div.btns.rounded a > i:first-child,  div.btns.rounded a > img:first-child {    border-radius: 16px;  }            /*checkbox*/  .checkbox {    display: -ms-flexbox;    display: flex;    -ms-flex-align: center;    align-items: center;  }    .checkbox input {    -webkit-appearance: none;    -moz-appearance: none;    -ms-appearance: none;    -o-appearance: none;    appearance: none;    position: relative;    height: 16px;    width: 16px;    transition: all 0.15s ease-out 0s;    cursor: pointer;    display: inline-block;    outline: 0;    border-radius: 2px;    -ms-flex-negative: 0;    flex-shrink: 0;    margin-right: 8px;  }    [data-theme="dark"] .checkbox {    filter: brightness(0.7);  }    .checkbox input[type="checkbox"]:after,  .checkbox input[type="checkbox"]:before {    position: absolute;    content: "";    background: #fff;  }    .checkbox input[type="checkbox"]:before {    left: 1px;    top: 5px;    width: 0;    height: 2px;    transition: all 0.2s ease-in;    transform: rotate(45deg);    -webkit-transform: rotate(45deg);    -moz-transform: rotate(45deg);    -ms-transform: rotate(45deg);    -o-transform: rotate(45deg);  }    .checkbox input[type="checkbox"]:after {    right: 7px;    bottom: 3px;    width: 2px;    height: 0;    transition: all 0.2s ease-out;    transform: rotate(40deg);    -webkit-transform: rotate(40deg);    -moz-transform: rotate(40deg);    -ms-transform: rotate(40deg);    -o-transform: rotate(40deg);    transition-delay: 0.25s;  }    .checkbox input[type="checkbox"]:checked:before {    left: 0;    top: 7px;    width: 6px;    height: 2px;  }    .checkbox input[type="checkbox"]:checked:after {    right: 3px;    bottom: 1px;    width: 2px;    height: 10px;  }    .checkbox.minus input[type="checkbox"]:before {    transform: rotate(0);    left: 1px;    top: 5px;    width: 0;    height: 2px;  }    .checkbox.minus input[type="checkbox"]:after {    transform: rotate(0);    left: 1px;    top: 5px;    width: 0;    height: 2px;  }    .checkbox.minus input[type="checkbox"]:checked:before {    left: 1px;    top: 5px;    width: 10px;    height: 2px;  }    .checkbox.minus input[type="checkbox"]:checked:after {    left: 1px;    top: 5px;    width: 10px;    height: 2px;  }    .checkbox.plus input[type="checkbox"]:before {    transform: rotate(0);    left: 1px;    top: 5px;    width: 0;    height: 2px;  }    .checkbox.plus input[type="checkbox"]:after {    transform: rotate(0);    left: 5px;    top: 1px;    width: 2px;    height: 0;  }    .checkbox.plus input[type="checkbox"]:checked:before {    left: 1px;    top: 5px;    width: 10px;    height: 2px;  }    .checkbox.plus input[type="checkbox"]:checked:after {    left: 5px;    top: 1px;    width: 2px;    height: 10px;  }    .checkbox.times input[type="checkbox"]:before {    transform: rotate(45deg);    left: 3px;    top: 1px;    width: 0;    height: 2px;  }    .checkbox.times input[type="checkbox"]:after {    transform: rotate(135deg);    right: 3px;    top: 1px;    width: 0;    height: 2px;  }    .checkbox.times input[type="checkbox"]:checked:before {    left: 1px;    top: 5px;    width: 10px;    height: 2px;  }    .checkbox.times input[type="checkbox"]:checked:after {    right: 1px;    top: 5px;    width: 10px;    height: 2px;  }    .checkbox input[type="radio"] {    border-radius: 50%;  }    .checkbox input[type="radio"]:before {    content: "";    display: block;    width: 8px;    height: 8px;    border-radius: 50%;    margin: 2px;    transform: scale(0);    transition: all 0.25s ease-out;  }    .checkbox input[type="radio"]:checked:before {    transform: scale(1);  }    .checkbox input {    border: 2px solid #2196f3;  }    .checkbox input[type="checkbox"]:checked {    background: #2196f3;  }    .checkbox input[type="radio"]:checked:before {    background: #2196f3;  }    .checkbox.red input {    border-color: #fe5f58;  }    .checkbox.red input[type="checkbox"]:checked {    background: #fe5f58;  }    .checkbox.red input[type="radio"]:checked:before {    background: #fe5f58;  }    .checkbox.green input {    border-color: #3dc550;  }    .checkbox.green input[type="checkbox"]:checked {    background: #3dc550;  }    .checkbox.green input[type="radio"]:checked:before {    background: #3dc550;  }    .checkbox.yellow input {    border-color: #ffbd2b;  }    .checkbox.yellow input[type="checkbox"]:checked {    background: #ffbd2b;  }    .checkbox.yellow input[type="radio"]:checked:before {    background: #ffbd2b;  }    .checkbox.cyan input {    border-color: #1bcdfc;  }    .checkbox.cyan input[type="checkbox"]:checked {    background: #1bcdfc;  }    .checkbox.cyan input[type="radio"]:checked:before {    background: #1bcdfc;  }    .checkbox.blue input {    border-color: #2196f3;  }    .checkbox.blue input[type="checkbox"]:checked {    background: #2196f3;  }    .checkbox.blue input[type="radio"]:checked:before {    background: #2196f3;  }    .checkbox p {    display: inline-block;    margin-top: 2px !important;    margin-bottom: 0 !important;  }    div.tabs details {    margin-top: 0.5rem;    margin-bottom: 0.5rem;  }    div.dropmenu {    display: inline-block;    position: relative;    line-height: 2.4;    cursor: default;    transition: all 0.28s ease;    -moz-transition: all 0.28s ease;    -webkit-transition: all 0.28s ease;    -o-transition: all 0.28s ease;    color: rgba(85,85,85,0.85);    background: #f6f6f6;    border-radius: 4px;    border: 1px solid #e7e7e7;    padding: 0 16px;    padding-top: 1px;    font-size: 0.875rem;    font-weight: bold;  }  div.dropmenu:hover {    background: #e8f4fd;    border-color: #cce7fb;  }  div.dropmenu:hover >ul {    display: block;    margin-left: -8px;    margin-top: -4px;  }  div.dropmenu ul>li {    list-style: none;  }  div.dropmenu ul>li >a:hover {    text-decoration: none !important;  }  div.dropmenu .list-v .list-v {    left: calc(100% - 0.5 * 16px);  }        details {    display: block;    padding: 16px;    margin: 0.5rem 0;    border-radius: 4px;    font-size: 0.7375rem;    transition: all 0.28s ease;    -moz-transition: all 0.28s ease;    -webkit-transition: all 0.28s ease;    -o-transition: all 0.28s ease;    border: 1px solid #f6f6f6;    line-height: 1.3;  }    [data-theme="dark"] details {    filter: brightness(0.7);  }    details summary {    cursor: pointer;    padding: 16px;    margin: -16px;    border-radius: 4px;    color: rgba(85, 85, 85, 0.7);    font-size: 0.775rem;    font-weight: 700;    position: relative;  }    details summary > h1,  details summary > h2,  details summary > h3,  details summary > h4,  details summary > h5,  details summary > h6,  details summary > p {    display: inline;    border-bottom: none !important;    margin-top: 2px;    margin-bottom: 0;  }    details summary:hover {    color: #555;  }    details summary:hover:after {    position: absolute;    content: "+";    text-align: center;    top: 50%;    transform: translateY(-50%);    right: 16px;  }    details > summary {    background: #f6f6f6;  }    details[blue] {    border-color: #e8f4fd;  }    details[blue] > summary {    background: #e8f4fd;  }    details[cyan] {    border-color: #e8fafe;  }    details[cyan] > summary {    background: #e8fafe;  }    details[green] {    border-color: #ebf9ed;  }    details[green] > summary {    background: #ebf9ed;  }    details[yellow] {    border-color: #fff8e9;  }    details[yellow] > summary {    background: #fff8e9;  }    details[red] {    border-color: #feefee;  }    details[red] > summary {    background: #feefee;  }    details[open] {    border-color: rgba(85, 85, 85, 0.2);  }    details[open] > summary {    border-bottom: 1px solid rgba(85, 85, 85, 0.2);    border-bottom-left-radius: 0;    border-bottom-right-radius: 0;  }    details[open][blue] {    border-color: rgba(33, 150, 243, 0.3);  }    details[open][blue] > summary {    border-bottom-color: rgba(33, 150, 243, 0.3);  }    details[open][cyan] {    border-color: rgba(27, 205, 252, 0.3);  }    details[open][cyan] > summary {    border-bottom-color: rgba(27, 205, 252, 0.3);  }    details[open][green] {    border-color: rgba(61, 197, 80, 0.3);  }    details[open][green] > summary {    border-bottom-color: rgba(61, 197, 80, 0.3);  }    details[open][yellow] {    border-color: rgba(255, 189, 43, 0.3);  }    details[open][yellow] > summary {    border-bottom-color: rgba(255, 189, 43, 0.3);  }    details[open][red] {    border-color: rgba(254, 95, 88, 0.3);  }    details[open][red] > summary {    border-bottom-color: rgba(254, 95, 88, 0.3);  }    details[open] > summary {    color: #555;    margin-bottom: 0;  }    details[open] > summary:hover:after {    content: "-";  }    details[open] > div.content {    padding: 16px;    margin: -16px;    margin-top: 0;  }    details[open] >div.content > p:first-child,  details[open] >div.content > .tabs:first-child,  details[open] >div.content > ul:first-child,  details[open] >div.content > ol:first-child,  details[open] >div.content > .highlight:first-child,  details[open] >div.content > .note:first-child,  details[open] >div.content > .fancybox:first-child,  details[open] >div.content > details:first-child {    margin-top: 0;  }    details[open] >div.content > p:last-child,  details[open] >div.content > .tabs:last-child,  details[open] >div.content > ul:last-child,  details[open] >div.content > ol:last-child,  details[open] >div.content > .highlight:last-child,  details[open] >div.content > .note:last-child,  details[open] >div.content > .fancybox:last-child,  details[open] >div.content > details:last-child {    margin-bottom: 0;  }      div.tabs .tab-content .tab-pane > p:first-child,  div.tabs .tab-content .tab-pane > .tabs:first-child,  div.tabs .tab-content .tab-pane > ul:first-child,  div.tabs .tab-content .tab-pane > ol:first-child,  div.tabs .tab-content .tab-pane > .highlight:first-child,  div.tabs .tab-content .tab-pane > .note:first-child,  div.tabs .tab-content .tab-pane > .fancybox:first-child {    margin-top: 0;  }  div.tabs .tab-content .tab-pane > p:last-child,  div.tabs .tab-content .tab-pane > .tabs:last-child,  div.tabs .tab-content .tab-pane > ul:last-child,  div.tabs .tab-content .tab-pane > ol:last-child,  div.tabs .tab-content .tab-pane > .highlight:last-child,  div.tabs .tab-content .tab-pane > .note:last-child,  div.tabs .tab-content .tab-pane > .fancybox:last-child {    margin-bottom: 0;  }    /*fancybox图片相关*/      div.gallery {    margin: 0.5rem 0;    overflow: hidden;  }  div.gallery >.fancybox,  div.gallery >p>.fancybox {    margin: 1px;    padding: 0;    position: relative;  }  div.gallery >.fancybox .image-caption,  div.gallery >p>.fancybox .image-caption {    opacity: 0;    transform: translateY(100%);    transition: all 0.3s ease;    pointer-events: none;    position: absolute;    width: 100%;    bottom: 0;    text-align: center;    background: rgba(0,0,0,0.3);    color: #fff;  }  div.gallery >.fancybox .image-caption:empty,  div.gallery >p>.fancybox .image-caption:empty {    display: none;  }  div.gallery >.fancybox:hover .image-caption,  div.gallery >p>.fancybox:hover .image-caption {    opacity: 1;    transform: translateY(0);  }  div.gallery,  div.gallery >p {    display: -ms-flexbox;    display: flex;    -ms-flex-pack: center;        justify-content: center;    -ms-flex-align: center;        align-items: center;    -ms-flex-wrap: nowrap;        flex-wrap: nowrap;    padding: 0 !important;    -ms-flex-align: stretch;        align-items: stretch;  }  div.gallery[col]>p {    -ms-flex-wrap: wrap;        flex-wrap: wrap;    -ms-flex-pack: start;        justify-content: flex-start;  }  div.gallery[col='2']>p>.fancybox {    width: calc(50% - 2 * 1px);  }  div.gallery[col='3']>p>.fancybox {    width: calc(33.33% - 2 * 1px);  }  div.gallery[col='4']>p>.fancybox {    width: calc(25% - 2 * 1px);  }  div.gallery[col='5']>p>.fancybox {    width: calc(20% - 2 * 1px);  }  div.gallery[col='6']>p>.fancybox {    width: calc(16.66% - 2 * 1px);  }  div.gallery[col='7']>p>.fancybox {    width: calc(14.2857% - 2 * 1px);  }  div.gallery[col='8']>p>.fancybox {    width: calc(12.5% - 2 * 1px);  }  div.gallery >p {    margin: 0;  }  div.gallery.left,  div.gallery.left>p {    -ms-flex-pack: start;        justify-content: flex-start;  }  div.gallery.center,  div.gallery.center>p {    -ms-flex-pack: center;        justify-content: center;  }  div.gallery.right,  div.gallery.right>p {    -ms-flex-pack: end;        justify-content: flex-end;  }  div.gallery.stretch,  div.gallery.stretch>p {    -ms-flex-align: stretch;        align-items: stretch;  }  div.gallery.stretch img,  div.gallery.stretch>p img {    transform: scale(1.5);  }  .fancybox-container .fancybox-stage {    cursor: zoom-out;  }  .fancybox {    display: -ms-flexbox;    display: flex;    -ms-flex-direction: column;        flex-direction: column;    -ms-flex-pack: center;        justify-content: center;    -ms-flex-align: center;        align-items: center;    -ms-flex-wrap: nowrap;        flex-wrap: nowrap;    padding: 0 !important;    overflow: hidden;    border-radius: 2px;  }  @media screen and (max-width: 500px) {    .fancybox {      border-radius: 1px;    }  }  .fancybox a {    line-height: 0;    margin: 0;    -ms-flex-align: stretch;        align-items: stretch;    cursor: zoom-in;  }  .fancybox .gallery {    overflow: hidden;  }  .fancybox .image-caption {    font-size: 0.8125rem;    padding-top: 0.5rem;    padding-bottom: 0.5rem;    color: rgba(85,85,85,0.65);  }      /*播放器相关*/  audio,  video {    border-radius: 4px;    max-width: 100%;  }  video {    z-index: 1;    transition: all 0.28s ease;    -moz-transition: all 0.28s ease;    -webkit-transition: all 0.28s ease;    -o-transition: all 0.28s ease;  }  video:hover {    box-shadow: 0 4px 8px 0px rgba(0,0,0,0.24), 0 8px 16px 0px rgba(0,0,0,0.24);  }  div.video {    line-height: 0;    text-align: center;  }  div.videos {    max-width: calc(100% + 2 * 4px);    display: -ms-flexbox;    display: flex;    -ms-flex-wrap: wrap;        flex-wrap: wrap;    -ms-flex-pack: start;        justify-content: flex-start;    -ms-flex-align: end;        align-items: flex-end;    margin: 0.5rem -4px;  }  div.videos .video,  div.videos iframe {    width: 100%;    margin: 4px;  }  div.videos iframe {    border-radius: 4px;    width: 100%;    min-height: 300px;  }  div.videos.left {    -ms-flex-pack: start;        justify-content: flex-start;  }  div.videos.center {    -ms-flex-pack: center;        justify-content: center;  }  div.videos.right {    -ms-flex-pack: end;        justify-content: flex-end;  }  div.videos.stretch {    -ms-flex-align: stretch;        align-items: stretch;  }  div.videos[col='1'] .video,  div.videos[col='1'] iframe {    width: 100%;  }  div.videos[col='2'] .video,  div.videos[col='2'] iframe {    width: calc(50% - 2 * 4px);  }  div.videos[col='3'] .video,  div.videos[col='3'] iframe {    width: calc(33.33% - 2 * 4px);  }  div.videos[col='4'] .video,  div.videos[col='4'] iframe {    width: calc(25% - 2 * 4px);  }    ]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/readPercent.css"/>
      <url>/css/readPercent.css</url>
      
        <content type="html"><![CDATA[/* 返回顶部 */button#go-up #percent {    display: none;    font-weight: bold;    font-size: 15px !important;}button#go-up span {    font-size: 12px!important;    margin-right: -1px;}/* 鼠标滑动到按钮上时显示返回顶部图标 */button#go-up:hover i {    display: block !important;}button#go-up:hover #percent {    display: none !important;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[:root {  --blue-custom: #5ea6e5;  --loading-color: rgba(207, 246, 247, 0.92);  --border-color: #c9c9c9;  --color-red: rgb(241, 71, 71);  --color-orange: rgb(241, 162, 71);  --color-yellow: rgb(241, 238, 71);  --color-purple: rgb(179, 71, 241);  --color-blue: rgb(102, 204, 255);  --color-gray: rgb(226, 226, 226);  --color-green: rgb(57, 197, 187);  --color-whitegray: rgb(241, 241, 241);  --color-pink: rgb(237, 112, 155);  --color-black: rgb(0, 0, 0);  --color-darkblue: rgb(97, 100, 159);  --color-heoblue: rgb(66, 90, 239);  --btn-bg: var(--theme-color) !important;  --scrollbar-color: var(--theme-color) !important;  --border-style: 1px solid rgba(169, 169, 169, 0.7);  /* 代码框行数背景色 */  --hlnumber-bg: #282c34;  /* 代码框顶部背景色 */  --hltools-bg: #1c1c1c;  /* 代码框背景色 */  --hl-bg: #282c34;}/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }  /* 翻页按钮居中 */#pagination {    width: 100%;    margin: auto;  }  /* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {    background: linear-gradient(      -45deg,      #e8d8b9,      #eccec5,      #a3e9eb,      #bdbdf0,      #eec1ea    );    box-shadow: 0 0 5px rgb(66, 68, 68);    position: relative;    background-size: 400% 400%;    -webkit-animation: Gradient 10s ease infinite;    -moz-animation: Gradient 10s ease infinite;    animation: Gradient 10s ease infinite !important;  }  @-webkit-keyframes Gradient {    0% {      background-position: 0% 50%;    }    50% {      background-position: 100% 50%;    }    100% {      background-position: 0% 50%;    }  }  @-moz-keyframes Gradient {    0% {      background-position: 0% 50%;    }    50% {      background-position: 100% 50%;    }    100% {      background-position: 0% 50%;    }  }  @keyframes Gradient {    0% {      background-position: 0% 50%;    }    50% {      background-position: 100% 50%;    }    100% {      background-position: 0% 50%;    }  }    /* 黑夜模式适配 */  [data-theme="dark"] #aside-content > .card-widget.card-info {    background: #191919ee;  }    /* 个人信息Follow me按钮 */  #aside-content > .card-widget.card-info > #card-info-btn {    background-color: #3eb8be;    border-radius: 8px;  }  /* 鼠标样式 */#cursor {    position: fixed;    width: 16px;    height: 16px;    /* 这里改变跟随的底色 */    background: rgb(57, 197, 187);    border-radius: 8px;    opacity: 0.25;    z-index: 10086;    pointer-events: none;    transition: 0.2s ease-in-out;    transition-property: background, opacity, transform;  }    #cursor.hidden {    opacity: 0;  }    #cursor.hover {    opacity: 0.1;    transform: scale(2.5);    -webkit-transform: scale(2.5);    -moz-transform: scale(2.5);    -ms-transform: scale(2.5);    -o-transform: scale(2.5);  }    #cursor.active {    opacity: 0.5;    transform: scale(0.5);    -webkit-transform: scale(0.5);    -moz-transform: scale(0.5);    -ms-transform: scale(0.5);    -o-transform: scale(0.5);  }  /* 帧率检测 */#fps {    position: fixed;    /* 指定位置 */    left: 15px;    bottom: 15px;    z-index: 1919810;  }  [data-theme="light"] #fps {    background-color: rgba(255, 255, 255, 0.85);    backdrop-filter: var(--backdrop-filter);    padding: 8px;    border-radius: 4px;  }  [data-theme="dark"] #fps {    background-color: rgba(0, 0, 0, 0.72);    backdrop-filter: var(--backdrop-filter);    padding: 8px;    border-radius: 4px;  }    .card-info-avatar .author-status-box {    position: absolute;    bottom: 0;    left: calc(100% - 28px);    width: 28px;    height: 28px;    border: 1px solid #d0d7de;    border-radius: 2em;    background-color: #f8f8f8f8;    transition: 0.4s;    overflow: hidden;  }    [data-theme="dark"] .card-info-avatar .author-status-box {    background-color: #222222f2;    border: 1px solid #5c6060;  }    .card-info-avatar .author-status-box .author-status {    display: flex;    align-items: center;    justify-content: center;    height: 28px;    padding: 0 5px;  }    .card-info-avatar .author-status-box:hover {    width: 105px;  }    .card-info-avatar .author-status-box:hover .author-status span {    width: 105px;    margin-left: 4px;  }    .card-info-avatar .author-status-box .author-status span {    width: 0;    font-size: 12px;    height: 100%;    overflow: hidden;    text-overflow: ellipsis;    white-space: nowrap;    transition: 0.4s;  }    .card-widget .card-info-avatar {    display: inline-block;    position: relative;  }  /* 信息卡片彩带 */.author_top:hover {  background: url(https://tuchuang.voooe.cn/images/2023/01/02/snow.gif);  background-size: cover;}/* 个人信息卡片背景图 */[data-theme="light"] #aside-content > .card-widget.card-info {  background-image: url(/image/springBg.webp);  background-repeat: no-repeat;  background-attachment: inherit;  background-size: 100%;}[data-theme="dark"] #aside-content > .card-widget.card-info {  background-image: url(https://sourcebucket.s3.ladydaily.com/img/aurora.webp);  background-repeat: no-repeat;  background-attachment: inherit;  background-size: 100%;}/* 头像呼吸灯 */[data-theme="light"] .avatar-img {  animation: huxi_light 4s ease-in-out infinite;}[data-theme="dark"] .avatar-img {  animation: huxi_dark 4s ease-in-out infinite;}@keyframes huxi_light {  0% {    box-shadow: 0px 0px 1px 1px #e9f5fa;  }  50% {    box-shadow: 0px 0px 5px 5px #e9f5fa;  }  100% {    box-shadow: 0px 0px 1px 1px #e9f5fa;  }}@keyframes huxi_dark {  0% {    box-shadow: 0px 0px 1px 1px #39c5bb;  }  50% {    box-shadow: 0px 0px 5px 5px #39c5bb;  }  100% {    box-shadow: 0px 0px 1px 1px #39c5bb;  }}/* 波浪css */.main-hero-waves-area {  width: 100%;  position: absolute;  left: 0;  bottom: -11px;  z-index: 5;}.waves-area .waves-svg {  width: 100%;  height: 5rem;}/* Animation */.parallax > use {  animation: move-forever 25s cubic-bezier(0.55, 0.5, 0.45, 0.5) infinite;}.parallax > use:nth-child(1) {  animation-delay: -2s;  animation-duration: 7s;  fill: #f7f9febd;}.parallax > use:nth-child(2) {  animation-delay: -3s;  animation-duration: 10s;  fill: #f7f9fe82;}.parallax > use:nth-child(3) {  animation-delay: -4s;  animation-duration: 13s;  fill: #f7f9fe36;}.parallax > use:nth-child(4) {  animation-delay: -5s;  animation-duration: 20s;  fill: #f7f9fe;}/* 黑色模式背景 */[data-theme="dark"] .parallax > use:nth-child(1) {  animation-delay: -2s;  animation-duration: 7s;  fill: #18171dc8;}[data-theme="dark"] .parallax > use:nth-child(2) {  animation-delay: -3s;  animation-duration: 10s;  fill: #18171d80;}[data-theme="dark"] .parallax > use:nth-child(3) {  animation-delay: -4s;  animation-duration: 13s;  fill: #18171d3e;}[data-theme="dark"] .parallax > use:nth-child(4) {  animation-delay: -5s;  animation-duration: 20s;  fill: #18171d;}@keyframes move-forever {  0% {    transform: translate3d(-90px, 0, 0);  }  100% {    transform: translate3d(85px, 0, 0);  }}/*Shrinking for mobile*/@media (max-width: 768px) {  .waves-area .waves-svg {    height: 40px;    min-height: 40px;  }}/* 滚动条样式 */::-webkit-scrollbar {  width: 8px;  height: 8px;}::-webkit-scrollbar-track {  background-color: rgba(73, 177, 245, 0.2);  border-radius: 2em;}::-webkit-scrollbar-thumb {  background-color: var(--theme-color);  background-image: -webkit-linear-gradient(    45deg,    rgba(255, 255, 255, 0.4) 25%,    transparent 25%,    transparent 50%,    rgba(255, 255, 255, 0.4) 50%,    rgba(255, 255, 255, 0.4) 75%,    transparent 75%,    transparent  );  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: rgb(107, 113, 219);}/* 欢迎信息 */#welcome-info {  background: linear-gradient(45deg, #b9f4f3, #e3fbf9);  border-radius: 18px;  padding: 10px;}[data-theme="dark"] #welcome-info {  background: #212121;}/* [--blue-custom="dark"] #welcome-info {  background: #007acc;}[--pink-custom="dark"] #welcome-info {  background: #ed709b;} */]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/VolantisTags.js"/>
      <url>/js/VolantisTags.js</url>
      
        <content type="html"><![CDATA[/* eslint-disable */(function ($) {    "use strict";    function setTabs() {      const $tabs = $(".tabs");      if ($tabs.length === 0) return;      let $navs = $tabs.find(".nav-tabs .tab");      for (var i = 0; i < $navs.length; i++) {        let $a = $tabs.find($navs[i].children[0]);        $a.addClass($a.attr("href"));        $a.removeAttr("href");      }      $(".tabs .nav-tabs").on("click", "a", (e) => {        e.preventDefault();        e.stopPropagation();        let $tab = $(e.target.parentElement.parentElement.parentElement);        $tab.find(".nav-tabs .active").removeClass("active");        $tab.find(e.target.parentElement).addClass("active");        $tab.find(".tab-content .active").removeClass("active");        $tab.find($(e.target).attr("class")).addClass("active");        return false;      });    }      $(function () {      setTabs();      // $(".article .video-container").fitVids();      $(".scroll-down").on("click", function () {        scrolltoElement(".l_body");      });      setTimeout(function () {        $("#loading-bar-wrapper").fadeOut(500);      }, 300);    });  })(jQuery);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/readPercent.js"/>
      <url>/js/readPercent.js</url>
      
        <content type="html"><![CDATA[window.onscroll = percent;// 执行函数// 页面百分比function percent() {    let a = document.documentElement.scrollTop || window.pageYOffset, // 卷去高度        b = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight) - document.documentElement.clientHeight, // 整个网页高度        result = Math.round(a / b * 100), // 计算百分比        up = document.querySelector("#go-up") // 获取按钮    if (result <= 95) {        up.childNodes[0].style.display = 'none'        up.childNodes[1].style.display = 'block'        up.childNodes[1].innerHTML = result;    } else {        up.childNodes[1].style.display = 'none'        up.childNodes[0].style.display = 'block'    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>movie</title>
      <link href="/movie/index.html"/>
      <url>/movie/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/11.html"/>
      <url>/tags/11.html</url>
      
        <content type="html"><![CDATA[<p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一门很厉害的语言。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 让你掉头发的一门语言。<br><!-- <details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details></p><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details> --><h1 id="c-初识"><a href="#c-初识" class="headerlink" title="c++初识"></a>c++初识</h1><details class="folding-tag" yellow><summary> c plus plus初识 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 常量 </summary>              <div class='content'>              <p>C++定义常量两种放式：</p><p>1：#define 宏常量： define 常量名 常量值</p><p>  通常在文件上方定义 表示一个常量</p><p>2： const 修饰的变量 const   数据类型 常量名 =常量值</p><p>  通常在变量定义前加关键字const，修饰该变量为常量，不可修改</p><p><br/></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># denfine day 7</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;&quot;一周共有&quot;&lt;&lt;day&lt;&lt;&quot;天&quot;&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//const 修饰的变量</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int month=12;    //正常的变量</span><br><span class="line">  const int month=12;  //加了const变为不可修改的常量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 标识符 </summary>              <div class='content'>              <ul><li>标识符不能是关键字</li><li><p>标识符只能由字母，数字，下划线组成</p></li><li><p>第一个字符必须为字母或下划线</p></li><li>标识符中字母是区分大小写的</li></ul>              </div>            </details>              </div>            </details><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><details class="folding-tag" yellow><summary> 数据类型 </summary>              <div class='content'>              <details class="folding-tag" green><summary> 整形 </summary>              <div class='content'>              <p><br/></p><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th>占用空间</th></tr></thead><tbody><tr><td style="text-align:center">short（短整型）</td><td>2字节</td></tr><tr><td style="text-align:center">int（整形）</td><td>4字节</td></tr><tr><td style="text-align:center">long（长整型）</td><td>Windows4字节</td></tr><tr><td style="text-align:center">long long（长长整形）</td><td>8字节</td></tr></tbody></table></div>              </div>            </details><details class="folding-tag" red><summary> 浮点型 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">专用空间</th><th style="text-align:center">位数</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4字节</td><td style="text-align:center">6~7位有效数字</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8字节</td><td style="text-align:center">15~16位有效数字</td></tr><tr><td style="text-align:center">long double</td><td style="text-align:center">8字节</td><td style="text-align:center">15~16位有效数字</td></tr></tbody></table></div><hr><p><br/></p><p>保留小数点后几位格式：</p><pre><code>1：头文件：#include&lt;iomanip&gt;2：输出格式：cout&lt;&lt;fixed&lt;&lt;setprecision( 1 )&lt;&lt;a&lt;&lt;endl;              //setprecision( 填写保留的位数 )</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;iomanip&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  const float a=2.5;</span><br><span class="line">    const float b=1.5;</span><br><span class="line">    int c,d;</span><br><span class="line">    float e;</span><br><span class="line">    cin&gt;&gt;c&gt;&gt;d;</span><br><span class="line">    e=((c-1)*a)+(d*b);</span><br><span class="line">    cout&lt;&lt;fixed&lt;&lt;setprecision(1)&lt;&lt;e&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> sizeof </summary>              <div class='content'>              <p>利用sizeof关键字可以统计数据类型所占用的大小空间</p><p>语法：sizeof（数据类型/变量）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  short num1=100;</span><br><span class="line">  cout&lt;&lt;&quot;short所占用的字节数为&quot;&lt;&lt;sizeof(num1)&lt;&lt;endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 实型 </summary>              <div class='content'>              <p>单精度：float</p><p>双精度：double</p><p>c++在默认情况下，输出一个小数，会显示6位有效数字</p><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">占用空间</th><th style="text-align:center">有效数字范围</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4字节</td><td style="text-align:center">7位有效数字</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8字节</td><td style="text-align:center">15-16位有效数字</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //1；单精度</span><br><span class="line">  float f1 =3.14f;  //加f是转换为单精度类型</span><br><span class="line">  //2：双精度</span><br><span class="line">  double f2=3.14;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>科学计数法</p><p>float f2 =3e2;      //3*10^2</p><p>float f3=3e-2    //3*0.1^2</p>              </div>            </details><details class="folding-tag" red><summary> 字符型 </summary>              <div class='content'>              <p>作用：字符型变量用于显示单个字符</p><p>语法：char ch=’a’;</p><ul><li><p>在显示字符型变量时，用单引号将字符括起来，不能用双引号</p></li><li><p>单引号内只能有一个字符，不可以是字符串</p></li></ul><p>==c和c++中只占用1个字节==</p>              </div>            </details><details class="folding-tag" blue><summary> 转义字符 </summary>              <div class='content'>              <p>作用：用于表示一些不能显示出来的ASCII字符</p><p>现阶段常用的转义字符有：\n    \ \    \t</p><p>\n 换行，将当前位置移到下一行开头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;&quot;hello world \n&quot;</span><br></pre></td></tr></table></figure><p>\ \ 代表一个反斜杠字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;&quot;hello world \\&quot;</span><br></pre></td></tr></table></figure><p>\t 水平制表，（跳到下一个tab位置）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;&quot;hello world \t&quot;&lt;&lt;&quot;aaa&quot;&lt;&lt;endl;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 字符串类型 </summary>              <div class='content'>              <p>C风格字符串： char 变量名【】=“字符串值”</p><p>==字符串为双引号，字符为单引号==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  char str1[]=&quot;hello world&quot;</span><br><span class="line">  cout&lt;&lt;str1&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++风格字符串： string 变量名 =“字符串值”</p><p>==必须加头文件  #include<string>==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  string str2=&quot;hello world&quot;</span><br><span class="line">  cout&lt;&lt;str2&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 布尔数据类型 </summary>              <div class='content'>              <p>bool类型只有两个值：(bool 只占用1个字节)</p><ul><li>true ~~~~真（本质是1）</li><li>flase ~~~~假（本质是0）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  bool flag=true;</span><br><span class="line">  cout&lt;&lt;flag&lt;&lt;endl;</span><br><span class="line">  flag =false;</span><br><span class="line">  cour&lt;&lt;flag&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><details class="folding-tag" yellow><summary> 运算符 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 算数运算符 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">术语</th><th style="text-align:center">示例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td><td style="text-align:center">10+5</td><td style="text-align:center">15</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td><td style="text-align:center">10-5</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td><td style="text-align:center">10*5</td><td style="text-align:center">50</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除</td><td style="text-align:center">10/5</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取模</td><td style="text-align:center">10%3</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">++</td><td style="text-align:center">前置递增</td><td style="text-align:center">a=2;b=++a</td><td style="text-align:center">a=3;b=3</td></tr><tr><td style="text-align:center">++</td><td style="text-align:center">后置递增</td><td style="text-align:center">a=2;b=a++</td><td style="text-align:center">a=3;b=2</td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">前置递减</td><td style="text-align:center">a=2;b=—a</td><td style="text-align:center">a=1;b=1</td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">后置递减</td><td style="text-align:center">a=2;b=a—</td><td style="text-align:center">a=1;b=2</td></tr></tbody></table></div><p>前置递增</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  ++a;</span><br><span class="line">  cout&lt;&lt;&quot;a=&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后置递增</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int b=10;</span><br><span class="line">  b++;</span><br><span class="line">  cout&lt;&lt;&quot;b=&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==区别 ==</p><pre><code>$==前置递增先让变量+1然后再进行表达式的运算==$==后置递增 先进行表达式的运算，再让变量+1==</code></pre>              </div>            </details><details class="folding-tag" green><summary> 赋值运算符 </summary>              <div class='content'>              <p><br/></p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">术语</th><th style="text-align:center">示例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">赋值</td><td style="text-align:center">a=2;b=3</td><td style="text-align:center">a=2;b=3</td></tr><tr><td style="text-align:center">+=</td><td style="text-align:center">加等于</td><td style="text-align:center">a=0;a+=2</td><td style="text-align:center">a=2</td></tr><tr><td style="text-align:center">-=</td><td style="text-align:center">减等于</td><td style="text-align:center">a=5;a-=3</td><td style="text-align:center">a=2</td></tr><tr><td style="text-align:center">*=</td><td style="text-align:center">乘等于</td><td style="text-align:center">a=2;a*=2</td><td style="text-align:center">a=4</td></tr><tr><td style="text-align:center">/=</td><td style="text-align:center">除等于</td><td style="text-align:center">a=4;a/=2</td><td style="text-align:center">a=2</td></tr><tr><td style="text-align:center">%=</td><td style="text-align:center">模等于</td><td style="text-align:center">a=3;a%=2;</td><td style="text-align:center">a=1</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  a+=2;  //a=a+2  =&gt; a=10+2;</span><br><span class="line">  cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  a%=2;   //a=a%2  =&gt;a=10%2;</span><br><span class="line">  cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 比较运算符 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">术语</th><th style="text-align:center">示例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">==</td><td style="text-align:center">相等于</td><td style="text-align:center">4==3</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">！=</td><td style="text-align:center">不等于</td><td style="text-align:center">4！=3</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td><td style="text-align:center">4&lt;3</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td><td style="text-align:center">4&gt;3</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">小等于</td><td style="text-align:center">4&lt;=3</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">大等于</td><td style="text-align:center">4&gt;=3</td><td style="text-align:center">1</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=10;</span><br><span class="line">  cout&lt;&lt;(a&lt;b)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;(a!=10)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;(a&lt;=10)&lt;&lt;endl</span><br><span class="line">  cout&lt;&lt;(a==10)&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" bule><summary> 逻辑运算符 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">术语</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">！</td><td style="text-align:center">非</td><td style="text-align:center">！a</td></tr><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">与</td><td style="text-align:center">a&amp;&amp;b</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center"></td><td style="text-align:center"></td><td>或</td><td>a\</td><td></td><td>b</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=20;</span><br><span class="line">  //在C++中 除了0 都为真</span><br><span class="line">  cout&lt;&lt;!a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;!!a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;(a&amp;&amp;b)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;(a||b)&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="程序流程结构"><a href="#程序流程结构" class="headerlink" title="程序流程结构"></a>程序流程结构</h1><details class="folding-tag" yellow><summary> 程序流程结构 </summary>              <div class='content'>              <details class="folding-tag" red><summary> 选择结构 </summary>              <div class='content'>              <h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><h3 id="单行if语句"><a href="#单行if语句" class="headerlink" title="单行if语句"></a>单行if语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int score;</span><br><span class="line">  cin&gt;&gt;score;</span><br><span class="line">  if(score&gt;60)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;及格&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多行if语句"><a href="#多行if语句" class="headerlink" title="多行if语句"></a>多行if语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int score;</span><br><span class="line">  cin&gt;&gt;score;</span><br><span class="line">  if(score&gt;60)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;及格&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;不及格&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多条件if语句"><a href="#多条件if语句" class="headerlink" title="多条件if语句"></a>多条件if语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int score;</span><br><span class="line">  cin&gt;&gt;score;</span><br><span class="line">  if(score&gt;80)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;优秀&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  else if(score&gt;60)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;一般&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  else (score&lt;60)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;继续加油&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><p>==语法：表达式1 ？表达式2 ：表达式3==</p><p>如果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表达式1的值为真，执行表达式2的结果</span><br><span class="line"></span><br><span class="line">表达式2的值为假，执行表达式3的结果</span><br></pre></td></tr></table></figure><h2 id="Switch语句"><a href="#Switch语句" class="headerlink" title="Switch语句"></a>Switch语句</h2><p>==作用：执行多条件分支语句==</p><p>缺点：判断的时候只能是整形或者是字符型，不可以是一个区间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">switch(表达式)</span><br><span class="line">&#123;</span><br><span class="line">  case 结果1：执行语句；break;</span><br><span class="line">  case 结果2：执行语句；break;</span><br><span class="line">  case 结果3：执行语句；break;</span><br><span class="line">  case 结果4：执行语句；break;</span><br><span class="line">  …………</span><br><span class="line">  default: 执行语句；break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int score;</span><br><span class="line">  cin&gt;&gt;score;</span><br><span class="line">  switch(score)</span><br><span class="line">  &#123;</span><br><span class="line">    case 8: cout&lt;&lt;&quot;您认为是经典电影&quot;&lt;&lt;endl;</span><br><span class="line">    break;</span><br><span class="line">    case 5: cout&lt;&lt;&quot;您认为是一般电影&quot;&lt;&lt;endl;</span><br><span class="line">    break;</span><br><span class="line">    case 3: cout&lt;&lt;&quot;您认为是尿片电影&quot;&lt;&lt;endl;</span><br><span class="line">    break;</span><br><span class="line">    case 2: cout&lt;&lt;&quot;您认为是辣鸡电影&quot;&lt;&lt;endl;</span><br><span class="line">    break;</span><br><span class="line">    default： cout&lt;&lt;&quot;您认为是烂片&quot;&lt;&lt;endl;</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 循环结构 </summary>              <div class='content'>              <h2 id="while循环语句（先买票再上船）"><a href="#while循环语句（先买票再上船）" class="headerlink" title="while循环语句（先买票再上船）"></a>while循环语句（先买票再上船）</h2><p>==语法： while（循环条件）{ 循环语句 }==</p><p>==解释： 只要循环条件为真，就执行循环语句==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int num=0;</span><br><span class="line">  while(num&lt;10)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dowhile循环语句-先上船再买票"><a href="#dowhile循环语句-先上船再买票" class="headerlink" title="dowhile循环语句(先上船再买票)"></a>dowhile循环语句(先上船再买票)</h2><p>==语法： do{ 循环语句 }  while { 循环语句 }==</p><p>==区别： 与while语句的区别在于do……while会先执行一次循环语句，再判断循环条件==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int num=0;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    num++</span><br><span class="line">  &#125;while(num&lt;10);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h2><p>==for（起始表达式；条件表达式；末尾循环体）{ 循环语句； }==</p><h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2>              </div>            </details><details class="folding-tag" green><summary> 跳转语句 </summary>              <div class='content'>              <h2 id="while循环语句（先买票再上船）"><a href="#while循环语句（先买票再上船）" class="headerlink" title="while循环语句（先买票再上船）"></a>while循环语句（先买票再上船）</h2><p>==语法： while（循环条件）{ 循环语句 }==</p><p>==解释： 只要循环条件为真，就执行循环语句==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int num=0;</span><br><span class="line">  while(num&lt;10)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dowhile循环语句-先上船再买票"><a href="#dowhile循环语句-先上船再买票" class="headerlink" title="dowhile循环语句(先上船再买票)"></a>dowhile循环语句(先上船再买票)</h2><p>==语法： do{ 循环语句 }  while { 循环语句 }==</p><p>==区别： 与while语句的区别在于do……while会先执行一次循环语句，再判断循环条件==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int num=0;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    num++</span><br><span class="line">  &#125;while(num&lt;10);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h2><p>==for（起始表达式；条件表达式；末尾循环体）{ 循环语句； }==</p><h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2>              </div>            </details>              </div>            </details><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><details class="folding-tag" yellow><summary> 数组 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 一维数组 </summary>              <div class='content'>              <h2 id="一维数组的定义方式"><a href="#一维数组的定义方式" class="headerlink" title="一维数组的定义方式"></a>一维数组的定义方式</h2><ol><li>数据类型 数组名【数组长度】</li><li>数据类型 数组名【数组长度】={ 值1，值2，值3，…… }</li><li>数据类型 数组名【】={ 值1，值2，值3，…… }</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int score[5];</span><br><span class="line">  score[0]=1;</span><br><span class="line">  score[1]=2;</span><br><span class="line">  score[2]=3;</span><br><span class="line">  score[3]=4;</span><br><span class="line">  score[4]=5;</span><br><span class="line">  int list[10]=&#123;1,2,3,4,5,6,7,8,9,10&#125;</span><br><span class="line">  int num[]=&#123;A,B,C,D,E,F,G&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一维数组名的用途"><a href="#一维数组名的用途" class="headerlink" title="一维数组名的用途"></a>一维数组名的用途</h3><p>==1：可以统计整个数组在内存中的长度==</p><p>==2：可以获取数组在内存中的首地址==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //1：可以统计整个数组在内存中的长度</span><br><span class="line">  int score[10]=&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">  cout&lt;&lt;&quot;整个数组所占内存空间为&quot;&lt;&lt;sizeof(score)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;每个元素所占空间为&quot;&lt;&lt;sizeof(score[0])&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;数组的元素个数为&quot;&lt;&lt;sizeof(score)/sizeof(score[0])&lt;&lt;endl;</span><br><span class="line">  //2：可以获取数组在内存中的首地址</span><br><span class="line">  cout&lt;&lt;&quot;数组的首地址为: &quot;&lt;&lt;(int)score&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;数组第一个元素地址为&quot;&lt;&lt;(int)&amp;score[0]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 二维数组 </summary>              <div class='content'>              <h2 id="二维数组的定义方式"><a href="#二维数组的定义方式" class="headerlink" title="二维数组的定义方式"></a>二维数组的定义方式</h2><ol><li>数据类型 数组名[ 行数 ] [ 列数 ]；</li><li>数据类型 数组名[ 行数 ] [ 列数 ]={ { 数据1，数据2 }，{ 数据2，数据4 } }；</li><li>数据类型 数组名[ 行数 ] [ 列数 ]={ 数据1，数据2，数据3，数据4…… }；</li><li><p>数据类型 数组名[   ] [ 列数 ]={ 数据1，数据2，数据3，数据4…… }；</p><p>==不可以写成 数据类型 数组名 [ 行数 ] [  ] 等于 { 数据1，数据2，数据3，数据4…… }；==</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int arr[][3]=&#123;1,2,3,4,5,6,7,8&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组数组名"><a href="#二维数组数组名" class="headerlink" title="二维数组数组名"></a>二维数组数组名</h3><p>1：查看二维数组所占内存空间</p><p>2：获取二维数组首地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int score[2][3]=&#123;1,2,3,4,5,6&#125;;</span><br><span class="line">  cout&lt;&lt;&quot;查看二维数组所占内存空间：&quot;&lt;&lt;sizeof(score)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;获取二维数组一行大小：&quot;&lt;&lt;sizeof(score[0])&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;获取二维数组元素大小：&quot;&lt;&lt;sizeof(score[0][0])&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;获取二维数组首地址 &quot;&lt;&lt;(int)&amp;score&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;获取二维数组第一个元素地址&quot;&lt;&lt;(int)&amp;score[0][0]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 冒泡排序 </summary>              <div class='content'>              <p>1：比较相邻的元素。如果第一个比第二个大，就交换两个数</p><p>2：对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值 </p><p>3：重复以上步骤，每次比较次数-1，直到不需要比较</p><p><br/></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int arr[9]=&#123;4,2,8,0,5,7,1,3,9&#125;;</span><br><span class="line">  for(int i=0;i&lt;9-1;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    for(int j=0;j&lt;9-1;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      if(arr[j]&gt;arr[j+1])</span><br><span class="line">      &#123;</span><br><span class="line">        int temp=arr[j];</span><br><span class="line">        arr[j]=arr[j+1];</span><br><span class="line">        arr[j+1]=temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><details class="folding-tag" yellow><summary> 程序流程结构 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 函数的定义 </summary>              <div class='content'>              <h2 id="函数的定义一般主要有5个步骤："><a href="#函数的定义一般主要有5个步骤：" class="headerlink" title="函数的定义一般主要有5个步骤："></a>函数的定义一般主要有5个步骤：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">==1：返回值类型：一个函数可以返回一个值。在函数定义中==</span><br><span class="line"></span><br><span class="line">==2：函数名：给函数起个名称==</span><br><span class="line"></span><br><span class="line">==3：参数列表：使用函数时，传入的数据==</span><br><span class="line"></span><br><span class="line">==4：函数体语句：花括号内的代码，函数内需要执行的语句==</span><br><span class="line"></span><br><span class="line">==5：return表达式：和返回值类型挂钩，函数执行完后，返回相应的数据==</span><br></pre></td></tr></table></figure><p><br/></p><hr><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名（参数列表）</span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  函数体语句</span><br><span class="line">  </span><br><span class="line">  return 表达式</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br/></p><p>例子：</p><blockquote><p>实现一个加法函数，功能为：传入两个整形数据，计算数据相加的结果，并且返回</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int add(int num1,int num2)</span><br><span class="line">&#123;</span><br><span class="line">  int sum=num1+num2;</span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 函数的调用 </summary>              <div class='content'>              <p>==功能：使用定义好的函数==</p><p>==语法：函数名（参数）==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int add(int num1,int num2)</span><br><span class="line">&#123;</span><br><span class="line">  int sun=num1+num2;</span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=10;</span><br><span class="line">  //调用add函数</span><br><span class="line">  int sum=add(a,b)</span><br><span class="line">  cout&lt;&lt;&quot;sum= &quot;&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 值传递 </summary>              <div class='content'>              <p>==所谓值传递，就是 函数调用时实参将数值传入给形参==</p><p>==值传递，如果形参发生，并不会影响实参==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void swap(int num1,int num2)</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;&quot;交换前:&quot;&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;num1=&quot;&lt;&lt;num1&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;num2=&quot;&lt;&lt;num2&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">  int temp=num1;</span><br><span class="line">  num1=num2;</span><br><span class="line">  num2=temp;</span><br><span class="line">  </span><br><span class="line">  cout&lt;&lt;&quot;交换后:&quot;&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;num1=&quot;&lt;&lt;num1&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;num2=&quot;&lt;&lt;num2&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">  //return ；当函数声明的时候，不需要返回值，可以不写return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=20;</span><br><span class="line">  swap(a,b);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" ><summary> 函数的常见样式 </summary>              <div class='content'>              <p>==常见的函数样式有4种==</p><pre><code>==1：无参无返====2：有参无返====3：无参有饭====4：有参有返==</code></pre><hr><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">//1：无参无饭</span><br><span class="line">void test1()</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;&quot;代码太难了&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//2：有参无返</span><br><span class="line">void test2(int a)</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;&quot;this is test2 a= &quot;&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//3：无参有返</span><br><span class="line">int test3()</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;&quot;this is test3 &quot;&lt;&lt;endl;</span><br><span class="line">  teturn 100;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//4：有参有返</span><br><span class="line">int test4(int b,int c)</span><br><span class="line">&#123;</span><br><span class="line">  sum=s1+s2;</span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //无参无饭函数调用</span><br><span class="line">  test1();</span><br><span class="line">  </span><br><span class="line">  //有参无返函数调用</span><br><span class="line">  test2(100);</span><br><span class="line">  </span><br><span class="line">  //无参有返函数调用</span><br><span class="line">  int c=test3();</span><br><span class="line">  cout&lt;&lt;&quot;c= &quot;&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">  //有参有返函数调用</span><br><span class="line">  int s1=100;</span><br><span class="line">  int s2=200;</span><br><span class="line">  int sum=test4(s1,s2);</span><br><span class="line">  cout&lt;&lt;&quot;sum=&quot;&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 函数的声明 </summary>              <div class='content'>              <p>==作用：告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义==</p><p>==函数声明可以多次，但是函数的定义只能有一次==</p><hr><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//函数声明</span><br><span class="line">//比较函数，实现两个整形数字进行比较，返回较大的值</span><br><span class="line">int max(int a,int b)   //提前声明</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=20;</span><br><span class="line">  int c=max(a,b);</span><br><span class="line">  cout&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int max(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">  return a&gt;b?a:b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 函数的分文件编写 </summary>              <div class='content'>              <p>==作用：让代码结构更加清晰==</p><p><br/></p><p>==函数分文件编写一般有4个步骤==</p><pre><code>1：创建后缀名为.h的头文件2：创建后缀名为.cpp的源文件3：在头文件中写函数声明4：在源文件中写函数的定义</code></pre>              </div>            </details>              </div>            </details><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><details class="folding-tag" yellow><summary> 指针 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 指针变量的定义和使用 </summary>              <div class='content'>              <h2 id="指针的基本概念"><a href="#指针的基本概念" class="headerlink" title="指针的基本概念"></a>指针的基本概念</h2><p>==指针的作用：可以通过指针间接访问内存==</p><ul><li>内存编号是从0开始记录的，一般用十六进制的数字表示</li><li>可以利用指针变量保存地址</li></ul><h2 id="指针变量的定义和使用"><a href="#指针变量的定义和使用" class="headerlink" title="指针变量的定义和使用"></a>指针变量的定义和使用</h2><p>==指针定义的语法：数据类型 * 指针变量名；==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //1：定义指针</span><br><span class="line">  int a=10;</span><br><span class="line">  int *p；   //定义指针</span><br><span class="line">  p=&amp;a;      //让指针记录a的地址</span><br><span class="line">  cout&lt;&lt;&quot;a的地址为：&quot;&lt;&lt;&amp;a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;指针p为：&quot;&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">  //2：使用指针</span><br><span class="line">  //可以通过解引用（指针前面加一个*   被称为解引用的操作）的方式来找到指针指向的内存</span><br><span class="line">  *p=1000;</span><br><span class="line">  cout&lt;&lt;&quot;a= &quot;&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;*p= &quot;&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 指针所占的内存空间 </summary>              <div class='content'>              <p>指针也是种数据类型:：占用4个字节（32位）8个字节（64位）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a;</span><br><span class="line">  int *p=&amp;a;</span><br><span class="line">  //不管什么数据类型都占4个字节</span><br><span class="line">  cout&lt;&lt;&quot;sizeof(int*)= &quot;&lt;&lt;sizeof(p)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;sizeof(int*)= &quot;&lt;&lt;sizeof(int *)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;sizeof(double*)= &quot;&lt;&lt;sizeof(double *)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;sizeof(float*)= &quot;&lt;&lt;sizeof(float *)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;sizeof(char*)= &quot;&lt;&lt;sizeof(char *)&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 空指针和野指针 </summary>              <div class='content'>              <h2 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h2><p>==空指针：指针变量指向内存中编号为0的空间==</p><p>==用途：初始化指针变量==</p><p>==注意：空指针指向的内存是不可以访问的==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //指针变量p指向内存编号为0的内存</span><br><span class="line">  int *p=NULL;</span><br><span class="line">  //空指针指向的内存是不可以访问的</span><br><span class="line">  *p =100;    //显示不能访问</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h2><p>==野指针：指针变量指向非法的内存空间==</p><p>在操作中尽量避免野指针</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int *p=(int *)0x1100;   //野指针</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" bule><summary> const修饰指针 </summary>              <div class='content'>              <p>==const修饰指针的三种情况==</p><ul><li><p>const修饰指针   ——— 常量指针</p><p>特点：指针的指向可以修改，但是指针指向的值不可以修改</p></li><li><p>const修饰常量   ———指针常量</p><p>特点：  指针的指向不可以修改，但是指针指向的值可以修改</p></li><li>const即修饰指针，有修饰常量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"> int a=10;</span><br><span class="line"> int b=10;</span><br><span class="line"> int *p=&amp;a;</span><br><span class="line"> const int *p=&amp;a;             //常量指针</span><br><span class="line"> int * const p=&amp;a;           //指针常量</span><br><span class="line"> const int *const p=&amp;a;     //const即修饰指针，有修饰常量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 指针和数组 </summary>              <div class='content'>              <p>==作用：利用指针访问数组中的元素==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int arr[10]=&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">  int *p=arr;   //arr就是数组首地址</span><br><span class="line">  //p++;</span><br><span class="line">  //cout&lt;&lt;&quot;利用指针访问第二个元素：&quot;&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">  for(int i=0;i&lt;10;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">    p++;</span><br><span class="line">  &#125;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 指针和函数 </summary>              <div class='content'>              <p>==作用：利用指正作为函数参数，可以修改实参的值==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">void swap1(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">  int temp=a;</span><br><span class="line">  a=b;</span><br><span class="line">  b=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void swap2(int *p1,int *p2)</span><br><span class="line">&#123;</span><br><span class="line">  int temp=*p1;</span><br><span class="line">  *p1=*p2;</span><br><span class="line">  *p2=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //指针和函数</span><br><span class="line">  //1:值传递</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=20;</span><br><span class="line">  swap1(a,b);</span><br><span class="line">  //2:地址传递    ///地址传输可以修改实参</span><br><span class="line">  swap2(&amp;a,&amp;b);</span><br><span class="line">  cout&lt;&lt;&quot;a= &quot;&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;b= &quot;&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 指针、数组、函数 </summary>              <div class='content'>              <p>案例：封装一个函数，利用冒泡排序，实现对整形数组的升序排序</p><p>数组：int arr[10]={4,3,6,9,1,2,10,8,7,5};</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void bubbleSort(int *arr,int length)</span><br><span class="line">&#123;</span><br><span class="line">  for(int i=0;i&lt;length-1;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    for(int j=0;j&lt;length-i-1;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      if(arr[j]&gt;arr[j+1])</span><br><span class="line">      &#123;</span><br><span class="line">        int temp=arr[j];</span><br><span class="line">        arr[j]=arr[j+1];</span><br><span class="line">        arr[j+1]=temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void printArray(int *arr,int length)</span><br><span class="line">&#123;</span><br><span class="line">  for(int i=0;i&lt;length;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;arr[i]&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int arr[10]=&#123;4,3,6,9,1,2,10,8,7,5&#125;;</span><br><span class="line">  int length=sizeof(arr)/sizeof(arr[0]);</span><br><span class="line">  bubbleSort(arr,length);</span><br><span class="line">  printArray(arr,length);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><details class="folding-tag" yellow><summary> 结构体 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 结构体定义和使用 </summary>              <div class='content'>              <h2 id="结构体的基本概念"><a href="#结构体的基本概念" class="headerlink" title="结构体的基本概念"></a>结构体的基本概念</h2><p>结构体属于用户自定义的数据类型，允许用户储存不同的数据类型</p><p><br/></p><h2 id="结构体定义和使用"><a href="#结构体定义和使用" class="headerlink" title="结构体定义和使用"></a>结构体定义和使用</h2><p>==语法：struct 结构体名{ 结构体成员列表 } ；==</p><p>通过结构体创建变量的方式有三种：</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 ={ 成员1值，成员2值…… }</li><li>定义结构体时顺便创建变量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct studnet&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  bool sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct studnet&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  bool sex;</span><br><span class="line">&#125;s3;</span><br><span class="line">//同过学生类型来创建具体学生</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //1. struct student s1</span><br><span class="line">  struct student s1;    //给s1属性赋值通过.访问结构体变量中的属性(创建变量时struct可以省略)</span><br><span class="line">  s1.name=&quot;张三&quot;；</span><br><span class="line">  s1.age=18;</span><br><span class="line">  s1.sex=1;</span><br><span class="line">  </span><br><span class="line">  cout&lt;&lt;&quot;姓名: &quot;&lt;&lt;s1.name&lt;&lt;&quot;年龄：&quot;&lt;&lt;s1.age&lt;&lt;&quot;性别 &quot;&lt;&lt;s1.sex&lt;&lt;endl;</span><br><span class="line">  //2. struct student s2=&#123; .... &#125;;</span><br><span class="line">  </span><br><span class="line">  struct student s2=&#123;&quot;李四&quot;,19,0&#125;;</span><br><span class="line">  cout&lt;&lt;&quot;姓名: &quot;&lt;&lt;s2.name&lt;&lt;&quot;年龄：&quot;&lt;&lt;s2.age&lt;&lt;&quot;性别 &quot;&lt;&lt;s2.sex&lt;&lt;endl;</span><br><span class="line">  //在定义结构体时顺便创建变量</span><br><span class="line">  s3.name=&quot;王五&quot;;</span><br><span class="line">  s3.age=200;</span><br><span class="line">  s3.sex=1</span><br><span class="line">  cout&lt;&lt;&quot;姓名: &quot;&lt;&lt;s3.name&lt;&lt;&quot;年龄：&quot;&lt;&lt;s3.age&lt;&lt;&quot;性别 &quot;&lt;&lt;s3.sex&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" ><summary> 结构体数组 </summary>              <div class='content'>              <p>==作用：将自定义的结构体放入到数组中方便维护==</p><p><strong>语法：struct 结构体名 数组名[ 元素个数 ]={ { }，{ }，{ }，…… }</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  int sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //创建结构体数组</span><br><span class="line">  struct student arr[3]</span><br><span class="line">  &#123;</span><br><span class="line">    &#123;&quot;张三&quot;,18,0&#125;,</span><br><span class="line">    &#123;&quot;李四&quot;,20,1&#125;,</span><br><span class="line">    &#123;&quot;王五&quot;,19,0&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  //给结构体数组中的元素赋值</span><br><span class="line">  arr[2].name=&quot;赵六&quot;;</span><br><span class="line">  arr[2].age=28;</span><br><span class="line">  //遍历结构体数组</span><br><span class="line">  for(int i=0;i&lt;3;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;arr[i].name&lt;&lt;arr[i].age&lt;&lt;arr[i].sex&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 结构体指针 </summary>              <div class='content'>              <p>==作用：通过指针访问结构体中的成员==</p><p>利用操作符-&gt;可以通过结构体指针访问结构体属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//定义学生的结构体</span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  int sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //创建学生结构体变量</span><br><span class="line">  struct student s1=&#123;&quot;张三&quot;,18,0&#125;;</span><br><span class="line">  //通过指针指向结构体变量</span><br><span class="line">  struct student *p=&amp;s1;</span><br><span class="line">  //通过指针访问结构体变量的数据</span><br><span class="line">  cout&lt;&lt;&quot;姓名：&quot;&lt;&lt;p-&gt;name&lt;&lt;&quot;年龄：&quot;&lt;&lt;p-&gt;age&lt;&lt;&quot;性别：&quot;&lt;&lt;p-&gt;sex&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 结构体嵌套结构体 </summary>              <div class='content'>              <p>==作用：结构体中的成员可以是另一个结构体==</p><p>==例如：每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  int sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct teacher</span><br><span class="line">&#123;</span><br><span class="line">  int id;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  struct student stu;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  teacher t;</span><br><span class="line">  t.id=100;</span><br><span class="line">  t.name=&quot;老王&quot;；</span><br><span class="line">  t.age=30;</span><br><span class="line">  t.stu.name=&quot;小王&quot;；</span><br><span class="line">  t.stu.age=20;</span><br><span class="line">  t.stu.sex=0;</span><br><span class="line">  //打印</span><br><span class="line">  cout&lt;&lt;&quot;老师姓名：&quot;&lt;&lt;t.name&lt;&lt;&quot;老师编号：&quot;&lt;&lt;t.id&lt;&lt;&quot;老师年龄：&quot;&lt;&lt;t.age&lt;&lt;&quot;学生姓名&quot;&lt;&lt;t.stu.name&lt;&lt;&quot;学生年龄&quot;&lt;&lt;t.stu.age&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 结构体做函数参数 </summary>              <div class='content'>              <p>==作用：将结构体作为参数向函数中传递==</p><p>==传递方式有两种：==</p><ul><li>==值传递==</li><li>==地址传递==</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//定义学生结构体</span><br><span class="line">struct student&#123;</span><br><span class="line">    string name;</span><br><span class="line">    int age;</span><br><span class="line">    int sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//打印学生信息</span><br><span class="line">//1:值传递</span><br><span class="line">void printstudent1(struct student s)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;子函数中 姓名：&quot;&lt;&lt;s.name&lt;&lt;&quot;年龄：&quot;&lt;&lt;s.age&lt;&lt;&quot;性别：&quot;&lt;&lt;s.sex&lt;&lt;endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//2：地址传递</span><br><span class="line">void printstudent2(struct student *p)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;子函数2中 姓名：&quot;&lt;&lt;p-&gt;name&lt;&lt;&quot;年龄：&quot;&lt;&lt;p-&gt;age&lt;&lt;&quot;性别：&quot;&lt;&lt;p-&gt;sex&lt;&lt;endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //创建结构体变量</span><br><span class="line">    struct student s;</span><br><span class="line">    s.name=&quot;张三&quot;;</span><br><span class="line">    s.age=18;</span><br><span class="line">    s.sex=0;</span><br><span class="line">    printstudent1(s);</span><br><span class="line">    printstudent2(&amp;s);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 结构体中const使用场景 </summary>              <div class='content'>              <p>==作用：用const来防止误操作==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  int sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void printstudent(const struct student *s)</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;s-&gt;name&lt;&lt;s-&gt;age&lt;&lt;s-&gt;sex&lt;&lt;endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  struct student s=&#123;&quot;张三&quot;,18,0&#125;;</span><br><span class="line">  printstudent(&amp;s);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 结构体案例1 </summary>              <div class='content'>              <p><strong>案例描述：</strong><br>学校正在做毕设项目，每名老师带领5个学生，总共有8名老师，需求如下：<br>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员<br>学生的成员有姓名，考试分数，创建数组存放3名老师 ，通过函数给每个老师及所带学生赋值<br>最终打印出老师数据以及老师所带学生数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct student&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct  teacher&#123;</span><br><span class="line">  string name;</span><br><span class="line">  struct student stu[5];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void allocatespace(struct teacher arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">  string nameseed=&quot;ABCDE&quot;;</span><br><span class="line">  int scorel[5]=&#123;1,2,3,4,5&#125;;</span><br><span class="line">  for(int i=0;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    arr[i].name=&quot;Teacher_a&quot;;</span><br><span class="line">    arr[i].name+=nameseed[i];</span><br><span class="line">    for(int j=0;j&lt;5;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      arr[i].stu[j].name=&quot;Student_&quot;;</span><br><span class="line">      arr[i].stu[j].name+=nameseed[j];</span><br><span class="line">      arr[i].stu[j].score=scorel[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void printInfo(struct teacher arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">  for(int i=0;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;老师姓名：&quot;&lt;&lt;arr[i].name&lt;&lt;endl;</span><br><span class="line">    for(int j=0;j&lt;5;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      cout&lt;&lt;&quot;\t老师学生姓名：&quot;&lt;&lt;arr[i].stu[j].name&lt;&lt;endl&lt;&lt;&quot;\t成绩：&quot;&lt;&lt;arr[i].stu[j].score&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  struct teacher arr[3];</span><br><span class="line">  int len=sizeof(arr)/sizeof(arr[0]);</span><br><span class="line">  allocatespace(arr,len);</span><br><span class="line">  printInfo(arr,len);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 结构体案例2 </summary>              <div class='content'>              <p><strong>案例描述：</strong></p><p>设计一个英雄的结构体，包括成员姓名，年龄，性别；创建结构体数据数组，数组中存放5名英雄。</p><p>通过冒泡排序算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p><hr><p>==五名英雄信息：==</p><p>{“刘备”,23,“男”}，</p><p>{“关羽”,22,“男”}，</p><p>{“张飞”,20,“男”}，</p><p>{“赵云”,21,“男”}，</p><p>{“貂蝉”,19,“女”}，</p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct hero</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  string sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void heroInfo(struct hero arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">  string xingming[5]=&#123;&quot;刘备&quot;,&quot;关羽&quot;,&quot;张飞&quot;,&quot;赵云&quot;,&quot;貂蝉&quot;&#125;;</span><br><span class="line">  int nianlin[5]=&#123;23,22,20,21,19&#125;;</span><br><span class="line">  string xingbie[5]=&#123;&quot;男&quot;,&quot;男&quot;,&quot;男&quot;,&quot;男&quot;,&quot;女&quot;&#125;;</span><br><span class="line">  for(int i=0;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    arr[i].name=xingming[i];</span><br><span class="line">    arr[i].age=nianlin[i];</span><br><span class="line">    arr[i].sex=xingbie[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void herosort(struct hero arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">  for(int i=0;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    for(int j=0;j&lt;len-i-1;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      if(arr[j].age&lt;arr[j+1].age)</span><br><span class="line">      &#123;</span><br><span class="line">        struct hero temp=arr[j];</span><br><span class="line">        arr[j]=arr[j+1];</span><br><span class="line">        arr[j+1]=temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void printhero(struct hero arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">  for(int i=0;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;英雄姓名：&quot;&lt;&lt;arr[i].name&lt;&lt;&quot;英雄年龄:&quot;&lt;&lt;arr[i].age&lt;&lt;&quot;英雄性别:&quot;&lt;&lt;arr[i].sex&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  struct hero arr[5];</span><br><span class="line">  int len=sizeof(arr)/sizeof(arr[0]);</span><br><span class="line">  heroInfo(arr,len);</span><br><span class="line">  herosort(arr,len);</span><br><span class="line">  printhero(arr,len);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>]]></content>
      
    </entry>
    
    
  
</search>
