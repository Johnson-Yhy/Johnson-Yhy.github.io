<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Data-Struct code</title>
      <link href="/2023/10/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%A3%E7%A0%81/"/>
      <url>/2023/10/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>建议缩小屏幕宽度来更好的查看全部代码 <img no-lazy class="inline" src="https://p1.itc.cn/q_70/images03/20220922/da0879303f5a4c03b3ae85d8b259ca16.gif" style="height:50px;"/> </p><p>这是 <img no-lazy class="inline" src="https://hiphotos.baidu.com/feed/pic/item/4b90f603738da9772a71541dbd51f8198618e3ae.jpg" style="height:50px;"/> 接下来当你遇到报错时的抓拍。</p><h1 id="顺序表-Sequence-table"><a href="#顺序表-Sequence-table" class="headerlink" title="顺序表-Sequence table"></a>顺序表-Sequence table</h1><details class="folding-tag" yellow><summary> 顺序表 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 顺序表-(静态分配) </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10   <span class="comment">//定义顺序表最大长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;<span class="comment">//顺序表的类型定义</span></span><br><span class="line"><span class="type">int</span> data[MaxSize];<span class="comment">//用数组存放数据元素</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本操作---初始化一个顺序表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList1</span><span class="params">(SeqList&amp; L)</span> </span>&#123;</span><br><span class="line">L.length = <span class="number">0</span>;<span class="comment">//必须设置顺序表的初始长度为0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SeqList L;<span class="comment">//声明一个顺序表</span></span><br><span class="line"><span class="built_in">InitList1</span>(L);<span class="comment">//初始化顺序表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这种访问方式是违规的，不能访问大于当前顺序表长度的数据i&lt;L.length</span></span><br><span class="line"><span class="comment">//使用i&lt;L.length也不够好，应该使用基本操作来访问各个数据元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MaxSize; i++)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;data[i]=&quot;</span>&lt;&lt;L.data[i]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" pink><summary> 顺序表-(动态分配) </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void InitList(SeqList&amp; L);//1.初始化顺序表</span></span><br><span class="line"><span class="comment">// int Length(SeqList L);//2.求表长</span></span><br><span class="line"><span class="comment">// bool Empty(SeqList L);//3.判空</span></span><br><span class="line"><span class="comment">// void IncreaseSize(SeqList&amp; L, int len);//4.增加动态数组的长度</span></span><br><span class="line"><span class="comment">// bool InsertList(SeqList&amp; L, int i, ElemType e);//5.插入操作</span></span><br><span class="line"><span class="comment">// bool ListDelete(SeqList&amp; L, int i, ElemType&amp; e);//6.删除操作</span></span><br><span class="line"><span class="comment">// ElemType GetElem(SeqList L, int i);//7-1.查找操作-按位查找</span></span><br><span class="line"><span class="comment">// int LocateElem(SeqList L, ElemType e);//7-2.查找操作-按值查找</span></span><br><span class="line"><span class="comment">// void PrintList(SeqList L);//8.遍历</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10   <span class="comment">//定义顺序表的初始长度</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int   <span class="comment">//定义数据元素类型</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">02.顺序表_动态分配(malloc函数实现)</span></span><br><span class="line"><span class="comment">1.sizeof(类型符或变量名)</span></span><br><span class="line"><span class="comment">（1）当操作数为数据类型时，得到该数据类型的存储字节数</span></span><br><span class="line"><span class="comment">（2）当操作数为变量名时，得到变量使用的存储单元字节数</span></span><br><span class="line"><span class="comment">2.malloc函数的使用</span></span><br><span class="line"><span class="comment">（1）作用：分配一块连续的内存空间并返回所分配空间的起始地址</span></span><br><span class="line"><span class="comment">（2）常用格式：L.data = (ElemType*)malloc(sizeof(ElemType)*InitSize);</span></span><br><span class="line"><span class="comment">（3）注意：使用该函数一般要判断其返回值，若返回值为NULL，则说明分配失败，程序要进行相应处理</span></span><br><span class="line"><span class="comment">3.free（）函数</span></span><br><span class="line"><span class="comment"> (1)释放内存空间</span></span><br><span class="line"><span class="comment"> (2)与malloc函数是一对,malloc返回值为内存空间基址，free参数为内存空间基址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">SeqList</span> &#123;</span><br><span class="line">ElemType* data;<span class="comment">//指示动态分配数组的指针，也就是malloc函数返回的分配空间的起始地址</span></span><br><span class="line"><span class="type">int</span> MaxSize;<span class="comment">//顺序表的最大容量</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//顺序表当前长度</span></span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.初始化顺序表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(SeqList&amp; L)</span> </span>&#123;</span><br><span class="line">L.data = (ElemType*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ElemType) * InitSize);</span><br><span class="line">L.MaxSize = InitSize;</span><br><span class="line">L.length = <span class="number">0</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;顺序表初始化成功！&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.求表长：返回顺序表的长度，即L中数据元素的个数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">(SeqList L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> L.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.判空：判断顺序表是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">(SeqList L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L.length == <span class="number">0</span>) &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;顺序表为空！&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;顺序表非空！&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.增加动态数组的长度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IncreaseSize</span><span class="params">(SeqList&amp; L, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span>* p = L.data;</span><br><span class="line">L.data = (ElemType*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ElemType) * (L.MaxSize + len));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)<span class="comment">//将数据复制到新区域(时间开销大)</span></span><br><span class="line">L.data[i] = p[i];</span><br><span class="line">L.MaxSize += len;<span class="comment">//顺序表的最大长度增加len</span></span><br><span class="line"><span class="built_in">free</span>(p);<span class="comment">//释放原来的内存空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.插入操作：在表L的位序i上插入指定元素e</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertList</span><span class="params">(SeqList&amp; L, <span class="type">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length + <span class="number">1</span>)<span class="comment">//判断要插入的位序i是否合法（合法范围[1,length+1]，即首部和尾部之间）</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (L.length &gt;= L.MaxSize)<span class="comment">//判断当前存储空间是否已满，若已满，不能插入</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = L.length; j &gt;= i; j--)<span class="comment">//将第i个元素及之后的元素后移</span></span><br><span class="line">L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">L.data[i - <span class="number">1</span>] = e;<span class="comment">//位序为i处放入指定元素e</span></span><br><span class="line">L.length++;<span class="comment">//顺序表长度+1</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.删除操作：删除表中位序为i的元素，并用e返回删除元素的值</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(SeqList&amp; L, <span class="type">int</span> i, ElemType&amp; e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length) &#123;<span class="comment">//判断要删除的位序是否合法(合法范围为[1,length])</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">e = L.data[i - <span class="number">1</span>];<span class="comment">//位序i的元素赋给e</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; L.length; j++)<span class="comment">//将第i个元素之后的元素前移</span></span><br><span class="line">L.data[j - <span class="number">1</span>] = L.data[j];</span><br><span class="line">L.length--;<span class="comment">//顺序表长度-1</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7-1.查找操作-按位查找：获取表L中位序为i的元素的值</span></span><br><span class="line"><span class="function">ElemType <span class="title">GetElem</span><span class="params">(SeqList L, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> L.data[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7-2.查找操作-按值查找：查找表L中第一个元素值为e的元素，并返回其位序</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LocateElem</span><span class="params">(SeqList L, ElemType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line"><span class="keyword">if</span> (L.data[i] == e)</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>;<span class="comment">//数组下标为i的元素值等于e，返回其位序i+1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//返回值为0，说明查找失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.遍历顺序表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">(SeqList L)</span> </span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;遍历开始：&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        cout&lt;&lt;L.data[i]&lt;&lt;<span class="string">&quot; &quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n,i;</span><br><span class="line">ElemType a,e=<span class="number">-1</span>;</span><br><span class="line">SeqList L;<span class="comment">//声明一个顺序表</span></span><br><span class="line"><span class="built_in">InitList</span>(L);<span class="comment">//初始化顺序表</span></span><br><span class="line"><span class="comment">/*0、判空*/</span></span><br><span class="line"><span class="built_in">Empty</span>(L);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*1、插入元素*/</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入元素个数：&quot;</span>;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin&gt;&gt;a;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">InsertList</span>(L, i + <span class="number">1</span>, a))</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;成功插入第&quot;</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">&quot;个元素：&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;第&quot;</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">&quot;个元素插入失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2、判空*/</span></span><br><span class="line"><span class="built_in">Empty</span>(L);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*3、遍历当前顺序表*/</span></span><br><span class="line"><span class="built_in">PrintList</span>(L);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*4、删除元素*/</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入您要删除元素的位序i：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;i;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">ListDelete</span>(L, i, e))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;已删除第&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;个元素，其值为：&quot;</span>&lt;&lt;e&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;位序i不合法,删除失败！&quot;</span>&lt;&lt;endl;        </span><br><span class="line"></span><br><span class="line"><span class="comment">/*5、输出当前表长*/</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;当前表长为：&quot;</span>&lt;&lt;<span class="built_in">Length</span>(L)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*6、遍历当前顺序表*/</span></span><br><span class="line"><span class="built_in">PrintList</span>(L);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*7、按位查找*/</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入您要查找元素的位序i：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;i;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">GetElem</span>(L, i) == <span class="number">-1</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;您输入的位序不合法！&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;位序为&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;的值为：&quot;</span>&lt;&lt;<span class="built_in">GetElem</span>(L, i)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*8、按值查找*/</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入您要查找元素的值：&quot;</span>;</span><br><span class="line">cin&gt;&gt;a;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;值为&quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;的元素第一次出现的位序为&quot;</span>&lt;&lt;<span class="built_in">LocateElem</span>(L, a)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" yellow><summary> 例题 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 题目一 </summary>              <div class='content'>              <blockquote><p>假设顺序表非空。从顺序表中找出最小值，及其下标。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">int</span> *data;</span><br><span class="line">    <span class="type">int</span> MaxSize;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    L.data=(<span class="type">int</span> *)<span class="built_in">malloc</span>(InitSize*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    L.length=<span class="number">0</span>;</span><br><span class="line">    L.MaxSize=InitSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">findMin</span><span class="params">(SqList &amp;L, <span class="type">int</span> &amp;value,<span class="type">int</span> &amp;pos)</span></span>&#123;</span><br><span class="line">    value=L.data[<span class="number">0</span>];</span><br><span class="line">    pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(L.data[i]&lt;value)&#123;</span><br><span class="line">            value=L.data[i];</span><br><span class="line">            pos=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pos;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        cout&lt;&lt;L.data[i]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqList L;</span><br><span class="line">    <span class="built_in">InitList</span>(L);</span><br><span class="line">    L.length=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        cin&gt;&gt;L.data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;表L:&quot;</span>;</span><br><span class="line">    <span class="built_in">PrintList</span>(L);</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="type">int</span> pos;</span><br><span class="line">    <span class="built_in">findMin</span>(L,pos,value);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;最小值为：&quot;</span>&lt;&lt;value&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;位序为：&quot;</span>&lt;&lt;pos&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>              </div>            </details><details class="folding-tag" blue><summary> 题目二 </summary>              <div class='content'>              <blockquote><p>从顺序表中删除具有最小值的元素（假设唯一）并由函数返回被删元素的值。空出的位置由最后一个元素填补，若顺序表为空则显示出错信息并退出运行。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line"><span class="type">int</span> *data;</span><br><span class="line"><span class="type">int</span> length;</span><br><span class="line"><span class="type">int</span> MaxSize;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">L.data=(<span class="type">int</span> *)<span class="built_in">malloc</span>(InitSize*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">L.length=<span class="number">0</span>;</span><br><span class="line">L.MaxSize=InitSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findmin</span><span class="params">(SqList &amp;L,<span class="type">int</span> &amp;value,<span class="type">int</span> &amp;pos)</span></span>&#123;</span><br><span class="line">value=L.data[<span class="number">0</span>];</span><br><span class="line">pos=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;L.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(L.data[i]&lt;value)&#123;</span><br><span class="line">value=L.data[i];</span><br><span class="line">pos=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deleteList</span><span class="params">(SqList &amp;L,<span class="type">int</span> &amp;value)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> pos;</span><br><span class="line"><span class="keyword">if</span>(L.length==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">findmin</span>(L,value,pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> end=L.length<span class="number">-1</span>;</span><br><span class="line">L.data[pos]=L.data[end];</span><br><span class="line">L.length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqList L;</span><br><span class="line"><span class="built_in">InitList</span>(L);</span><br><span class="line">cin&gt;&gt;L.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">cin&gt;&gt;L.data[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">deleteList</span>(L,a);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">cout&lt;&lt;L.data[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>              </div>            </details><details class="folding-tag" blue><summary> 题目三 </summary>              <div class='content'>              <blockquote><p>设计一个高效算法，将顺序表L的所有元素逆置，要求算法的时间复杂度为O(1).<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">int</span> *data;</span><br><span class="line">    <span class="type">int</span> MaxSize;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    L.data=(<span class="type">int</span> *)<span class="built_in">malloc</span>(InitSize*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    L.length=<span class="number">0</span>;</span><br><span class="line">    L.MaxSize=InitSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Reverse</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length/<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> temp=L.data[i];</span><br><span class="line">        L.data[i]=L.data[L.length-i<span class="number">-1</span>];</span><br><span class="line">        L.data[L.length-i<span class="number">-1</span>]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        cout&lt;&lt;L.data[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqList L;</span><br><span class="line">    <span class="built_in">InitList</span>(L);</span><br><span class="line">    cin&gt;&gt;L.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        cin&gt;&gt;L.data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Reverse</span>(L);</span><br><span class="line">    <span class="built_in">printList</span>(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>              </div>            </details><details class="folding-tag" blue><summary> 题目四 </summary>              <div class='content'>              <blockquote><p>在顺序表L的第i(i&lt;=L.length+1)个位置插入新元素e。若i的输入不合法，则返回false，表示插入失败；否则，将第i个元素及其后的所有元素依次往后移动一个位置，腾出一个kon位置插入新元素e，顺序表长度增加1，插入成功，返回true.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">int</span> *data;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">    <span class="type">int</span> MaxSize;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    L.data=(<span class="type">int</span> *)<span class="built_in">malloc</span>(InitSize*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    L.length=<span class="number">0</span>;</span><br><span class="line">    L.MaxSize=InitSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L,<span class="type">int</span> &amp;pos,<span class="type">int</span> &amp;e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos&gt;L.length+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=L.length;i&gt;=pos;i--)&#123;</span><br><span class="line">            L.data[i+<span class="number">1</span>]=L.data[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L.data[pos]=e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        cout&lt;&lt;L.data[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqList L;</span><br><span class="line">    <span class="built_in">InitList</span>(L);</span><br><span class="line">    cin&gt;&gt;L.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        cin&gt;&gt;L.data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> e,pos;</span><br><span class="line">    cin&gt;&gt;pos&gt;&gt;e;</span><br><span class="line">    <span class="built_in">ListInsert</span>(L,pos,e);</span><br><span class="line">    <span class="built_in">printList</span>(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>              </div>            </details><details class="folding-tag" blue><summary> 题目五 </summary>              <div class='content'>              <blockquote><p>对长度为n的顺序表L，编写一个时间复杂度为O(n),空间复杂度为O(1)的算法，该算法删除线性表中所有值为x的数据元素.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//解法一</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">int</span> *data;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">    <span class="type">int</span> MAxSize;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    L.data=(<span class="type">int</span> *)<span class="built_in">malloc</span>(InitSize*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    L.length=<span class="number">0</span>;</span><br><span class="line">    L.MAxSize=InitSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleteList</span><span class="params">(SqList &amp;L,<span class="type">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(L.data[i]!=value)&#123;</span><br><span class="line">            L.data[j]=L.data[i];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length=j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        cout&lt;&lt;L.data[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqList L;</span><br><span class="line">    <span class="built_in">InitList</span>(L);</span><br><span class="line">    cin&gt;&gt;L.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        cin&gt;&gt;L.data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="built_in">deleteList</span>(L,x);</span><br><span class="line">    <span class="built_in">printList</span>(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//解法二</span></span><br><span class="line"><span class="comment">// #include&lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// using namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #define InitSize 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// typedef struct&#123;</span></span><br><span class="line"><span class="comment">//     int *data;</span></span><br><span class="line"><span class="comment">//     int length;</span></span><br><span class="line"><span class="comment">//     int MAxSize;</span></span><br><span class="line"><span class="comment">// &#125;SqList;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void InitList(SqList &amp;L)&#123;</span></span><br><span class="line"><span class="comment">//     L.data=(int *)malloc(InitSize*sizeof(int));</span></span><br><span class="line"><span class="comment">//     L.length=0;</span></span><br><span class="line"><span class="comment">//     L.MAxSize=InitSize;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void deleteList(SqList &amp;L,int x)&#123;</span></span><br><span class="line"><span class="comment">//     int k=0;</span></span><br><span class="line"><span class="comment">//     for(int i=0;i&lt;L.length;i++)&#123;</span></span><br><span class="line"><span class="comment">//         if(L.data[i]==x)</span></span><br><span class="line"><span class="comment">//         k++;</span></span><br><span class="line"><span class="comment">//         else</span></span><br><span class="line"><span class="comment">//         L.data[i-k]=L.data[i];</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     L.length=L.length-k;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void printList(SqList &amp;L)&#123;</span></span><br><span class="line"><span class="comment">//     for(int i=0;i&lt;L.length;i++)&#123;</span></span><br><span class="line"><span class="comment">//         cout&lt;&lt;L.data[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// int main()&#123;</span></span><br><span class="line"><span class="comment">//     SqList L;</span></span><br><span class="line"><span class="comment">//     InitList(L);</span></span><br><span class="line"><span class="comment">//     cin&gt;&gt;L.length;</span></span><br><span class="line"><span class="comment">//     for(int i=0;i&lt;L.length;i++)&#123;</span></span><br><span class="line"><span class="comment">//         cin&gt;&gt;L.data[i];</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     int x;</span></span><br><span class="line"><span class="comment">//     cin&gt;&gt;x;</span></span><br><span class="line"><span class="comment">//     deleteList(L,x);</span></span><br><span class="line"><span class="comment">//     printList(L);</span></span><br><span class="line"><span class="comment">//     return 0;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote>              </div>            </details><details class="folding-tag" blue><summary> 题目六 </summary>              <div class='content'>              <blockquote><p>从顺序表中删除其值在给定值s与t之间(包含s和t，要求s<t)的所有元素，若s或t不合理或顺序表为空，则显示出错信息并退出运行<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">int</span> *data;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">    <span class="type">int</span> MaxSize;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    L.data=(<span class="type">int</span> *)<span class="built_in">malloc</span>(InitSize*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    L.length=<span class="number">0</span>;</span><br><span class="line">    L.MaxSize=InitSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deleteList</span><span class="params">(SqList &amp;L,<span class="type">int</span> &amp;s,<span class="type">int</span> &amp;t)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L.length==<span class="number">0</span>||s&gt;=t)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(L.data[i]&lt;s||L.data[i]&gt;t)&#123;</span><br><span class="line">                L.data[j]=L.data[i];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        L.length=j;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        cout&lt;&lt;L.data[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqList L;</span><br><span class="line">    <span class="built_in">InitList</span>(L);</span><br><span class="line">    cin&gt;&gt;L.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        cin&gt;&gt;L.data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> s,t;</span><br><span class="line">    cin&gt;&gt;s&gt;&gt;t;</span><br><span class="line">    <span class="built_in">deleteList</span>(L,s,t);</span><br><span class="line">    <span class="built_in">PrintList</span>(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>              </div>            </details><details class="folding-tag" blue><summary> 题目七 </summary>              <div class='content'>              <blockquote><p>从有序顺序表中删除所有其值重复的元素，使表中所有元素的值均不同<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">int</span> *data;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">    <span class="type">int</span> MaxSize;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    L.data=(<span class="type">int</span> *)<span class="built_in">malloc</span>(InitSize*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    L.length=<span class="number">0</span>;</span><br><span class="line">    L.MaxSize=InitSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void DeleteList(SqList &amp;L)&#123;</span></span><br><span class="line"><span class="comment">//     for(int i=0;i&lt;L.length;i++)&#123;</span></span><br><span class="line"><span class="comment">//         if(L.data[i]==L.data[i+1])&#123;</span></span><br><span class="line"><span class="comment">//             for(int j=i+1;j&lt;L.length;j++)&#123;</span></span><br><span class="line"><span class="comment">//                 L.data[j]=L.data[j+1];</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             L.length--;</span></span><br><span class="line"><span class="comment">//             DeleteList(L);</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(L.data[i]==L.data[i-k<span class="number">-1</span>])&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;i:&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="string">&quot;k:&quot;</span>&lt;&lt;k&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;L.data[i]&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;L.data[i-k<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;i-k<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">        k++;&#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        L.data[i-k]=L.data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    L.length=L.length-k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        cout&lt;&lt;L.data[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqList L;</span><br><span class="line">    <span class="built_in">InitList</span>(L);</span><br><span class="line">    cin&gt;&gt;L.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        cin&gt;&gt;L.data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">DeleteList</span>(L);</span><br><span class="line">    <span class="built_in">PrintList</span>(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>              </div>            </details>              </div>            </details>              </div>            </details><h1 id="链表-LinkList"><a href="#链表-LinkList" class="headerlink" title="链表-LinkList"></a>链表-LinkList</h1><details class="folding-tag" yellow><summary> 链表 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 头插法建立单链表 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头插法建立单链表</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">InitListByHead</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    LNode *s;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line"></span><br><span class="line">    L=(LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">        s=(LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data=x;</span><br><span class="line">        s-&gt;next=L-&gt;next;</span><br><span class="line">        L-&gt;next=s;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintLinkList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    L=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout&lt;&lt;L-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        L=L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LinkList L;</span><br><span class="line">    <span class="built_in">InitListByHead</span>(L);</span><br><span class="line">    <span class="built_in">PrintLinkList</span>(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 尾插法建立单链表 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾插法建立单链表</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">InitListByHead</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    L=(LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    LNode *s,*r=L;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">        s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data=x;</span><br><span class="line">        s-&gt;next=r-&gt;next;</span><br><span class="line">        r-&gt;next=s;</span><br><span class="line">        r=s;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintLinkList</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    L=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout&lt;&lt;L-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        L=L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LinkList L;</span><br><span class="line">    <span class="built_in">InitListByHead</span>(L);</span><br><span class="line">    <span class="built_in">PrintLinkList</span>(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 单链表的按位查找 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位查找</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">InitListByHead</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    L=(LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    LNode *s,*r=L;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">        s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data=x;</span><br><span class="line">        s-&gt;next=r-&gt;next;</span><br><span class="line">        r-&gt;next=s;</span><br><span class="line">        r=s;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LNode *<span class="title">getElemByPos</span><span class="params">(LinkList L,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    LNode *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintLinkList</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    L=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout&lt;&lt;L-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        L=L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LinkList L;</span><br><span class="line">    <span class="built_in">InitListByHead</span>(L);</span><br><span class="line">    <span class="built_in">PrintLinkList</span>(L);</span><br><span class="line">    <span class="built_in">getElemByPos</span>(L,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 单链表的按值查找 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单链表的按值查找</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">InitListByHead</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line"></span><br><span class="line">    L=(LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    LNode *s,*r=L;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">        s=(LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data=x;</span><br><span class="line">        s-&gt;next=r-&gt;next;</span><br><span class="line">        r-&gt;next=s;</span><br><span class="line">        r=s;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LNode *<span class="title">LocateElemByValue</span><span class="params">(LinkList L,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line">    LNode *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;p-&gt;data!=e)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> p;                               </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LinkList L;</span><br><span class="line">    <span class="built_in">InitListByHead</span>(L);</span><br><span class="line">    <span class="built_in">LocateElemByValue</span>(L,<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 求单链表的表长 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求单链表的长度</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">InitListByHead</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line"></span><br><span class="line">    L=(LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    LNode *s,*r=L;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">        s=(LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data=x;</span><br><span class="line">        s-&gt;next=r-&gt;next;</span><br><span class="line">        r-&gt;next=s;</span><br><span class="line">        r=s;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    LNode *p=L-&gt;next;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        j++;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    LNode *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LinkList L;</span><br><span class="line">    <span class="built_in">InitListByHead</span>(L);</span><br><span class="line">    <span class="built_in">PrintList</span>(L);</span><br><span class="line">    <span class="type">int</span> x=<span class="built_in">length</span>(L);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;单链表的长度为：&quot;</span>&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 单链表的插入操作-尾插法 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">InitListByHead</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    L=(LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    LNode *s,*r=L;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">        s=(LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data=x;</span><br><span class="line">        s-&gt;next=r-&gt;next;</span><br><span class="line">        r-&gt;next=s;</span><br><span class="line">        r=s;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    LNode *p=L-&gt;next;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        j++;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(LinkList &amp;L,<span class="type">int</span> i,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;<span class="built_in">length</span>(L)+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s;</span><br><span class="line">    s=(LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data=e;</span><br><span class="line">    LNode *p=L-&gt;next;</span><br><span class="line">    <span class="type">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;pos&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        pos++;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;pos:&quot;</span>&lt;&lt;pos&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;p:&quot;</span>&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    LNode *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LinkList L;</span><br><span class="line">    <span class="built_in">InitListByHead</span>(L);</span><br><span class="line">    <span class="built_in">ListInsert</span>(L,<span class="number">3</span>,<span class="number">99</span>);</span><br><span class="line">    <span class="built_in">PrintList</span>(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 单链表的插入操作-头插法 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法建立单链表</span></span><br><span class="line"><span class="function">LinkList <span class="title">InitListByLater</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    L=(LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    LNode *s,*r=L;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">        s=(LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data=x;</span><br><span class="line">        s-&gt;next=r-&gt;next;</span><br><span class="line">        r-&gt;next=s;</span><br><span class="line">        r=s;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找第i个元素</span></span><br><span class="line"><span class="function">LNode *<span class="title">getElemByPos</span><span class="params">(LinkList L,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;i:&quot;</span>&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    LNode *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求单链表的表长</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    LNode *p=L-&gt;next;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        j++;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单链表的按位序插入</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ListInsert</span><span class="params">(LinkList &amp;L,<span class="type">int</span> i,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;<span class="built_in">length</span>(L)+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    LNode *s=(LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data=e;</span><br><span class="line"></span><br><span class="line">    LNode *p=<span class="built_in">getElemByPos</span>(L,i<span class="number">-1</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;p:&quot;</span>&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">    s-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    LNode *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LinkList L;</span><br><span class="line">    <span class="built_in">InitListByLater</span>(L);</span><br><span class="line">    <span class="type">int</span> i,e;</span><br><span class="line">    cin&gt;&gt;i&gt;&gt;e;</span><br><span class="line">    <span class="built_in">ListInsert</span>(L,i,e);</span><br><span class="line">    <span class="built_in">PrintList</span>(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 单链表的删除操作 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">InitListByHead</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    L=(LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    LNode *s,*r=L;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">        s=(LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data=x;</span><br><span class="line">        s-&gt;next=r-&gt;next;</span><br><span class="line">        r-&gt;next=s;</span><br><span class="line">        r=s;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LNode *<span class="title">getElemLocate</span><span class="params">(LinkList L,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> L;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        LNode *p=L-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i)&#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    LNode *p=L-&gt;next;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteElem</span><span class="params">(LinkList &amp;L,<span class="type">int</span> i,<span class="type">int</span> &amp;e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;<span class="built_in">length</span>(L)+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p=<span class="built_in">getElemLocate</span>(L,i<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q=p-&gt;next;</span><br><span class="line">    e=q-&gt;data;</span><br><span class="line">    p-&gt;next=q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    LNode *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LinkList L;</span><br><span class="line">    <span class="built_in">InitListByHead</span>(L);</span><br><span class="line">    <span class="type">int</span> i,e,x;</span><br><span class="line">    cin&gt;&gt;i;</span><br><span class="line">    <span class="built_in">DeleteElem</span>(L,i,e);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;e:&quot;</span>&lt;&lt;e&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">PrintList</span>(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 单链表删除指定节点 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">InitListByHead</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    L=(LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    LNode *s,*r=L;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">        s=(LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data=x;</span><br><span class="line">        s-&gt;next=r-&gt;next;</span><br><span class="line">        r-&gt;next=s;</span><br><span class="line">        r=s;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LNode *<span class="title">getElemLocate</span><span class="params">(LinkList L,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> L;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        LNode *p=L-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i)&#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    LNode *p=L-&gt;next;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteElem</span><span class="params">(LinkList &amp;L,LNode *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q=p-&gt;next;</span><br><span class="line">    p-&gt;data=p-&gt;next-&gt;data;</span><br><span class="line">    p-&gt;next=q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    LNode *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LinkList L;</span><br><span class="line">    <span class="built_in">InitListByHead</span>(L);</span><br><span class="line">    LNode *p;</span><br><span class="line">    <span class="built_in">DeleteElem</span>(L,p);</span><br><span class="line">    <span class="built_in">PrintList</span>(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 双链表的基本操作(全集) </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// DLinkList InitDLinkList(DLinkList&amp; L);//1.初始化双链表</span></span><br><span class="line"><span class="comment">// bool Empty(DLinkList L);//2.判空</span></span><br><span class="line"><span class="comment">// DNode* GetElem(DLinkList L, int i);//3-1.查找操作-按位查找</span></span><br><span class="line"><span class="comment">// DNode* LocateElem(DLinkList L, ElemType e);//3-2.查找操作-按值查找</span></span><br><span class="line"><span class="comment">// bool InsertNextDNode1(DNode* p, DNode* s);//4-1-1.插入操作-指定结点后插1-给结点</span></span><br><span class="line"><span class="comment">// bool InsertNextDNode2(DNode* p, ElemType e);//4-1-2.插入操作-指定结点后插2-给元素值</span></span><br><span class="line"><span class="comment">// bool InsertPriorDNode(DNode* p, DNode* s);//4-2.插入操作-指定结点前插</span></span><br><span class="line"><span class="comment">// bool InsertDLinkList(DLinkList&amp; L, int i, ElemType e);//4-3.插入操作-按位插入</span></span><br><span class="line"><span class="comment">// bool DeleteNextDNode(DNode* p);//5.删除操作-删除指定结点p的后继结点q</span></span><br><span class="line"><span class="comment">// DLinkList List_HeadInsert(DLinkList&amp; L);//6.创建双链表：头插法</span></span><br><span class="line"><span class="comment">// void DestoryList(DLinkList&amp; L);//7.销毁操作</span></span><br><span class="line"><span class="comment">// int Length(DLinkList L);//8.求表长</span></span><br><span class="line"><span class="comment">// void PrintDLinkList(DLinkList L);//9.遍历</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">DNode</span>&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">DNode</span> *prior,*next;</span><br><span class="line">&#125;DNode,*DLinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.初始化双链表(带头结点)</span></span><br><span class="line"><span class="function">DLinkList <span class="title">InitDLinkList</span><span class="params">(DLinkList&amp; L)</span> </span>&#123;</span><br><span class="line">L = (DNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));<span class="comment">//创建头结点</span></span><br><span class="line"><span class="keyword">if</span> (L == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;    <span class="comment">//内存不足，分配失败</span></span><br><span class="line">L-&gt;prior = <span class="literal">NULL</span>;<span class="comment">//头结点的prior永远指向NULL，可作判断逆向遍历的条件</span></span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;<span class="comment">//头结点之后暂时没有结点</span></span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.判空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">(DLinkList L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (L-&gt;next == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3-1.查找操作-按位查找：返回第i个结点</span></span><br><span class="line"><span class="function">DNode* <span class="title">GetElem</span><span class="params">(DLinkList L, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">DNode* p = L;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; j &lt; i) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;<span class="comment">//也可能返回NULL，当输入i大于双链表长度时</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3-2.查找操作-按值查找：找到第一个数据域为e的结点</span></span><br><span class="line"><span class="function">DNode* <span class="title">LocateElem</span><span class="params">(DLinkList L, ElemType e)</span> </span>&#123;</span><br><span class="line">DNode* p = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;data != e) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4-1-1.插入操作-指定结点后插1-给结点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextDNode1</span><span class="params">(DNode* p, DNode* s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span> || s == <span class="literal">NULL</span>)<span class="comment">//非法参数</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">DNode* q = p-&gt;next;</span><br><span class="line">s-&gt;next = q;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;next != <span class="literal">NULL</span>)<span class="comment">//判断p是不是最后一个结点</span></span><br><span class="line">q-&gt;prior = s;<span class="comment">//如果是，则跳过此句，因为p的后继为NULL，没有前驱</span></span><br><span class="line">s-&gt;prior = p;</span><br><span class="line">p-&gt;next = s;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4-1-2.插入操作-指定结点后插2-给元素值</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextDNode2</span><span class="params">(DNode* p, ElemType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)<span class="comment">//非法参数</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">DNode* q = p-&gt;next;<span class="comment">//q为p原先的后继结点</span></span><br><span class="line">DNode* s = (DNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));<span class="comment">//s为p新的后继结点</span></span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//内存不足，分配失败</span></span><br><span class="line">s-&gt;data = e;<span class="comment">//为新结点赋值</span></span><br><span class="line">s-&gt;next = q;</span><br><span class="line"><span class="keyword">if</span>(q!=<span class="literal">NULL</span>)<span class="comment">//判断q是不是最后一个结点</span></span><br><span class="line">q-&gt;prior = s;<span class="comment">//如果是，则跳过此句，因为q为NULL，没有前驱</span></span><br><span class="line">s-&gt;prior = p;</span><br><span class="line">p-&gt;next = s;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4-2.插入操作-指定结点前插</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertPriorDNode</span><span class="params">(DNode* p, DNode* s)</span> </span>&#123;</span><br><span class="line">DNode* q = p-&gt;prior;<span class="comment">//先找到p的前驱结点q</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">InsertNextDNode1</span>(q, s);<span class="comment">//对q进行后插操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4-3.插入操作-按位插入</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertDLinkList</span><span class="params">(DLinkList&amp; L, <span class="type">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line">DNode* p = <span class="built_in">GetElem</span>(L, i<span class="number">-1</span>);<span class="comment">//按位查找i-1个结点p</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">InsertNextDNode2</span>(p, e);<span class="comment">//对p结点进行后插操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.删除操作-删除指定结点p的后继结点q</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteNextDNode</span><span class="params">(DNode* p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//非法参数：p不存在</span></span><br><span class="line">DNode* q = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (q == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//p没有后继结点</span></span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;next != <span class="literal">NULL</span>)<span class="comment">//判断q是不是最后一个结点</span></span><br><span class="line">q-&gt;next-&gt;prior = p;<span class="comment">//如果是，则跳过此句，因为q-&gt;next为NULL，没有前驱</span></span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.创建双链表：头插法（创建方法与单链表相同，其他方法不再声明，仅用头插法测试）</span></span><br><span class="line"><span class="function">DLinkList <span class="title">List_HeadInsert</span><span class="params">(DLinkList&amp; L)</span> </span>&#123;</span><br><span class="line">L = <span class="built_in">InitDLinkList</span>(L);<span class="comment">//初始化双链表</span></span><br><span class="line">ElemType x;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;<span class="comment">//用作记录插入第几个元素</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;开始创建双链表！&quot;</span>&lt;&lt;endl&lt;&lt;<span class="string">&quot;请输入&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;个元素&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">InsertNextDNode2</span>(L, x)) <span class="comment">//头插法本质是头结点的后插操作</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;成功插入第&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;个元素：&quot;</span>&lt;&lt;x&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;插入第&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;个元素失败&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入&quot;</span>&lt;&lt;++i&lt;&lt;<span class="string">&quot;个元素&quot;</span>&lt;&lt;endl;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">&#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;双链表创建完成&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.销毁操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestoryList</span><span class="params">(DLinkList&amp; L)</span> </span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;开始销毁双链表！&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="comment">//循环释放各个数据结点--对头结点依次做删除操作</span></span><br><span class="line"><span class="keyword">while</span> (L-&gt;next != <span class="literal">NULL</span>) </span><br><span class="line"><span class="built_in">DeleteNextDNode</span>(L);</span><br><span class="line"><span class="built_in">free</span>(L);<span class="comment">//释放头结点</span></span><br><span class="line">L = <span class="literal">NULL</span>;<span class="comment">//头指针指向NULL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.求表长</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">(DLinkList L)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">DNode* p = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//9.遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintDLinkList</span><span class="params">(DLinkList L)</span> </span>&#123;</span><br><span class="line">DNode* p = L-&gt;next;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;遍历双链表：&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DLinkList L;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    L=<span class="built_in">List_HeadInsert</span>(L);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;当前表长为:&quot;</span>&lt;&lt;<span class="built_in">Length</span>(L);</span><br><span class="line">    <span class="built_in">PrintDLinkList</span>(L);</span><br><span class="line"></span><br><span class="line">    ElemType e1;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入您所要插入的位序i和元素值e:&quot;</span>;</span><br><span class="line">    cin&gt;&gt;i&gt;&gt;e1;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">InsertDLinkList</span>(L,i,e1))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;您已成功插入元素值：&quot;</span>&lt;&lt;e1&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;位序i不合法，插入元素值&quot;</span>&lt;&lt;e1&lt;&lt;<span class="string">&quot;失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">PrintDLinkList</span>(L);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入您要查找的位序i：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;i;</span><br><span class="line">    DNode *p1=<span class="built_in">GetElem</span>(L,i);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;位序为&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;的值为:&quot;</span>&lt;&lt;p1-&gt;data&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    ElemType e2;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入您要查找的元素值e：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;e2;</span><br><span class="line">    DNode *p2=<span class="built_in">LocateElem</span>(L,e2);</span><br><span class="line"></span><br><span class="line">    DNode *p3=(DNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));</span><br><span class="line">    p3-&gt;data=p2-&gt;data;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">InsertPriorDNode</span>(p1,p3))&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;前插成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">DeleteNextDNode</span>(p2-&gt;next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;前插失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">PrintDLinkList</span>(L);</span><br><span class="line"></span><br><span class="line">    ElemType e3=p1-&gt;next-&gt;data;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">DeleteNextDNode</span>(p1))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;此结点后继结点删除成功,值为:&quot;</span>&lt;&lt;e3&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;此结点后继结点删除失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">PrintDLinkList</span>(L);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DestoryList</span>(L);</span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;双链表已销毁!&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;双链表销毁失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 单链表的基本操作（全集） </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /*函数声明*/</span></span><br><span class="line"><span class="comment">// bool InitList(LinkList&amp; L);//1.初始化循环单链表</span></span><br><span class="line"><span class="comment">// bool Empty(LinkList L);//2.判空</span></span><br><span class="line"><span class="comment">// bool isTail(LinkList L, LNode* p);//3.判断表尾结点</span></span><br><span class="line"><span class="comment">// LNode* GetElem(LinkList L, int i);//4.按位查找</span></span><br><span class="line"><span class="comment">// bool InsertNextNode(LNode* p, ElemType e);//5.指定结点后插</span></span><br><span class="line"><span class="comment">// LinkList List_HeadInsert(LinkList&amp; L);//6.头插法</span></span><br><span class="line"><span class="comment">// void PrintList(LinkList L);//7.遍历</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool InitList(LinkList&amp; L);//1.初始化循环单链表</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    L=(LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)                 <span class="comment">//内存分配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    L-&gt;next=L;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;            <span class="comment">//初始化成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool Empty(LinkList L);//2.判空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;next!=L)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span>        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool isTail(LinkList L, LNode* p);//3.判断表尾结点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isTail</span><span class="params">(LinkList L,LNode *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;next==L)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LNode* GetElem(LinkList L, int i);//4.按位查找</span></span><br><span class="line"><span class="function">LNode *<span class="title">GetElem</span><span class="params">(LinkList L,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>)                                         <span class="comment">//i值不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    LNode *p=L;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i)&#123;</span><br><span class="line">        j++;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool InsertNextNode(LNode* p, ElemType e);//5.指定结点后插</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextNode</span><span class="params">(LNode *p,ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s=(LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;data=e;</span><br><span class="line">    s-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=s;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LinkList List_HeadInsert(LinkList&amp; L);//6.头插法</span></span><br><span class="line"><span class="function">LinkList <span class="title">List_HeadInsert</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">InitList</span>(L))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;创建循环单链表成功！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;创建循环单链表失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Empty</span>(L))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前单链表为空！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前单链表非空！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    ElemType x;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;开始创建循环单链表！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入第&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;个元素：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">InsertNextNode</span>(L,x))</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;成功插入第&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;个元素:&quot;</span>&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;插入第&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;个元素失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;创建循环单链表完成！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void PrintList(LinkList L);//7.遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    LNode *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=L)&#123;</span><br><span class="line">        cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LinkList L;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    L=<span class="built_in">List_HeadInsert</span>(L);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判空</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Empty</span>(L))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前表为空！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前表非空！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">PrintList</span>(L);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按位查找</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入要查找的位序i：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;i;</span><br><span class="line">    LNode *p=<span class="built_in">GetElem</span>(L,i);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;位序为&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;的值为：&quot;</span>&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断表尾结点</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isTail</span>(L,p))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前结点为表尾结点！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前结点非表尾结点！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定结点后插，以按位查找的p结点为例</span></span><br><span class="line">    ElemType e;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入您要后插的值：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;e;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">InsertNextNode</span>(p,e))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;p结点后插成功！元素值为：&quot;</span>&lt;&lt;e&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;p结点后插失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//再次判断表尾结点</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isTail</span>(L,p))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前结点为表尾结点！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前结点非表尾结点！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PrintList</span>(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 循环双链表的基本操作(全集) </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// bool InitDLinkList(DLinkList&amp; L);//1.初始化循环双链表</span></span><br><span class="line"><span class="comment">// bool Empty(DLinkList L);//2.判空</span></span><br><span class="line"><span class="comment">// bool isTail(DLinkList L, DNode* p);//3.判断表尾结点</span></span><br><span class="line"><span class="comment">// DNode* GetElem(DLinkList L, int i);//4.按位查找</span></span><br><span class="line"><span class="comment">// bool InsertNextDNode(DNode* p, ElemType e);//5.指定结点后插</span></span><br><span class="line"><span class="comment">// bool DeleteNextDNode(DNode* p);//6.删除指定结点的后继结点</span></span><br><span class="line"><span class="comment">// DLinkList List_HeadInsert(DLinkList&amp; L);//7.头插法</span></span><br><span class="line"><span class="comment">// void PrintDLinkList(DLinkList L);//8.遍历</span></span><br><span class="line"><span class="comment">// void DestoryList(DLinkList&amp; L);//9.销毁循环双链表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">DNode</span>&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">DNode</span> *prior,*next;</span><br><span class="line">&#125;DNode ,*DLinkList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">DLinkList <span class="title">InitDLinkList</span><span class="params">(DLinkList &amp;L)</span></span>&#123;</span><br><span class="line">    L=(DLinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));</span><br><span class="line">    <span class="keyword">if</span>(L==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    L-&gt;next=L;</span><br><span class="line">    L-&gt;prior=L;</span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">(DLinkList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;next==L)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool isTail(DLinkList L, DNode* p);//3.判断表尾结点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isTail</span><span class="params">(DLinkList L,DNode *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;next==L)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找操作--按位查找</span></span><br><span class="line"><span class="function">DNode *<span class="title">GetElem</span><span class="params">(DLinkList L,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    DNode *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i)&#123;</span><br><span class="line">        j++;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按值查找</span></span><br><span class="line"><span class="function">DNode *<span class="title">LocateElem</span><span class="params">(DLinkList L,ElemType e)</span></span>&#123;</span><br><span class="line">    DNode *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;data!=e)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入操作，指定结点后插</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsetrNextDNode1</span><span class="params">(DNode *p,ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)   <span class="comment">//非法参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    DNode *s=(DNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">NULL</span>)   <span class="comment">//内存分配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;data=e;</span><br><span class="line">    p-&gt;next-&gt;prior=s;</span><br><span class="line">    s-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=s;</span><br><span class="line">    s-&gt;prior=p;    </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除操作，删除指定结点p的后继结点q</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteNextDNode</span><span class="params">(DNode *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    DNode *q=p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(q==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p-&gt;next=q-&gt;next;</span><br><span class="line">    q-&gt;next-&gt;prior=p;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历双链表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintDLinkList</span><span class="params">(DLinkList L)</span></span>&#123;</span><br><span class="line">    DNode *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=L)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestoryList</span><span class="params">(DLinkList&amp; L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(L-&gt;next!=L)&#123;</span><br><span class="line">        <span class="built_in">DeleteNextDNode</span>(L);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(L);</span><br><span class="line">    L=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建循环链表--头插法</span></span><br><span class="line"><span class="function">DLinkList <span class="title">List_HeadInsert</span><span class="params">(DLinkList &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">InitDLinkList</span>(L))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;循环双链表初始化成功！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;循环双链表初始化失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Empty</span>(L))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;双链表非空！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;双链表为空！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    ElemType e1;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;开始创建循环双链表！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入第&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;个元素&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;e1;</span><br><span class="line">    <span class="keyword">while</span>(e1!=<span class="number">9999</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">InsetrNextDNode1</span>(L,e1))</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;成功插入第&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;个元素：&quot;</span>&lt;&lt;e1&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;插入第&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;个元素失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入第&quot;</span>&lt;&lt;++i&lt;&lt;<span class="string">&quot;个元素的值&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;e1;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;循环双链表创建完成!&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">DLinkList L;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*以下操作只要涉及对循环双链表的改动，均遍历循环双链表*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*1、头插法建立循环双链表*/</span></span><br><span class="line">L = <span class="built_in">List_HeadInsert</span>(L);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2、判空*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Empty</span>(L))</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;当前双链表为空！&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;当前双联表非空！&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">PrintDLinkList</span>(L);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*3、按位查找*/</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入要查找的位序：&quot;</span>;</span><br><span class="line">cin&gt;&gt;i;</span><br><span class="line">DNode* p = <span class="built_in">GetElem</span>(L, i);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;位序为&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;的值为：&quot;</span>&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line"><span class="comment">/*4.判断表尾结点*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isTail</span>(L, p))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前结点为表尾结点！&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前结点不是表尾结点！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//*5、指定结点后插,以按位查找的p结点为例*/</span></span><br><span class="line">ElemType e;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入您要后插的值：&quot;</span>;</span><br><span class="line">cin&gt;&gt;e;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">InsetrNextDNode1</span>(p, e))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;p结点后插成功，元素值为：&quot;</span>&lt;&lt;e&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;p结点后插失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">PrintDLinkList</span>(L);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*6.再次判断表尾结点*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isTail</span>(L, p))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前结点为表尾结点！&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前结点不是表尾结点！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*7、删除指定结点的后继结点，此处删除p的后继结点*/</span></span><br><span class="line">ElemType e1 = p-&gt;next-&gt;data;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">DeleteNextDNode</span>(p))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;此结点后继结点删除成功，值为：&quot;</span>&lt;&lt;e1&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;此结点后继结点删除失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">PrintDLinkList</span>(L);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*8、销毁循环双链表*/</span></span><br><span class="line"><span class="built_in">DestoryList</span>(L);</span><br><span class="line"><span class="keyword">if</span> (L == <span class="literal">NULL</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;循环双链表已销毁!&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;循环双链表销毁失败哦！&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 静态链表 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="type">int</span> next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="type">int</span> next;</span><br><span class="line">&#125;SLinkList[MaxSize];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testLinkLis</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> x;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sizeX=&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(x)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> a[MaxSize];</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sizeA=&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(a)&lt;&lt;endl;</span><br><span class="line">    SLinkList b;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sizeB=&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(b)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">testLinkLis</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="栈和队列-Stack-amp-amp-Queue"><a href="#栈和队列-Stack-amp-amp-Queue" class="headerlink" title="栈和队列-Stack &amp;&amp; Queue"></a>栈和队列-Stack &amp;&amp; Queue</h1><details class="folding-tag" yellow><summary> 栈和队列 </summary>              <div class='content'>              <details class="folding-tag" pink><summary> 栈 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 顺序栈的基本操作（初始化栈顶指针为-1） </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void InitStack(SqStack &amp;S);    //1.初始化顺序栈</span></span><br><span class="line"><span class="comment">// bool StackEmpty(SqStack S);    //2.判空</span></span><br><span class="line"><span class="comment">// bool Push(SqStack &amp;S,ElemType x);    //3.入栈</span></span><br><span class="line"><span class="comment">// bool Pop(SqStack &amp;S,ElemType &amp;x);//4.出栈</span></span><br><span class="line"><span class="comment">// bool GetTop(SqStack S,ElemType &amp;x);    //5.读取栈顶元素</span></span><br><span class="line"><span class="comment">// PrintSqStack(SqStack S);                     //6.遍历栈内元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span>&#123;</span><br><span class="line">    S.top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push</span><span class="params">(SqStack &amp;S,ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==MaxSize<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    S.data[S.top]=x;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;s.top:&quot;</span>&lt;&lt;S.top&lt;&lt;endl;</span><br><span class="line">    S.top++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop</span><span class="params">(SqStack &amp;S,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=S.data[S.top];</span><br><span class="line">    S.top--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetTop</span><span class="params">(SqStack S,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=S.data[S.top];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintSqStack</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;遍历栈：&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(S.top!=<span class="number">-1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;S.top:&quot;</span>&lt;&lt;S.top&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;S.data[S.top]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;endl;</span><br><span class="line">        S.top--;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqStack S;</span><br><span class="line">    <span class="built_in">InitStack</span>(S);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前栈空&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前栈非空！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ElemType e1;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;&quot;请输入入栈元素的值：&quot;;</span></span><br><span class="line">    <span class="comment">// cin&gt;&gt;e1;</span></span><br><span class="line">    <span class="comment">// if(Push(S,e1))</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;&quot;新元素入栈成功！&quot;&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// else</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;&quot;新元素入栈失败！&quot;&lt;&lt;endl; </span></span><br><span class="line"></span><br><span class="line">    ElemType e1;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入入栈元素的值：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;e1;</span><br><span class="line">    <span class="keyword">while</span>(e1!=<span class="number">9999</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Push</span>(S,e1))</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;新元素入栈成功！&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;新元素入栈失败！&quot;</span>&lt;&lt;endl; </span><br><span class="line">        cin&gt;&gt;e1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PrintSqStack</span>(S);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ElemType e2=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">GetTop</span>(S,e2))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;读取栈顶元素成功，当前栈顶元素值为:&quot;</span>&lt;&lt;e2&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;栈已空，读取栈顶元素失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    ElemType e3=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Pop</span>(S,e3))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;栈顶元素出栈成功，出栈元素值为：&quot;</span>&lt;&lt;e3&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;栈已空，栈顶元素出栈失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    ElemType e4=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">GetTop</span>(S,e3))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;读取栈顶元素成功，当前栈顶元素值为:&quot;</span>&lt;&lt;e2&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;栈已空，读取栈顶元素失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 顺序栈的基本操作（初始化栈顶指针为0） </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void InitStack(SeqStack&amp; S);//1.初始化顺序栈</span></span><br><span class="line"><span class="comment">// bool StackEmpty(SeqStack S);//2.判空</span></span><br><span class="line"><span class="comment">// bool Push(SeqStack&amp; S, ElemType x);//3.入栈</span></span><br><span class="line"><span class="comment">// bool Pop(SeqStack&amp; S, ElemType&amp; x);//4.出栈</span></span><br><span class="line"><span class="comment">// bool GetTop(SeqStack S, ElemType&amp; x);//5.读取栈顶元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitSqStack</span><span class="params">(SqStack &amp;S)</span></span>&#123;</span><br><span class="line">    S.top=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push</span><span class="params">(SqStack &amp;S,ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==MaxSize)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    S.data[S.top]=e;</span><br><span class="line">    S.top++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop</span><span class="params">(SqStack &amp;S,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    S.top=S.top<span class="number">-1</span>;</span><br><span class="line">    x=S.data[S.top];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetTop</span><span class="params">(SqStack &amp;S,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=S.data[--S.top];</span><br><span class="line">    S.top++;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintSqStack</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;遍历栈:&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(S.top!=<span class="number">0</span>)&#123;</span><br><span class="line">        S.top--;</span><br><span class="line">        cout&lt;&lt;S.data[S.top]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqStack S;</span><br><span class="line">    <span class="built_in">InitSqStack</span>(S);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前栈为空&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前栈非空！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    ElemType e1;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入入栈元素的值：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;e1;</span><br><span class="line">    <span class="keyword">while</span>(e1!=<span class="number">9999</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Push</span>(S,e1))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;新元素入栈成功！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;新元素入栈失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;e1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ElemType e2=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Pop</span>(S,e2))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;栈顶元素出栈成功！值为：&quot;</span>&lt;&lt;e2&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;栈顶元素出栈失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    ElemType e3=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">GetTop</span>(S,e3))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;成功获取栈顶元素，值为：&quot;</span>&lt;&lt;e3&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;获取栈顶元素失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">PrintSqStack</span>(S);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 共享栈的基础操作 (初始化栈1栈顶指针为-1，栈2栈顶指针为MaxSize) </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void InitSqStack(SqStack&amp; S);//1.初始化共享栈</span></span><br><span class="line"><span class="comment">// bool Stack1Empty(SqStack S);//2. 1号栈判空</span></span><br><span class="line"><span class="comment">// bool Stack2Empty(SqStack S);//2. 2号栈判空</span></span><br><span class="line"><span class="comment">// bool Push1(SqStack&amp; S, ElemType x);//3. 1号栈入栈</span></span><br><span class="line"><span class="comment">// bool Push2(SqStack&amp; S, ElemType x);//4. 2号栈入栈</span></span><br><span class="line"><span class="comment">// bool Pop1(SqStack&amp; S, ElemType&amp; x);//5. 1号栈出栈</span></span><br><span class="line"><span class="comment">// bool Pop2(SqStack&amp; S, ElemType&amp; x);//6. 2号栈出栈</span></span><br><span class="line"><span class="comment">// bool GetTop1(SqStack S, ElemType&amp; x);//7. 1号栈读取栈顶元素</span></span><br><span class="line"><span class="comment">// bool GetTop2(SqStack S, ElemType&amp; x);//8. 2号栈读取栈顶元素</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> top1;</span><br><span class="line">    <span class="type">int</span> top2;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitSqStack</span><span class="params">(SqStack&amp; S)</span></span>&#123;                <span class="comment">//1.初始化共享栈</span></span><br><span class="line">    S.top1=<span class="number">-1</span>;</span><br><span class="line">    S.top2=MaxSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Stack1Empty</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top1==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Stack2Empty</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top2==MaxSize)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push1</span><span class="params">(SqStack&amp; S, ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top1+<span class="number">1</span>==S.top2)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    S.top1++;</span><br><span class="line">    S.data[S.top1]=x;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;S.top:&quot;</span>&lt;&lt;S.top1&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push2</span><span class="params">(SqStack&amp; S, ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top1+<span class="number">1</span>==S.top2)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    S.top2--;            <span class="comment">//数组长度为MaxSize，但是数组下标最大为（MaxSize-1）</span></span><br><span class="line">    S.data[S.top2]=x;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;S.top2：&quot;</span>&lt;&lt;S.top2&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop1</span><span class="params">(SqStack&amp; S, ElemType&amp; x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top1==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=S.data[S.top1];</span><br><span class="line">    S.top1--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop2</span><span class="params">(SqStack&amp; S, ElemType&amp; x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top2==MaxSize)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=S.data[S.top2];</span><br><span class="line">    S.top2++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetTop1</span><span class="params">(SqStack S, ElemType&amp; x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top1==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=S.data[S.top1++];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetTop2</span><span class="params">(SqStack S, ElemType&amp; x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top2==MaxSize)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=S.data[S.top2--];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintStack1</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top1==<span class="number">-1</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;共享栈1为空!!!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;遍历共享栈1：&quot;</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(S.top1!=<span class="number">-1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;S.data[S.top1]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        S.top1--;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintStack2</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top2==MaxSize)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;共享栈2为空!!!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;遍历共享栈1：&quot;</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(S.top2!=MaxSize)&#123;</span><br><span class="line">        cout&lt;&lt;S.data[S.top2]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        S.top2++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqStack S;</span><br><span class="line">    <span class="built_in">InitSqStack</span>(S);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Stack1Empty</span>(S)&amp;&amp;<span class="built_in">Stack2Empty</span>(S))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前栈为空！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前栈非空！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ElemType e1;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;在共享栈1中插入元素：请输入要插入的值：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;e1;</span><br><span class="line">    <span class="keyword">while</span>(e1!=<span class="number">9999</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Push1</span>(S,e1))</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;共享栈1中插入成功！&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;共享栈1插入元素失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;e1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ElemType e2;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;在共享栈2中插入元素：请输入要插入的值：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;e2;</span><br><span class="line">    <span class="keyword">while</span>(e2!=<span class="number">9999</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Push2</span>(S,e2))</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;共享栈2中插入成功！&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;共享栈2插入元素失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;e2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ElemType e3=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Pop1</span>(S,e3))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;共享栈1栈顶元素出栈成功：值为：&quot;</span>&lt;&lt;e3&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;共享栈1栈顶元素出栈失败!!!&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    ElemType e4=MaxSize;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Pop2</span>(S,e4))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;共享栈2栈顶元素出栈成功：值为：&quot;</span>&lt;&lt;e4&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;共享栈2栈顶元素出栈失败!!!&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    ElemType e5=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">GetTop1</span>(S,e5))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;成功获取栈顶元素！值为：&quot;</span>&lt;&lt;e5&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;获取栈顶元素失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    ElemType e6=MaxSize;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">GetTop2</span>(S,e6))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;成功获取栈顶元素！值为：&quot;</span>&lt;&lt;e6&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;获取栈顶元素失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PrintStack1</span>(S);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PrintStack2</span>(S);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 链栈无头结点 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// bool InitLinkStack(LiStack&amp; S);//1.初始化链栈</span></span><br><span class="line"><span class="comment">// bool LiStackEmpty(LiStack S);//2.判空</span></span><br><span class="line"><span class="comment">// bool Push(LiStack&amp; S, ElemType e);//3.入栈</span></span><br><span class="line"><span class="comment">// bool Pop(LiStack&amp; S, ElemType&amp; e);//4.出栈</span></span><br><span class="line"><span class="comment">// bool GetTop(LiStack S, ElemType&amp; e);//5.读取栈顶元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LinkStackNode</span>&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LinkStackNode</span>* next;</span><br><span class="line">&#125;*LiStack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitLinkStack</span><span class="params">(LiStack&amp; S)</span></span>&#123;</span><br><span class="line">    S=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">LiStackEmpty</span><span class="params">(LiStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(S==<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push</span><span class="params">(LiStack&amp; S, ElemType e)</span></span>&#123;</span><br><span class="line">    LiStack p=(LiStack)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LiStack));</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p-&gt;data=e;</span><br><span class="line">    p-&gt;next=S;</span><br><span class="line">    S=p;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.出栈操作</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop</span><span class="params">(LiStack&amp; S, ElemType&amp; e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//栈空，报错</span></span><br><span class="line">LiStack p=S;</span><br><span class="line">e = p-&gt;data;</span><br><span class="line">S = p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetTop</span><span class="params">(LiStack S, ElemType&amp; e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e=S-&gt;data;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintfLiStack</span><span class="params">(LiStack S)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;遍历链栈：&quot;</span>;</span><br><span class="line">    LiStack p=S;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LiStack S;</span><br><span class="line">    <span class="built_in">InitLinkStack</span>(S);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">LiStackEmpty</span>(S))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;栈为空！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;栈非空!!!&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    ElemType e1;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入插入的元素：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;e1;</span><br><span class="line">    <span class="keyword">while</span>(e1!=<span class="number">9999</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Push</span>(S,e1))</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;元素入栈成功！！！值为：&quot;</span>&lt;&lt;e1&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;元素入栈失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;e1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PrintfLiStack</span>(S);</span><br><span class="line"></span><br><span class="line">    ElemType e2=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Pop</span>(S,e2))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;返回栈顶元素值为：&quot;</span>&lt;&lt;e2&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;返回栈顶元素值失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    ElemType e3=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">GetTop</span>(S,e3))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;读取栈顶元素值成功！！！值为：&quot;</span>&lt;&lt;e3&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;读取栈顶元素值失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">     <span class="built_in">PrintfLiStack</span>(S);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 链栈带头结点 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// bool InitLinkStack(LiStack&amp; S);//1.初始化链栈</span></span><br><span class="line"><span class="comment">// bool LiStackEmpty(LiStack S);//2.判空</span></span><br><span class="line"><span class="comment">// bool Push(LiStack&amp; S, ElemType e);//3.入栈</span></span><br><span class="line"><span class="comment">// bool Pop(LiStack&amp; S, ElemType&amp; e);//4.出栈</span></span><br><span class="line"><span class="comment">// bool GetTop(LiStack S, ElemType&amp; e);//5.读取栈顶元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LinkStackNode</span>&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LinkStackNode</span> *next;</span><br><span class="line">&#125;SNode,*LiStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitLinkStack</span><span class="params">(LiStack &amp;S)</span></span>&#123;</span><br><span class="line">    S=(SNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(SNode));</span><br><span class="line">    <span class="keyword">if</span>(S==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    S-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">LiStackEmpty</span><span class="params">(LiStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(S-&gt;next!=<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push</span><span class="params">(LiStack &amp;S,ElemType e)</span></span>&#123;</span><br><span class="line">    SNode *p=(SNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(SNode));</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p-&gt;data=e;</span><br><span class="line">    p-&gt;next=S-&gt;next;</span><br><span class="line">    S-&gt;next=p;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop</span><span class="params">(LiStack &amp;S,ElemType &amp;e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    SNode *q=S-&gt;next;</span><br><span class="line">    e=q-&gt;data;</span><br><span class="line">    S-&gt;next=q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetTop</span><span class="params">(LiStack S,ElemType &amp;e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e=S-&gt;next-&gt;data;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintListack</span><span class="params">(LiStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;遍历链栈：&quot;</span>;</span><br><span class="line">    SNode *p=S-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LiStack S;</span><br><span class="line">    <span class="built_in">InitLinkStack</span>(S);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">LiStackEmpty</span>(S))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;链栈非空&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;链栈为空&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    ElemType e1;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入您要插入元素的值：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;e1;</span><br><span class="line">    <span class="keyword">while</span>(e1!=<span class="number">9999</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Push</span>(S,e1))</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;元素入栈成功！值为&quot;</span>&lt;&lt;e1&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;元素入栈失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;e1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ElemType e2=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Pop</span>(S,e2))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;元素出栈成功！值为：&quot;</span>&lt;&lt;e2&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;元素出栈失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    ElemType e3=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">GetTop</span>(S,e3))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;栈顶元素读取成功！！！值为：&quot;</span>&lt;&lt;e3&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;栈顶元素读取失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PrintListack</span>(S);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 栈的应用-------括号匹配 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void InitStack(SeqStack&amp; S);//1.初始化栈</span></span><br><span class="line"><span class="comment">// bool StackEmpty(SeqStack S);//2.判空</span></span><br><span class="line"><span class="comment">// bool Push(SeqStack&amp; S, ElemType x);//3.入栈</span></span><br><span class="line"><span class="comment">// bool Pop(SeqStack&amp; S, ElemType&amp; x);//4.出栈</span></span><br><span class="line"><span class="comment">// bool BreacketCheck(char str[],int length)     //5.括号匹配逻辑代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELemType char</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ELemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span>&#123;</span><br><span class="line">    S.top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S.top==<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push</span><span class="params">(SqStack &amp;S,ELemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==MaxSize<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    S.top++;</span><br><span class="line">    S.data[S.top]=x;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop</span><span class="params">(SqStack &amp;S,ELemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=S.data[S.top];</span><br><span class="line">    S.top--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">BreacketCheck</span><span class="params">(<span class="type">char</span> str[],<span class="type">int</span> length)</span></span>&#123;</span><br><span class="line">    SqStack S;</span><br><span class="line">    <span class="built_in">InitStack</span>(S);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">&#x27;(&#x27;</span>||str[i]==<span class="string">&#x27;[&#x27;</span>||str[i]==<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;&quot;进栈：&quot;&lt;&lt;str[i]&lt;&lt;endl;</span></span><br><span class="line">            <span class="built_in">Push</span>(S,str[i]);&#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">char</span> topElem;</span><br><span class="line">            <span class="built_in">Pop</span>(S,topElem);</span><br><span class="line">            <span class="comment">// cout&lt;&lt;&quot;TopElem:&quot;&lt;&lt;topElem&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span>(str[i]==<span class="string">&#x27;)&#x27;</span>&amp;&amp;topElem!=<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(str[i]==<span class="string">&#x27;]&#x27;</span>&amp;&amp;topElem!=<span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(str[i]==<span class="string">&#x27;&#125;&#x27;</span>&amp;&amp;topElem!=<span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">StackEmpty</span>(S);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> s1[] = &#123;<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;)&#x27;</span>&#125;;<span class="comment">//成功匹配</span></span><br><span class="line"><span class="type">char</span> s2[] = &#123;<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>,<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;)&#x27;</span>&#125;;<span class="comment">//匹配失败</span></span><br><span class="line">    <span class="comment">// char str[MaxSize];</span></span><br><span class="line">    <span class="comment">// cin&gt;&gt;str;</span></span><br><span class="line">    <span class="comment">// L=strlen(str);</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">BreacketCheck</span>(s1,<span class="number">8</span>))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;匹配成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;匹配失败&quot;</span>&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><details class="folding-tag" pink><summary> 队列 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 循环队列1------（顺序存储） </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void InitQueue(SqQueue &amp;Q)                      //初始化队列</span></span><br><span class="line"><span class="comment">// bool QueueEmpty(SqQueue Q)                      //队列判空</span></span><br><span class="line"><span class="comment">// bool EnQueue(SqQueue &amp;Q,ElemType x)             //入队</span></span><br><span class="line"><span class="comment">// bool ExQueue(SqQueue &amp;Q,ElemType &amp;x)            //出队</span></span><br><span class="line"><span class="comment">// bool GetHead(SqQueue Q,ElemType &amp;x)             //获取队头元素</span></span><br><span class="line"><span class="comment">// void PrintQueue(SqQueue Q)                      //遍历队列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> front,rear;</span><br><span class="line">&#125;SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    Q.front=Q.rear=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QueueEmpty</span><span class="params">(SqQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q,ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%MaxSize==Q.front)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    Q.data[Q.rear]=x;</span><br><span class="line">    Q.rear=(Q.rear+<span class="number">1</span>)%MaxSize;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ExQueue</span><span class="params">(SqQueue &amp;Q,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=Q.data[Q.front];</span><br><span class="line">    Q.front=(Q.front+<span class="number">1</span>)%MaxSize;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetHead</span><span class="params">(SqQueue Q,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=Q.data[Q.front];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintQueue</span><span class="params">(SqQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;遍历队列：&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(Q.front!=Q.rear)&#123;</span><br><span class="line">        cout&lt;&lt;Q.data[Q.front]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        Q.front=(Q.front+<span class="number">1</span>)%MaxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqQueue Q;</span><br><span class="line">    <span class="built_in">InitQueue</span>(Q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">QueueEmpty</span>(Q))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;队列为空&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;队列非空&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    ElemType e1;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入要入队的元素：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;e1;</span><br><span class="line">    <span class="keyword">while</span>(e1!=<span class="number">9999</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">EnQueue</span>(Q,e1))</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;元素入队成功！值为：&quot;</span>&lt;&lt;e1&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;元素入队失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;e1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PrintQueue</span>(Q);</span><br><span class="line"></span><br><span class="line">    ElemType e2=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">GetHead</span>(Q,e2))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;读取队头元素成功！值为：&quot;</span>&lt;&lt;e2&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;读取队头元素失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    ElemType e3=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">ExQueue</span>(Q,e3))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;队头元素出队成功！值为：&quot;</span>&lt;&lt;e3&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;队头元素出队失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PrintQueue</span>(Q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 循环队列2------（顺序存储） </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void InitQueue(SqQueue&amp; Q);//1.初始化队列</span></span><br><span class="line"><span class="comment">// bool QueueEmpty(SqQueue Q);//2.判空</span></span><br><span class="line"><span class="comment">// bool EnQueue(SqQueue&amp; Q, ElemType x);//3.入队</span></span><br><span class="line"><span class="comment">// bool ExQueue(SqQueue&amp; Q, ElemType&amp; x);//4.出队</span></span><br><span class="line"><span class="comment">// bool GetHead(SqQueue Q, ElemType&amp; x);//5.获取队头元素</span></span><br><span class="line"><span class="comment">// void PrintQueue(SqQueue Q);                  //6.遍历队列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> front,rear;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">&#125;SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    Q.size=<span class="number">0</span>;</span><br><span class="line">    Q.front=Q.rear=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QueueEmpty</span><span class="params">(SqQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.size==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q,ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.size==MaxSize)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    Q.data[Q.rear]=x;</span><br><span class="line">    Q.rear=(Q.rear+<span class="number">1</span>)%MaxSize;</span><br><span class="line">    Q.size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ExQueue</span><span class="params">(SqQueue &amp;Q,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.size==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=Q.data[Q.front];</span><br><span class="line">    Q.front=(Q.front+<span class="number">1</span>)%MaxSize;</span><br><span class="line">    Q.size--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetHead</span><span class="params">(SqQueue Q,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.size==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=Q.data[Q.front];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintQueue</span><span class="params">(SqQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.size==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;遍历队列：&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(Q.front!=Q.rear)&#123;</span><br><span class="line">        cout&lt;&lt;Q.data[Q.front]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        Q.front=(Q.front+<span class="number">1</span>)%MaxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqQueue Q;</span><br><span class="line">    <span class="built_in">InitQueue</span>(Q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">QueueEmpty</span>(Q))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;队列为空&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;队列非空&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    ElemType e1;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入要入队的元素值：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;e1;</span><br><span class="line">    <span class="keyword">while</span>(e1!=<span class="number">9999</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">EnQueue</span>(Q,e1))</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;元素入队成功！值为：&quot;</span>&lt;&lt;e1&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;元素入队失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;e1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PrintQueue</span>(Q);</span><br><span class="line"></span><br><span class="line">    ElemType e2=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">ExQueue</span>(Q,e2))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;队头元素出队成功！值为：&quot;</span>&lt;&lt;e2&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;队头元素出队失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    ElemType e3=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">GetHead</span>(Q,e3))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;获取栈顶元素成功！值为：&quot;</span>&lt;&lt;e3&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span>   </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;获取栈顶元素失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PrintQueue</span>(Q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 循环队列3------（顺序存储） </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void InitQueue(SqQueue&amp; Q);//1.初始化队列</span></span><br><span class="line"><span class="comment">// bool QueueEmpty(SqQueue Q);//2.判空</span></span><br><span class="line"><span class="comment">// bool EnQueue(SqQueue&amp; Q, ElemType x);//3.入队</span></span><br><span class="line"><span class="comment">// bool ExQueue(SqQueue&amp; Q, ElemType&amp; x);//4.出队</span></span><br><span class="line"><span class="comment">// bool GetHead(SqQueue Q, ElemType&amp; x);//5.获取队头元素</span></span><br><span class="line"><span class="comment">// void PrintQueue(SqQueue Q);                  //6.遍历队列</span></span><br><span class="line"><span class="comment">//引入辅助变量tag表示最后一次操作是入队还是出队，为判空判满提供方便且节省一个队列单元</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> front,rear;</span><br><span class="line">    <span class="type">int</span> tag;</span><br><span class="line">&#125;SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    Q.front=<span class="number">0</span>;</span><br><span class="line">    Q.rear=MaxSize<span class="number">-1</span>;</span><br><span class="line">    Q.tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QueueEmpty</span><span class="params">(SqQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.tag==<span class="number">0</span>&amp;&amp;(Q.rear + <span class="number">1</span>) % MaxSize == Q.front)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q,ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%MaxSize==Q.front&amp;&amp;Q.tag==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    Q.rear=(Q.rear+<span class="number">1</span>)%MaxSize;</span><br><span class="line">    Q.data[Q.rear]=x;</span><br><span class="line">    Q.tag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ExQueue</span><span class="params">(SqQueue &amp;Q,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%MaxSize==Q.front&amp;&amp;Q.tag==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=Q.data[Q.front];</span><br><span class="line">    Q.front=(Q.front+<span class="number">1</span>)%MaxSize;</span><br><span class="line">    Q.tag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetHead</span><span class="params">(SqQueue &amp;Q,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%MaxSize==Q.front&amp;&amp;Q.tag==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=Q.data[Q.front];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintQueue</span><span class="params">(SqQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%MaxSize==Q.front&amp;&amp;Q.tag==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;遍历队列：&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(Q.front!=Q.rear)&#123;</span><br><span class="line">        cout&lt;&lt;Q.data[Q.front]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        Q.front=(Q.front+<span class="number">1</span>)%MaxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqQueue Q;</span><br><span class="line">    <span class="built_in">InitQueue</span>(Q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">QueueEmpty</span>(Q))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;队列为空！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;队列非空！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    ElemType e1;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入入队的元素值：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;e1;</span><br><span class="line">    <span class="keyword">while</span>(e1!=<span class="number">9999</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">EnQueue</span>(Q,e1))</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;元素入队成功！值为：&quot;</span>&lt;&lt;e1&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span>    </span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;元素入队失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;e1;            </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PrintQueue</span>(Q);</span><br><span class="line"></span><br><span class="line">    ElemType e2=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">ExQueue</span>(Q,e2))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;队头元素出队成功！值为：&quot;</span>&lt;&lt;e2&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;队头元素出队失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    ElemType e3=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">GetHead</span>(Q,e3))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;读取队头元素成功！值为：&quot;</span>&lt;&lt;e3&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;读取队头元素失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PrintQueue</span>(Q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 链队列（无头结点） </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void InitQueue(LinkQueue &amp;Q)                                //1.初始化队列</span></span><br><span class="line"><span class="comment">// bool QueueEmpty(LinkQueue Q)                               //2.判空</span></span><br><span class="line"><span class="comment">// bool EnQueue(LinkQueue &amp;Q,ElemType x)                     //3.入队</span></span><br><span class="line"><span class="comment">// bool ExQueue(LinkQueue &amp;Q,ElemType &amp;x)                   //4.出队</span></span><br><span class="line"><span class="comment">// bool GetHead(LinkQueue Q,ElemType &amp;x)                   //5.获取队头元素</span></span><br><span class="line"><span class="comment">// void PrintQueue(LinkQueue &amp;Q)                          //6.遍历队列</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LinkNode</span>&#123;</span><br><span class="line">ElemType data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LinkNode</span> *next;</span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">LinkNode *front,*rear;</span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>&#123;</span><br><span class="line">Q.front=Q.rear=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QueueEmpty</span><span class="params">(LinkQueue Q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Q.front==<span class="literal">NULL</span>);</span><br><span class="line">        <span class="comment">//或者 return (Q.rear==NULL)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q,ElemType x)</span></span>&#123;     <span class="comment">//Consider two scenarios（first：当队列为空时，需要将队头指针和队尾指针同时指向新增结点，second：当队列非空时，需要将队尾指针指向的下一个结点值设为新增结点值，再将队尾指针指向新增结点）</span></span><br><span class="line">LinkNode *s=(LinkNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkNode));</span><br><span class="line"><span class="keyword">if</span>(s==<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">s-&gt;data=x;</span><br><span class="line">s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(Q.rear==<span class="literal">NULL</span>)</span><br><span class="line">Q.front=Q.rear=s;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">Q.rear-&gt;next=s;</span><br><span class="line">Q.rear=s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ExQueue</span><span class="params">(LinkQueue &amp;Q,ElemType &amp;x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Q.front==<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">LinkNode *p=Q.front;</span><br><span class="line">x=p-&gt;data;</span><br><span class="line">Q.front=p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(Q.rear==p)</span><br><span class="line">Q.front=Q.rear=<span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetHead</span><span class="params">(LinkQueue Q,ElemType &amp;x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Q.front==<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">LinkNode *p=Q.front;</span><br><span class="line">x=p-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Q.front==<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;遍历队列：&quot;</span>;</span><br><span class="line">LinkNode *p=Q.front;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">LinkQueue Q;</span><br><span class="line"><span class="built_in">InitQueue</span>(Q);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">QueueEmpty</span>(Q))</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;队列为空！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;队列非空！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">ElemType e1;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入入队的元素值：&quot;</span>;</span><br><span class="line">cin&gt;&gt;e1;</span><br><span class="line"><span class="keyword">while</span>(e1!=<span class="number">9999</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">EnQueue</span>(Q,e1))</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;新元素入队成功！值为：&quot;</span>&lt;&lt;e1&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;新元素入队失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line">cin&gt;&gt;e1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintQueue</span>(Q);</span><br><span class="line"></span><br><span class="line">ElemType e2=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">ExQueue</span>(Q,e2))</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;新元素出队成功！值为：&quot;</span>&lt;&lt;e2&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;新元素出队失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ElemType e3=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">GetHead</span>(Q,e3))</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;读取队头元素成功！！！值为：&quot;</span>&lt;&lt;e3&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;读取队头元素失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintQueue</span>(Q);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 链队列（带头结点） </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void InitQueue(LinkQueue &amp;Q)                                //1.初始化队列</span></span><br><span class="line"><span class="comment">// bool QueueEmpty(LinkQueue Q)                               //2.判空</span></span><br><span class="line"><span class="comment">// bool EnQueue(LinkQueue &amp;Q,ElemType x)                     //3.入队</span></span><br><span class="line"><span class="comment">// bool ExQueue(LinkQueue &amp;Q,ElemType &amp;x)                   //4.出队</span></span><br><span class="line"><span class="comment">// bool GetHead(LinkQueue Q,ElemType &amp;x)                   //5.获取队头元素</span></span><br><span class="line"><span class="comment">// void PrintQueue(LinkQueue &amp;Q)                          //6.遍历队列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElmeType int </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LinkNode</span>&#123;</span><br><span class="line">    ElmeType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LinkNode</span> *next;</span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    LinkNode *front,*rear;</span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    Q.front=Q.rear=(LinkNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkNode));        <span class="comment">//初始化时front，rear都指向头结点</span></span><br><span class="line">    Q.front-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">EmptyQueue</span><span class="params">(LinkQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Q.front==Q.rear);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q,ElmeType x)</span></span>&#123;</span><br><span class="line">    LinkNode *s=(LinkNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkNode));</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;data=x;</span><br><span class="line">    s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    Q.rear-&gt;next=s;</span><br><span class="line">    Q.rear=s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ExQueue</span><span class="params">(LinkQueue &amp;Q,ElmeType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LinkNode *p=Q.front-&gt;next;</span><br><span class="line">    x=p-&gt;data;</span><br><span class="line">    Q.front-&gt;next=p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(Q.front==p)</span><br><span class="line">        Q.rear=Q.front;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetHead</span><span class="params">(LinkQueue Q,ElmeType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LinkNode *s=Q.front-&gt;next;</span><br><span class="line">    x=s-&gt;data;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintQueue</span><span class="params">(LinkQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;遍历队列：&quot;</span>;</span><br><span class="line">    LinkNode *s=Q.front-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(s!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout&lt;&lt;s-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        s=s-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">LinkQueue Q;</span><br><span class="line"><span class="built_in">InitQueue</span>(Q);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">EmptyQueue</span>(Q))</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;队列为空！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;队列非空！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">ElmeType e1;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入入队的元素值：&quot;</span>;</span><br><span class="line">cin&gt;&gt;e1;</span><br><span class="line"><span class="keyword">while</span>(e1!=<span class="number">9999</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">EnQueue</span>(Q,e1))</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;新元素入队成功！值为：&quot;</span>&lt;&lt;e1&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;新元素入队失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line">cin&gt;&gt;e1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintQueue</span>(Q);</span><br><span class="line"></span><br><span class="line">ElmeType e2=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">ExQueue</span>(Q,e2))</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;新元素出队成功！值为：&quot;</span>&lt;&lt;e2&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;新元素出队失败！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ElmeType e3=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">GetHead</span>(Q,e3))</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;读取队头元素成功！！！值为：&quot;</span>&lt;&lt;e3&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;读取队头元素失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintQueue</span>(Q);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>              </div>            </details><h1 id="串-String"><a href="#串-String" class="headerlink" title="串-String"></a>串-String</h1><details class="folding-tag" yellow><summary> 串 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 串的顺序存储(静态分配) </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void InitString(SString&amp; S);//1.初始化</span></span><br><span class="line"><span class="comment">// int StrLength(SString S);//2.串长</span></span><br><span class="line"><span class="comment">// void ClearString(SString&amp; S);//3.清空</span></span><br><span class="line"><span class="comment">// bool StrEmpty(SString S);//4.判空</span></span><br><span class="line"><span class="comment">// void StrAssign(SString&amp; T, char s[]);//5.赋值</span></span><br><span class="line"><span class="comment">// void StrCopy(SString&amp; T, SString S);//6.复制</span></span><br><span class="line"><span class="comment">// void Concat(SString&amp; T, SString S1, SString S2);//7.连接</span></span><br><span class="line"><span class="comment">// bool SubString(SString&amp; Sub, SString S, int pos, int len);//8.求子串</span></span><br><span class="line"><span class="comment">// int StrCompare(SString S, SString T);//9.比较</span></span><br><span class="line"><span class="comment">// int Index(SString S, SString T);//10.定位</span></span><br><span class="line"><span class="comment">// void PrintString(SString S);//11.遍历</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLEN 255</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line"><span class="type">char</span> ch[MAXLEN];</span><br><span class="line"><span class="type">int</span> length;</span><br><span class="line">&#125;SString;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitString</span><span class="params">(SString &amp;S)</span></span>&#123;</span><br><span class="line">S.length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StrLength</span><span class="params">(SString S)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> S.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ClearString</span><span class="params">(SString &amp;S)</span></span>&#123;</span><br><span class="line">S.length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StrEmpty</span><span class="params">(SString S)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (S.length==<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrAssign</span><span class="params">(SString &amp;T,<span class="type">char</span> S[])</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(S[i])</span><br><span class="line">&#123;</span><br><span class="line">T.ch[++T.length]=S[i];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrCopy</span><span class="params">(SString &amp;T,SString S)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=S.length;i++)&#123;</span><br><span class="line">T.ch[i]=S.ch[i];</span><br><span class="line">&#125;</span><br><span class="line">T.length=S.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Concat</span><span class="params">(SString &amp;T,SString S1,SString S2)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=S1.length;i++)&#123;</span><br><span class="line">T.ch[i]=S1.ch[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=S2.length;i++)&#123;</span><br><span class="line">T.ch[i+S1.length]=S2.ch[i];</span><br><span class="line">&#125;</span><br><span class="line">T.length=S1.length+S2.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SubString</span><span class="params">(SString &amp;Sub,SString S,<span class="type">int</span> pos,<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pos+len<span class="number">-1</span>&gt;S.length)                 <span class="comment">//子串从pos位置开始，长度为len</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=pos;i&lt;pos+len;i++)&#123;</span><br><span class="line">Sub.ch[i-pos+<span class="number">1</span>]=S.ch[i];</span><br><span class="line">&#125;</span><br><span class="line">Sub.length=len;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StrCompare</span><span class="params">(SString S,SString T)</span></span>&#123;<span class="comment">//因为有三种情况，&gt;,&lt;,=：所以用int值返回，bool只能返回两种类型</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;S.length&amp;&amp;i&lt;T.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(S.ch[i]!=T.ch[i])</span><br><span class="line"><span class="keyword">return</span> S.ch[i]-T.ch[i];            <span class="comment">//如果两个数不相等，则比较两个数的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> S.length-T.length;               <span class="comment">//如果扫描过的字符都相同，则比较谁的长度更长</span></span><br><span class="line">&#125;           </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Index</span><span class="params">(SString S,SString T)</span></span>&#123;     <span class="comment">//定位操作：若主串中存在于串T值相同的子串，则返回它在主串中第一次出现的位置，否则函数值为0，即不存在</span></span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>,n=<span class="built_in">StrLength</span>(S),m=<span class="built_in">StrLength</span>(T);</span><br><span class="line">SString Sub;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n-m+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">SubString</span>(Sub,S,i,m);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">StrCompare</span>(Sub,T)!=<span class="number">0</span>)</span><br><span class="line">++i;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintString</span><span class="params">(SString S)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=S.length;i++)&#123;</span><br><span class="line">cout&lt;&lt;S.ch[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*1、赋值操作*/</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;赋值操作S1--&quot;</span>&lt;&lt;endl;</span><br><span class="line">    SString S1;</span><br><span class="line">    <span class="built_in">InitString</span>(S1);</span><br><span class="line">    <span class="type">char</span> ch[]=<span class="string">&quot;321&quot;</span>;</span><br><span class="line">    <span class="built_in">StrAssign</span>(S1,ch);</span><br><span class="line">    <span class="built_in">PrintString</span>(S1);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;复制操作S2--&quot;</span>&lt;&lt;endl;</span><br><span class="line">    SString S2;</span><br><span class="line">    <span class="built_in">StrCopy</span>(S2,S1);</span><br><span class="line">    <span class="built_in">PrintString</span>(S2);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;联接操作S3--&quot;</span>&lt;&lt;endl;</span><br><span class="line">    SString S3;</span><br><span class="line">    <span class="built_in">Concat</span>(S3,S1,S2);</span><br><span class="line">    <span class="built_in">PrintString</span>(S3);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;求子串操作S4--&quot;</span>&lt;&lt;endl;</span><br><span class="line">    SString S4;</span><br><span class="line">    <span class="type">int</span> pos,len;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入起点和长度：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;pos&gt;&gt;len;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">SubString</span>(S4,S3,pos,len))&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;所求子串为：&quot;</span>;</span><br><span class="line">        <span class="built_in">PrintString</span>(S4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;子串范围越界！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;比较操作--&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">StrCompare</span>(S1,S2)==<span class="number">0</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;S1=S2!&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">StrCompare</span>(S1,S2)&gt;<span class="number">0</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;S1&gt;S2&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">StrCompare</span>(S1,S2)&lt;<span class="number">0</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;S1&lt;S2&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;定位操作--&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Index</span>(S3,S4)==<span class="number">0</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;S4不是S3的子串！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;子串S4在S3中的位置为：&quot;</span>&lt;&lt;<span class="built_in">Index</span>(S3,S4)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 串的顺序存储(动态分配) </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void InitString(HString&amp; S);//1.初始化</span></span><br><span class="line"><span class="comment">// void IncreaseSize(HString&amp; S, int len);//2.扩容</span></span><br><span class="line"><span class="comment">// int StrLength(HString S);//3.串长</span></span><br><span class="line"><span class="comment">// void ClearString(HString&amp; S);//4.清空</span></span><br><span class="line"><span class="comment">// bool StrEmpty(HString S);//5.判空</span></span><br><span class="line"><span class="comment">// void StrAssign(HString&amp; T, char s[]);//6.赋值</span></span><br><span class="line"><span class="comment">// void StrCopy(HString&amp; T, HString S);//7.复制</span></span><br><span class="line"><span class="comment">// void Concat(HString&amp; T, HString S1, HString S2);//8.连接</span></span><br><span class="line"><span class="comment">// bool SubString(HString&amp; Sub, HString S, int pos, int len);//9.求子串</span></span><br><span class="line"><span class="comment">// int StrCompare(HString S, HString T);//10.比较</span></span><br><span class="line"><span class="comment">// int Index(HString S, HString T);//11.定位</span></span><br><span class="line"><span class="comment">// void DestroyString(HString&amp; S);//12.销毁</span></span><br><span class="line"><span class="comment">// void PrintString(HString S);//13.遍历</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLEN 255</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">char</span> *ch;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;HString;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitHString</span><span class="params">(HString &amp;S)</span></span>&#123;</span><br><span class="line">    S.ch=(<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>)*MAXLEN);</span><br><span class="line">    S.length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void IncreaseSize(HString&amp; S, int len);//2.扩容</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IncreaseSize</span><span class="params">(HString &amp;S,<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> *p=S.ch;</span><br><span class="line">    S.ch=(<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>)*(MAXLEN+len));             </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=S.length;i++)&#123;                   <span class="comment">//将数据复制到新区域（时间开销大）</span></span><br><span class="line">        S.ch[i]=p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    S.length+=len;                      <span class="comment">//串的长度增加len</span></span><br><span class="line">    <span class="built_in">free</span>(p);                           <span class="comment">//释放原来的内存空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int StrLength(HString S);//3.串长</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StrLength</span><span class="params">(HString S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void ClearString(HString&amp; S);//4.清空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ClearString</span><span class="params">(HString &amp;S)</span></span>&#123;</span><br><span class="line">    S.length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool StrEmpty(HString S);//5.判空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StrEmpty</span><span class="params">(HString S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(S.length==<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void StrAssign(HString&amp; T, char s[]);//6.赋值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrAssign</span><span class="params">(HString &amp;T,<span class="type">char</span> s[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[i])&#123;</span><br><span class="line">        T.ch[++T.length]=s[i];</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void StrCopy(HString&amp; T, HString S);//7.复制    </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrCopy</span><span class="params">(HString &amp;T,HString S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=S.length;i++)&#123;</span><br><span class="line">        T.ch[i]=S.ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    T.length=S.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void Concat(HString&amp; T, HString S1, HString S2);//8.连接</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Concat</span><span class="params">(HString &amp;T,HString S1,HString S2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=S1.length;i++)&#123;</span><br><span class="line">        T.ch[i]=S1.ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=S2.length;i++)&#123;</span><br><span class="line">        T.ch[i+S1.length]=S2.ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    T.length=S1.length+S2.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bool SubString(HString&amp; Sub, HString S, int pos, int len);//9.求子串</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SubString</span><span class="params">(HString &amp;Sub,HString S,<span class="type">int</span> pos,<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.length&lt;pos+len+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=pos;i&lt;pos+len;i++)&#123;</span><br><span class="line">        Sub.ch[i-pos+<span class="number">1</span>]=S.ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Sub.length=len;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int StrCompare(HString S, HString T);//10.比较</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StrCompare</span><span class="params">(HString S,HString T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=S.length&amp;&amp;i&lt;=T.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(S.ch[i]!=T.ch[i])</span><br><span class="line">            <span class="keyword">return</span> S.ch[i]-T.ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> S.length-T.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int Index(HString S, HString T);//11.定位</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Index</span><span class="params">(HString S,HString T)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,n=<span class="built_in">StrLength</span>(S),m=<span class="built_in">StrLength</span>(T);</span><br><span class="line">    HString Sub;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n-m+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">SubString</span>(Sub,S,i,m);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">StrCompare</span>(Sub,T)!=<span class="number">0</span>)</span><br><span class="line">            ++i;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void DestroyString(HString&amp; S);//12.销毁</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestroyString</span><span class="params">(HString &amp;S)</span></span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(S.ch);</span><br><span class="line">    S.ch=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void PrintString(HString S);//13.遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintString</span><span class="params">(HString S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.length==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=S.length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;S.ch[i]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;赋值操作-S1-&quot;</span>&lt;&lt;endl;</span><br><span class="line">    HString S1;</span><br><span class="line">    <span class="built_in">InitHString</span>(S1);</span><br><span class="line">    <span class="type">char</span> ch[]=<span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="built_in">StrAssign</span>(S1,ch);</span><br><span class="line">    <span class="built_in">PrintString</span>(S1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;复制操作S2--&quot;</span>&lt;&lt;endl;</span><br><span class="line">    HString S2;</span><br><span class="line">    <span class="built_in">InitHString</span>(S2);</span><br><span class="line">    <span class="built_in">StrCopy</span>(S2,S1);</span><br><span class="line">    <span class="built_in">PrintString</span>(S2);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;联接操作S3--&quot;</span>&lt;&lt;endl;</span><br><span class="line">    HString S3;</span><br><span class="line">    <span class="built_in">InitHString</span>(S3);</span><br><span class="line">    <span class="built_in">Concat</span>(S3,S1,S2);</span><br><span class="line">    <span class="built_in">PrintString</span>(S3);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;求子串操作S4--&quot;</span>&lt;&lt;endl;</span><br><span class="line">    HString S4;</span><br><span class="line">    <span class="built_in">InitHString</span>(S4);</span><br><span class="line">    <span class="type">int</span> pos,len;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入起点和操作--&quot;</span>;</span><br><span class="line">    cin&gt;&gt;pos&gt;&gt;len;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">SubString</span>(S4,S3,pos,len))&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;所求子串为:&quot;</span>;</span><br><span class="line">        <span class="built_in">PrintString</span>(S4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;子串范围越界!&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;比较操作--&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">StrCompare</span>(S1,S2)==<span class="number">0</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;S1=S2&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">StrCompare</span>(S1,S2)&lt;<span class="number">0</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;S1&lt;S2&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">StrCompare</span>(S1,S2)&gt;<span class="number">0</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;S1&gt;S2&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;定位操作--&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Index</span>(S3,S4)==<span class="number">0</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;S4不是S3的子串！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;子串S4在S3中的位置为：&quot;</span>&lt;&lt;<span class="built_in">Index</span>(S3,S4)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁操作</span></span><br><span class="line">    <span class="built_in">DestroyString</span>(S1);</span><br><span class="line">    <span class="built_in">DestroyString</span>(S2);</span><br><span class="line">    <span class="built_in">DestroyString</span>(S3);</span><br><span class="line">    <span class="built_in">DestroyString</span>(S4);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 串的模式匹配 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//朴素模式匹配算法：Index1与Index2的区别在于，Index1加入了一个辅助变量去记录回溯位置。</span></span><br><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void InitString(String&amp; S);//1.初始化</span></span><br><span class="line"><span class="comment">// void StrAssign(String&amp; T, char s[]);//2.赋值操作</span></span><br><span class="line"><span class="comment">// int Index1(String S, String T);//3.朴素(简单)模式匹配算法1</span></span><br><span class="line"><span class="comment">// int Index2(String S, String T);//4.朴素(简单)模式匹配算法2</span></span><br><span class="line"><span class="comment">// void get_next(String T, int next[]);//5.求next数组</span></span><br><span class="line"><span class="comment">// int Index_KMP(String S, String T, int next[]);//6.改进的模式匹配算法-KMP算法</span></span><br><span class="line"><span class="comment">// void get_nextval(String T, int nextval[]);//7.next数组的优化-求nxetval数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLEN 255</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">char</span> ch[MAXLEN];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;String;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitString</span><span class="params">(String &amp;S)</span></span>&#123;</span><br><span class="line">    S.length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrAssign</span><span class="params">(String &amp;T,<span class="type">char</span> s[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[i])&#123;</span><br><span class="line">        T.ch[++T.length]=s[i];</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//朴素(简单)模式匹配算法1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Index1</span><span class="params">(String S,String T)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> k=<span class="number">1</span>;                       <span class="comment">//用来记录是第几个子串</span></span><br><span class="line">    <span class="type">int</span> i=k,j=<span class="number">1</span>;                   <span class="comment">//i指向主串S中的当前匹配子串的位序，j指向模式串T的位序</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=S.length&amp;&amp;j&lt;=T.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(S.ch[i]==T.ch[j])&#123;       <span class="comment">//若当前模式串和子串同位序的值相等，对比下个位序</span></span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;                       <span class="comment">//若不相等，则对比下个子串</span></span><br><span class="line">            i=++k;                  <span class="comment">//k先指向下个子串，再把k当前所指的下标，即下个子串位序为1赋值给i</span></span><br><span class="line">            j=<span class="number">1</span>;                    <span class="comment">//j指向模式串的首位，重新匹配</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;T.length)              <span class="comment">//若是因为j&gt;T.length退出while循环,说明模式串扫描完毕，匹配成功，返回当前k所指子串</span></span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    <span class="keyword">else</span>                        <span class="comment">//若是因为j&gt;S.length退出while循环,当前扫描的子串为最后一个子串，且子串&lt;模式串，匹配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//朴素(简单)模式匹配算法2</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Index2</span><span class="params">(String S,String T)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=S.length&amp;&amp;j&lt;=T.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(S.ch[i]==T.ch[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;                    </span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            i=i-j+<span class="number">2</span>;                <span class="comment">//i-j+1反映的是当前是主串中的第几个子串，再+1说明i指向下个子串的首位</span></span><br><span class="line">            j=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;T.length)                 <span class="comment">//若是因为j&gt;T.length退出while循环，说明模式串扫描完毕，匹配成功，返回当前i-j+1</span></span><br><span class="line">        <span class="keyword">return</span> i-j+<span class="number">1</span>;              <span class="comment">//或者i-T.length;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;                  <span class="comment">//若是因为i&gt;S.length退出while循环，当前扫描的子串为最后一个子串，且子串&lt;模式串，匹配失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求next数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_next</span><span class="params">(String T,<span class="type">int</span> next[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;</span><br><span class="line">    next[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;T.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>||T.ch[i]==T.ch[j])&#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;                   <span class="comment">//若pi=pj；则next[j+1]=next[j]+1</span></span><br><span class="line">            next[i]=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j=next[j];         <span class="comment">//否则令j=next[j]，循环继续</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改进的模式匹配算法-KMP算法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Index_KMP</span><span class="params">(String S,String T,<span class="type">int</span> next[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=S.length&amp;&amp;j&lt;=T.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>||S.ch[i]==T.ch[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j=next[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;T.length)</span><br><span class="line">        <span class="keyword">return</span> i-j+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//next数组优化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_nextval</span><span class="params">(String T,<span class="type">int</span> nextval[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;</span><br><span class="line">    nextval[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;T.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>||T.ch[i]==T.ch[j])&#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">            <span class="keyword">if</span>(T.ch[i]!=T.ch[j])</span><br><span class="line">                nextval[i]=j;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nextval[i]=nextval[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j=nextval[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求nextval数组(王道书)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_nextval2</span><span class="params">(String T,<span class="type">int</span> next[],<span class="type">int</span> nextval[])</span></span>&#123;</span><br><span class="line">    nextval[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=T.length;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T.ch[next[j]]==T.ch[j])</span><br><span class="line">            nextval[j]=nextval[next[j]];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            nextval[j]=next[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintString</span><span class="params">(String S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.length==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=S.length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;S.ch[i]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String S1;</span><br><span class="line">    <span class="built_in">InitString</span>(S1);</span><br><span class="line"><span class="type">char</span> s1[] = <span class="string">&quot;zx123&quot;</span>;</span><br><span class="line">    <span class="built_in">StrAssign</span>(S1,s1);</span><br><span class="line">    <span class="built_in">PrintString</span>(S1);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    String S2;</span><br><span class="line">    <span class="built_in">InitString</span>(S2);</span><br><span class="line"><span class="type">char</span> s2[] = <span class="string">&quot;23&quot;</span>;</span><br><span class="line">    <span class="built_in">StrAssign</span>(S2,s2);</span><br><span class="line">    <span class="built_in">PrintString</span>(S2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*1、朴素模式匹配算法*/</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Index1</span>(S1,S2)==<span class="number">0</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;匹配失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;模式串在主串的位序为：&quot;</span>&lt;&lt;<span class="built_in">Index2</span>(S1,S2)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*2、朴素模式匹配算法优化-KMP算法*/</span></span><br><span class="line">    <span class="type">int</span> next[<span class="number">30</span>];</span><br><span class="line">    <span class="built_in">get_next</span>(S2,next);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Index_KMP</span>(S1,S2,next)==<span class="number">0</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;匹配失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;模式串在主串的位序为：&quot;</span>&lt;&lt;<span class="built_in">Index2</span>(S1,S2)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*3、优化KMP算法*/</span></span><br><span class="line">    <span class="type">int</span> nextval[<span class="number">30</span>];</span><br><span class="line">    <span class="built_in">get_next</span>(S2,nextval);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Index_KMP</span>(S1,S2,nextval)==<span class="number">0</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;匹配失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;模式串在主串的位序为：&quot;</span>&lt;&lt;<span class="built_in">Index2</span>(S1,S2)&lt;&lt;endl;        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="树-Tree"><a href="#树-Tree" class="headerlink" title="树-Tree"></a>树-Tree</h1><details class="folding-tag" yellow><summary> 树 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 二叉树链式存储 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void CreateBiTree(BiTree&amp; T);//1.先序建立二叉树</span></span><br><span class="line"><span class="comment">// int TreeDepth(BiTree T);//2.求树的深度</span></span><br><span class="line"><span class="comment">// void visit(BiTNode* q);//3-1.找中序前驱-访问结点</span></span><br><span class="line"><span class="comment">// void FindPre(BiTree T);//3-2.找中序前驱-中序遍历</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType char</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BiTNode</span>&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BiTNode</span> *lchild,*rchild;</span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree &amp;T)</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    cin&gt;&gt;c;</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        T=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        T=(BiTNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BiTNode));</span><br><span class="line">        T-&gt;data=c;</span><br><span class="line">        <span class="built_in">CreateBiTree</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">CreateBiTree</span>(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">TreeDepth</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="built_in">TreeDepth</span>(T-&gt;lchild);<span class="comment">//递归求出左子树深度</span></span><br><span class="line"><span class="type">int</span> r = <span class="built_in">TreeDepth</span>(T-&gt;rchild);<span class="comment">//递归求出右子树深度</span></span><br><span class="line"><span class="keyword">return</span> l &gt; r ? l + <span class="number">1</span> : r + <span class="number">1</span>;<span class="comment">//树的深度=Max(左子树深度，右子树深度)+1 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助全局变量，用于查找p的前驱</span></span><br><span class="line">BiTNode* p;<span class="comment">//p指向目标结点</span></span><br><span class="line">BiTNode* pre = <span class="literal">NULL</span>;<span class="comment">//pre指向当前访问结点的前驱</span></span><br><span class="line">BiTNode* <span class="keyword">final</span> = <span class="literal">NULL</span>;<span class="comment">//用于记录最终结果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(BiTNode *q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (q == p)<span class="comment">//当前访问结点刚好是p</span></span><br><span class="line"><span class="keyword">final</span> = pre;<span class="comment">//找到p的前驱，用final记录</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pre = q;<span class="comment">//pre指向当前访问的结点，继续递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FindPre</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">FindPre</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">visit</span>(T);</span><br><span class="line">        <span class="built_in">FindPre</span>(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BiTree T;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;先序二叉树:&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">CreateBiTree</span>(T);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;该二叉树的深度为：&quot;</span>&lt;&lt;<span class="built_in">TreeDepth</span>(T)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    p = T;</span><br><span class="line">    <span class="built_in">FindPre</span>(T);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;根结点的中序前驱为：&quot;</span>&lt;&lt;<span class="keyword">final</span>-&gt;data&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 二叉树的的先序中序后序遍历------递归实现 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void CreateBiTree(BiTree&amp; T);//1.先序建立二叉树</span></span><br><span class="line"><span class="comment">// void visit(BiTNode* p);//2.打印结点值</span></span><br><span class="line"><span class="comment">// void PreOrder(BiTree T);//3.先序遍历</span></span><br><span class="line"><span class="comment">// void InOrder(BiTree T);//4.中序遍历</span></span><br><span class="line"><span class="comment">// void PostOrder(BiTree T);//5.后序遍历</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType char</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树结点类型定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BiTNode</span> &#123;</span><br><span class="line">ElemType data;<span class="comment">//结点中的数据域</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BiTNode</span>* lchild, * rchild;<span class="comment">//左右孩子指针</span></span><br><span class="line">&#125;BiTNode, * BiTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.先序建立二叉树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree&amp; T)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line">cin&gt;&gt;c;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">T = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">T = (BiTNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BiTNode));</span><br><span class="line">T-&gt;data = c;</span><br><span class="line"><span class="built_in">CreateBiTree</span>(T-&gt;lchild);</span><br><span class="line"><span class="built_in">CreateBiTree</span>(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.打印结点-用于遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(BiTNode* p)</span> </span>&#123;</span><br><span class="line">cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.先序遍历（根-&gt;左-&gt;右）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">visit</span>(T);<span class="comment">//访问根结点</span></span><br><span class="line"><span class="built_in">PreOrder</span>(T-&gt;lchild);<span class="comment">//递归遍历左子树</span></span><br><span class="line"><span class="built_in">PreOrder</span>(T-&gt;rchild);<span class="comment">//递归遍历右子树</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.中序遍历（左-&gt;根-&gt;右）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">InOrder</span>(T-&gt;lchild);<span class="comment">//递归遍历左子树</span></span><br><span class="line"><span class="built_in">visit</span>(T);<span class="comment">//访问根结点</span></span><br><span class="line"><span class="built_in">InOrder</span>(T-&gt;rchild);<span class="comment">//递归遍历右子树</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.后序遍历（左-&gt;右-&gt;根）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">PostOrder</span>(T-&gt;lchild);<span class="comment">//递归遍历左子树</span></span><br><span class="line"><span class="built_in">PostOrder</span>(T-&gt;rchild);<span class="comment">//递归遍历右子树</span></span><br><span class="line"><span class="built_in">visit</span>(T);<span class="comment">//访问根结点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">BiTree T;<span class="comment">//声明一个二叉树</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*1、先序创建二叉树*/</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;先序创建二叉树:&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">CreateBiTree</span>(T);<span class="comment">//先序建立二叉树</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*2、先序遍历二叉树*/</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;先序遍历&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">PreOrder</span>(T);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*3、中序遍历二叉树*/</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;中序遍历&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">InOrder</span>(T);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*4、后序遍历二叉树*/</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;后序遍历&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">PostOrder</span>(T);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 二叉树的的先序中序后序遍历------非递归实现 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void CreateBiTree(BiTree&amp; T);//1.先序建立二叉树</span></span><br><span class="line"><span class="comment">// bool InitLinkStack(LiStack&amp; S);//2.初始化链栈</span></span><br><span class="line"><span class="comment">// bool LiStackEmpty(LiStack S);//3.判空</span></span><br><span class="line"><span class="comment">// bool Push(LiStack&amp; S, ElemType e);//4.入栈</span></span><br><span class="line"><span class="comment">// bool Pop(LiStack&amp; S, ElemType&amp; e);//5.出栈</span></span><br><span class="line"><span class="comment">// bool GetTop(LiStack S, ElemType&amp; e);//6.获取栈顶元素</span></span><br><span class="line"><span class="comment">// void visit(BiTNode* p);//7.打印结点值</span></span><br><span class="line"><span class="comment">// void PreOrder(BiTree T);//8.先序遍历</span></span><br><span class="line"><span class="comment">// void InOrder(BiTree T);//9.中序遍历</span></span><br><span class="line"><span class="comment">// void PostOrder(BiTree T);//10.后序遍历</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType BiTNode*</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType1 char</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树结点类型定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BiTNode</span>&#123;</span><br><span class="line">    ElemType1 data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BiTNode</span> *lchild,*rchild;</span><br><span class="line">&#125;BiTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助栈类型定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LinkStackNode</span>&#123;         <span class="comment">//链栈类型定义</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LinkStackNode</span> *next;      <span class="comment">//指针域</span></span><br><span class="line">&#125;SNode,*LiStack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreatBiTree</span><span class="params">(BiTree &amp;T)</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    cin&gt;&gt;c;</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        T=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        T=(BiTNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BiTNode));</span><br><span class="line">        T-&gt;data=c;</span><br><span class="line">        <span class="built_in">CreatBiTree</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">CreatBiTree</span>(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitLinkStack</span><span class="params">(LiStack &amp;S)</span></span>&#123;</span><br><span class="line">    S=(SNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(SNode));          <span class="comment">//分配头结点</span></span><br><span class="line">    <span class="keyword">if</span>(S==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;               <span class="comment">//内存不足，分配失败</span></span><br><span class="line">    S-&gt;next=<span class="literal">NULL</span>;                  <span class="comment">//头结点之后暂时没有结点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">LiStackEmpty</span><span class="params">(LiStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (S-&gt;next==<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push</span><span class="params">(LiStack &amp;S,ElemType e)</span></span>&#123;</span><br><span class="line">    SNode*p=(SNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(SNode));</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)     <span class="comment">//内存分配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p-&gt;data=e;</span><br><span class="line">    p-&gt;next=S-&gt;next;</span><br><span class="line">    S-&gt;next=p;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop</span><span class="params">(LiStack &amp;S,ElemType &amp;e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//栈空，报错</span></span><br><span class="line">SNode* q = S-&gt;next;<span class="comment">//找到当前链栈的栈顶结点</span></span><br><span class="line">e = q-&gt;data;<span class="comment">//返回栈顶结点的值</span></span><br><span class="line">    S-&gt;next=q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetTop</span><span class="params">(LiStack S,ElemType &amp;e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//栈空，报错</span></span><br><span class="line">    e=S-&gt;next-&gt;data;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(BiTNode *p)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    LiStack S;<span class="comment">//声明一个链栈</span></span><br><span class="line"><span class="built_in">InitLinkStack</span>(S);<span class="comment">//初始化栈</span></span><br><span class="line">BiTree p = T;<span class="comment">//p是遍历指针</span></span><br><span class="line"><span class="keyword">while</span> (p || !<span class="built_in">LiStackEmpty</span>(S)) &#123;<span class="comment">//栈不空或者p不空时循环</span></span><br><span class="line"><span class="keyword">if</span> (p) &#123;<span class="comment">//一路向左</span></span><br><span class="line"><span class="built_in">visit</span>(p);<span class="comment">//访问当前结点</span></span><br><span class="line"><span class="built_in">Push</span>(S, p);<span class="comment">//当前结点入栈</span></span><br><span class="line">p = p-&gt;lchild;<span class="comment">//左孩子不空，一直向左</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//出栈，并转向出栈结点的右子树</span></span><br><span class="line"><span class="built_in">Pop</span>(S, p);<span class="comment">//栈顶元素出栈</span></span><br><span class="line">p = p-&gt;rchild;<span class="comment">//向右子树走，p赋值为当前结点右孩子</span></span><br><span class="line">&#125;<span class="comment">//返回while循环继续进入if-else语句</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Inorder</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    LiStack S;<span class="comment">//声明一个链栈</span></span><br><span class="line"><span class="built_in">InitLinkStack</span>(S);<span class="comment">//初始化栈</span></span><br><span class="line">BiTree p = T;<span class="comment">//p是遍历指针</span></span><br><span class="line"><span class="keyword">while</span> (p || !<span class="built_in">LiStackEmpty</span>(S)) &#123;<span class="comment">//栈不空或者p不空时循环</span></span><br><span class="line"><span class="keyword">if</span> (p) &#123;<span class="comment">//一路向左</span></span><br><span class="line"><span class="built_in">Push</span>(S, p);<span class="comment">//当前结点入栈</span></span><br><span class="line">p = p-&gt;lchild;<span class="comment">//左孩子不空，一直向左</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//出栈，并转向出栈结点的右子树</span></span><br><span class="line"><span class="built_in">Pop</span>(S, p);<span class="comment">//栈顶元素出栈</span></span><br><span class="line"><span class="built_in">visit</span>(p);<span class="comment">//访问出栈结点</span></span><br><span class="line">p = p-&gt;rchild;<span class="comment">//向右子树走，p赋值为当前结点右孩子</span></span><br><span class="line">&#125;<span class="comment">//返回while循环继续进入if-else语句</span></span><br><span class="line">&#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostOrder</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">LiStack S;<span class="comment">//声明一个链栈</span></span><br><span class="line"><span class="built_in">InitLinkStack</span>(S);<span class="comment">//初始化栈</span></span><br><span class="line">BiTree p = T;<span class="comment">//p是遍历指针</span></span><br><span class="line">BiTNode* r = <span class="literal">NULL</span>;<span class="comment">//辅助指针，指向最近访问过的结点，用于记录是否已被访问</span></span><br><span class="line"><span class="keyword">while</span> (p || !<span class="built_in">LiStackEmpty</span>(S)) &#123;<span class="comment">//栈不空或者p不空时循环</span></span><br><span class="line"><span class="keyword">if</span> (p) &#123;<span class="comment">/*一路向左*/</span></span><br><span class="line"><span class="built_in">Push</span>(S, p);<span class="comment">//当前结点入栈</span></span><br><span class="line">p = p-&gt;lchild;<span class="comment">//左孩子不空，一直向左</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">/*左空，向右*/</span></span><br><span class="line"><span class="built_in">GetTop</span>(S, p);<span class="comment">//获取栈顶元素</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;rchild &amp;&amp; p-&gt;rchild != r) &#123;<span class="comment">/*若右子树存在，且未被访问过*/</span></span><br><span class="line">p = p-&gt;rchild;<span class="comment">//转向右</span></span><br><span class="line"><span class="built_in">Push</span>(S, p);<span class="comment">//压入栈</span></span><br><span class="line">p = p-&gt;lchild;<span class="comment">//再走到最左</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">/*否则，弹出结点并访问*/</span></span><br><span class="line"><span class="built_in">Pop</span>(S, p);<span class="comment">//栈顶元素出栈</span></span><br><span class="line"><span class="built_in">visit</span>(p);<span class="comment">//访问出栈结点</span></span><br><span class="line">r = p;<span class="comment">//记录最近访问过的结点</span></span><br><span class="line">p = <span class="literal">NULL</span>;<span class="comment">//结点访问完后，重置p指针</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//else</span></span><br><span class="line">&#125;<span class="comment">//while</span></span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BiTree T;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;先序创建二叉树：&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">CreatBiTree</span>(T);</span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;先序遍历：&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">PreOrder</span>(T);</span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;中序遍历：&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">Inorder</span>(T);</span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;后序遍历：&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">PostOrder</span>(T);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 二叉树的层次遍历(队列的应用) </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉树的层次遍历(队列的应用)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void InitQueue(LinkQueue&amp; Q);//1.初始化队列</span></span><br><span class="line"><span class="comment">// bool LiQueueEmpty(LinkQueue Q);//2.判空</span></span><br><span class="line"><span class="comment">// bool EnQueue(LinkQueue&amp; Q, ElemType x);//3.入队操作</span></span><br><span class="line"><span class="comment">// bool ExQueue(LinkQueue&amp; Q, ElemType&amp; x);//4.出队操作</span></span><br><span class="line"><span class="comment">// void CreateBiTree(BiTree&amp; T);//5.先序建立二叉树</span></span><br><span class="line"><span class="comment">// void visit(BiTNode* p);//6.打印结点</span></span><br><span class="line"><span class="comment">// void LevelOrder(BiTree T);//7.二叉树的层次遍历</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType BiTNode*</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELemTypel char</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.二叉树结点类型定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BiTNode</span> &#123;</span><br><span class="line">ELemTypel data;<span class="comment">//结点中的数据域</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BiTNode</span>* lchild, * rchild;<span class="comment">//左右孩子指针</span></span><br><span class="line">&#125;BiTNode, * BiTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.辅助队列结点类型定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LinkNode</span> &#123;</span><br><span class="line">BiTNode* data;<span class="comment">//存指针而不是结点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LinkNode</span>* next;<span class="comment">//指向下一个结点的指针</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.辅助队列类型定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">LinkNode* front, * rear;<span class="comment">//队列的队头指针和队尾指针 </span></span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    Q.front=Q.rear=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">LiQueueEmpty</span><span class="params">(LinkQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Q.front == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.入队操作(无头结点)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">EnQueue</span><span class="params">(LinkQueue&amp; Q, ElemType x)</span> </span>&#123;</span><br><span class="line">LinkNode* s = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkNode));</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//内存不足，分配失败</span></span><br><span class="line">s-&gt;data = x;<span class="comment">//为新结点赋值</span></span><br><span class="line">s-&gt;next = <span class="literal">NULL</span>;<span class="comment">//因为新结点只能从队尾插入，即新结点为最后一个结点，其next指针为NULL</span></span><br><span class="line"><span class="keyword">if</span> (Q.rear == <span class="literal">NULL</span>)<span class="comment">//如果当前队列为空，入队结点为第一个结点</span></span><br><span class="line">Q.front = Q.rear = s;<span class="comment">//修改队头和队尾指针</span></span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//其他结点的插入与带头结点的插入一致</span></span><br><span class="line">Q.rear-&gt;next = s;<span class="comment">//新结点插入到rear之后：原先队尾指针所指结点的next指向新结点</span></span><br><span class="line">Q.rear = s;<span class="comment">//修改队尾结点指针，指向新的队尾结点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.出队操作(无头结点)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ExQueue</span><span class="params">(LinkQueue&amp; Q, ElemType&amp; x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Q.front == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//队空，报错</span></span><br><span class="line">LinkNode* p = Q.front;<span class="comment">//找到队头元素</span></span><br><span class="line">x = p-&gt;data;<span class="comment">//变量x返回队头元素</span></span><br><span class="line">Q.front = p-&gt;next;<span class="comment">//修改队头指针：将队头结点的后继结点赋给队头指针</span></span><br><span class="line"><span class="keyword">if</span> (Q.rear == p)<span class="comment">//如果此次为最后一个结点出队</span></span><br><span class="line">Q.rear = Q.front = <span class="literal">NULL</span>;<span class="comment">//修改rear指针,队列置空</span></span><br><span class="line"><span class="built_in">free</span>(p);<span class="comment">//释放结点空间</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.先序建立二叉树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree&amp; T)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line">cin&gt;&gt;c;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">T = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">T = (BiTNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BiTNode));</span><br><span class="line">T-&gt;data = c;</span><br><span class="line"><span class="built_in">CreateBiTree</span>(T-&gt;lchild);</span><br><span class="line"><span class="built_in">CreateBiTree</span>(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(BiTNode *p)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;p-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.二叉树的层次遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LevelOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">LinkQueue Q;</span><br><span class="line"><span class="built_in">InitQueue</span>(Q);<span class="comment">//初始化辅助队列</span></span><br><span class="line">BiTree p;</span><br><span class="line"><span class="built_in">EnQueue</span>(Q, T);<span class="comment">//根结点入队</span></span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">LiQueueEmpty</span>(Q)) &#123;<span class="comment">//队列不空则循环</span></span><br><span class="line"><span class="built_in">ExQueue</span>(Q, p);<span class="comment">//队头结点出队</span></span><br><span class="line"><span class="built_in">visit</span>(p);<span class="comment">//访问出队结点</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">EnQueue</span>(Q, p-&gt;lchild);<span class="comment">//左子树不空，则左子树根结点入队</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">EnQueue</span>(Q, p-&gt;rchild);<span class="comment">//右子树不空，则右子树根结点入队</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BiTree T;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;先序创建二叉树：&quot;</span>;</span><br><span class="line">    <span class="built_in">CreateBiTree</span>(T);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;层次遍历二叉树：&quot;</span>;</span><br><span class="line">    <span class="built_in">LevelOrder</span>(T);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 线索二叉树(中序) </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线索二叉树(中序)</span></span><br><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void CreateThTree(ThreadTree&amp; T);//1.先序建立线索二叉树</span></span><br><span class="line"><span class="comment">// void InitThread(ThreadTree&amp; T);//2.初始化tag</span></span><br><span class="line"><span class="comment">// void visit1(ThreadNode* q);//3-1.访问并建立线索</span></span><br><span class="line"><span class="comment">// void InThread(ThreadTree T);//3-2.遍历</span></span><br><span class="line"><span class="comment">// void CreateInThread(ThreadTree T);//3-3.中序线索化主过程</span></span><br><span class="line"><span class="comment">// ThreadNode* FirstNode(ThreadNode* p);//4-1.找到以p为根的子树中，第一个被中序遍历的结点</span></span><br><span class="line"><span class="comment">// ThreadNode* NextNode(ThreadNode* p);//4-2.找到p的后继结点</span></span><br><span class="line"><span class="comment">// ThreadNode* LastNode(ThreadNode* p);//5-1.找到以p为根的子树中，最后一个被中序遍历的结点</span></span><br><span class="line"><span class="comment">// ThreadNode* PreNode(ThreadNode* p);//5-2.找到p的前驱结点</span></span><br><span class="line"><span class="comment">// void visit2(ThreadNode* p);//6-1.打印结点</span></span><br><span class="line"><span class="comment">// void InOrder(ThreadNode* T);//6-2.利用中序后继实现中序遍历</span></span><br><span class="line"><span class="comment">// void RevInOrder(ThreadNode* T);//6-3.利用中序前驱实现逆向中序遍历</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELemType char</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//线索二叉树结点类型定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ThreadNode</span> &#123;</span><br><span class="line">ELemType data;<span class="comment">//数据元素</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ThreadNode</span>* lchild, * rchild;<span class="comment">//左、右孩子指针</span></span><br><span class="line"><span class="type">int</span> ltag, rtag;<span class="comment">//左、右线索标志</span></span><br><span class="line"><span class="comment">//tag=0,表示指针指向孩子;tag=1,表示指针是“线索”,ltag指向前驱，rtag指向后继</span></span><br><span class="line">&#125;ThreadNode, * ThreadTree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateThTree</span><span class="params">(ThreadTree &amp;T)</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    cin&gt;&gt;c;</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        T=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        T=(ThreadNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ThreadNode));</span><br><span class="line">        T-&gt;data=c;</span><br><span class="line">        <span class="built_in">CreateThTree</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">CreateThTree</span>(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2.初始化tag*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitThread</span><span class="params">(ThreadTree&amp; T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line">T-&gt;ltag = <span class="number">0</span>;</span><br><span class="line">T-&gt;rtag = <span class="number">0</span>;<span class="comment">//初始化当前树中的tag指针为0，表示还未线索化</span></span><br><span class="line"><span class="built_in">InitThread</span>(T-&gt;lchild);<span class="comment">//递归遍历左子树</span></span><br><span class="line"><span class="built_in">InitThread</span>(T-&gt;rchild);<span class="comment">//递归遍历右子树</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ThreadNode* pre = <span class="literal">NULL</span>;<span class="comment">//pre指向当前访问结点的前驱</span></span><br><span class="line"><span class="comment">//3-1.访问并建立线索</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit1</span><span class="params">(ThreadNode* q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;lchild == <span class="literal">NULL</span>) &#123;<span class="comment">//左子树为空，建立前驱线索</span></span><br><span class="line">q-&gt;lchild = pre;</span><br><span class="line">q-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pre != <span class="literal">NULL</span> &amp;&amp; pre-&gt;rchild == <span class="literal">NULL</span>) &#123;</span><br><span class="line">pre-&gt;rchild = q;<span class="comment">//建立前驱结点的后继线索</span></span><br><span class="line">pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pre = q;<span class="comment">//标记当前结点为刚刚访问过的结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InThread</span><span class="params">(ThreadTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">InThread</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">visit1</span>(T);</span><br><span class="line">        <span class="built_in">InThread</span>(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3-3.主过程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateInThread</span><span class="params">(ThreadTree T)</span> </span>&#123;</span><br><span class="line">pre = <span class="literal">NULL</span>;<span class="comment">//pre初始化为NULL</span></span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;<span class="comment">//非空二叉树才能线索化</span></span><br><span class="line"><span class="built_in">InThread</span>(T);<span class="comment">//中序线索化二叉树</span></span><br><span class="line"><span class="keyword">if</span> (pre-&gt;rchild == <span class="literal">NULL</span>)<span class="comment">//实际上不用判断，中序遍历时最后一个结点的右孩子指针必为NULL</span></span><br><span class="line">pre-&gt;rtag = <span class="number">1</span>;<span class="comment">//处理遍历的最后一个结点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4-1.求中序线索二叉树中中序遍历的第一个结点：右子树中最左下的结点</span></span><br><span class="line"><span class="function">ThreadNode* <span class="title">FirstNode</span><span class="params">(ThreadNode* p)</span> </span>&#123;</span><br><span class="line"><span class="comment">//循环找到最左下结点(不一定是叶节点)</span></span><br><span class="line"><span class="keyword">while</span> (p-&gt;ltag == <span class="number">0</span>)</span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4-2.找到p的后继结点</span></span><br><span class="line"><span class="function">ThreadNode* <span class="title">NextNode</span><span class="params">(ThreadNode* p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;rtag == <span class="number">0</span>)<span class="comment">//若rtag=0，说明所找结点有右孩子，则找该结点的右子树最左下结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">FirstNode</span>(p-&gt;rchild);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> p-&gt;rchild;<span class="comment">//若rtag=1，说明所找结点无右孩子，则返回后继线索</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5-1.求中序线索二叉树中中序遍历的最后一个结点：左子树中最右下的结点</span></span><br><span class="line"><span class="function">ThreadNode* <span class="title">LastNode</span><span class="params">(ThreadNode* p)</span> </span>&#123;</span><br><span class="line"><span class="comment">//循环找到最右下结点(不一定是叶节点)</span></span><br><span class="line"><span class="keyword">while</span> (p-&gt;rtag == <span class="number">0</span>)</span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5-2.找到p的前驱结点</span></span><br><span class="line"><span class="function">ThreadNode* <span class="title">PreNode</span><span class="params">(ThreadNode* p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;ltag == <span class="number">0</span>)<span class="comment">//若ltag=0，说明所找结点有左孩子，则找该结点的左子树最右下结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">LastNode</span>(p-&gt;lchild);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> p-&gt;lchild;<span class="comment">//若ltag=1，说明所找结点无左孩子，则返回前驱线索</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit2</span><span class="params">(ThreadNode *p)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6-2.利用中序后继实现中序遍历：空间复杂度为O(1) </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">(ThreadNode* T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (ThreadNode* p = <span class="built_in">FirstNode</span>(T); p != <span class="literal">NULL</span>; p = <span class="built_in">NextNode</span>(p))</span><br><span class="line"><span class="built_in">visit2</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6-2.利用中序后继实现中序遍历：空间复杂度为O(1) </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RevInOrder</span><span class="params">(ThreadNode* T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (ThreadNode* p = <span class="built_in">LastNode</span>(T); p != <span class="literal">NULL</span>; p = <span class="built_in">PreNode</span>(p))</span><br><span class="line"><span class="built_in">visit2</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ThreadTree T;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;先序创建二叉树：&quot;</span>;</span><br><span class="line">    <span class="built_in">CreateThTree</span>(T);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">InitThread</span>(T);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CreateInThread</span>(T);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;根节点的中序后继为:&quot;</span>&lt;&lt;<span class="built_in">NextNode</span>(T)-&gt;data&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;根节点的中序前驱为：&quot;</span>&lt;&lt;<span class="built_in">PreNode</span>(T)-&gt;data&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;中序遍历：&quot;</span>;</span><br><span class="line">    <span class="built_in">InOrder</span>(T);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;逆向中序遍历：&quot;</span>;</span><br><span class="line">    <span class="built_in">RevInOrder</span>(T);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 线索二叉树(先序) </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线索二叉树（先序）</span></span><br><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void CreateThTree(ThreadTree&amp; T);//1.先序建立线索二叉树</span></span><br><span class="line"><span class="comment">// void InitThread(ThreadTree&amp; T);//2.初始化tag</span></span><br><span class="line"><span class="comment">// void visit1(ThreadNode* q);//3-1.访问并建立线索</span></span><br><span class="line"><span class="comment">// void PreThread(ThreadTree T);//3-2.遍历</span></span><br><span class="line"><span class="comment">// void CreatePreThread(ThreadTree T);//3-3.先序线索化主过程</span></span><br><span class="line"><span class="comment">// ThreadNode* NextNode(ThreadNode* p);//4.找到p的后继结点</span></span><br><span class="line"><span class="comment">// void visit2(ThreadNode* p);//5-1.打印结点</span></span><br><span class="line"><span class="comment">// void PreOrder(ThreadNode* T);//5-2.利用先序后继实现先序遍历</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELemType char</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//线索二叉树结点类型定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ThreadNode</span> &#123;</span><br><span class="line">ELemType data;<span class="comment">//数据元素</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ThreadNode</span>* lchild, * rchild;<span class="comment">//左、右孩子指针</span></span><br><span class="line"><span class="type">int</span> ltag, rtag;<span class="comment">//左、右线索标志</span></span><br><span class="line"><span class="comment">//tag=0,表示指针指向孩子;tag=1,表示指针是“线索”,ltag指向前驱，rtag指向后继</span></span><br><span class="line">&#125;ThreadNode, * ThreadTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateThTree</span><span class="params">(ThreadTree &amp;T)</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    cin&gt;&gt;c;</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        T=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">        T=(ThreadNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ThreadNode));</span><br><span class="line">        T-&gt;data=c;</span><br><span class="line">        <span class="built_in">CreateThTree</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">CreateThTree</span>(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2.初始化tag*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitThread</span><span class="params">(ThreadTree&amp; T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line">T-&gt;ltag = <span class="number">0</span>;</span><br><span class="line">T-&gt;rtag = <span class="number">0</span>;<span class="comment">//初始化当前树中的tag指针为0，表示还未线索化</span></span><br><span class="line"><span class="built_in">InitThread</span>(T-&gt;lchild);<span class="comment">//递归遍历左子树</span></span><br><span class="line"><span class="built_in">InitThread</span>(T-&gt;rchild);<span class="comment">//递归遍历右子树</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ThreadNode* pre = <span class="literal">NULL</span>;<span class="comment">//pre指向当前访问结点的前驱</span></span><br><span class="line"><span class="comment">//3-1.访问并建立线索</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit1</span><span class="params">(ThreadNode* q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;lchild == <span class="literal">NULL</span>) &#123;<span class="comment">//左子树为空，建立前驱线索</span></span><br><span class="line">q-&gt;lchild = pre;</span><br><span class="line">q-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pre != <span class="literal">NULL</span> &amp;&amp; pre-&gt;rchild == <span class="literal">NULL</span>) &#123;</span><br><span class="line">pre-&gt;rchild = q;<span class="comment">//建立前驱结点的后继线索</span></span><br><span class="line">pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pre = q;<span class="comment">//标记当前结点为刚刚访问过的结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3-2.遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreThread</span><span class="params">(ThreadTree T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">visit1</span>(T);<span class="comment">//先处理根节点</span></span><br><span class="line"><span class="keyword">if</span> (T-&gt;ltag == <span class="number">0</span>)<span class="comment">//若lchild不是前驱线索</span></span><br><span class="line"><span class="built_in">PreThread</span>(T-&gt;lchild);<span class="comment">//则线索化左子树</span></span><br><span class="line"><span class="keyword">if</span> (T-&gt;rtag == <span class="number">0</span>)<span class="comment">//若rchild不是后继线索</span></span><br><span class="line"><span class="built_in">PreThread</span>(T-&gt;rchild);<span class="comment">//则线索化右子树</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3-3.主过程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreatePreThread</span><span class="params">(ThreadTree T)</span> </span>&#123;</span><br><span class="line">pre = <span class="literal">NULL</span>;<span class="comment">//pre初始化为NULL</span></span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;<span class="comment">//非空二叉树才能线索化</span></span><br><span class="line"><span class="built_in">PreThread</span>(T);<span class="comment">//先序线索化二叉树</span></span><br><span class="line"><span class="keyword">if</span> (pre-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">pre-&gt;rtag = <span class="number">1</span>;<span class="comment">//处理遍历的最后一个结点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*4.寻找先序后继*/</span></span><br><span class="line"><span class="function">ThreadNode* <span class="title">NextNode</span><span class="params">(ThreadNode* p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;rtag == <span class="number">0</span>) &#123;<span class="comment">//若rtag=0，说明所找结点有右孩子</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;ltag == <span class="number">0</span>)<span class="comment">//若ltag=0，说明所找结点有左孩子，根据先序遍历的特点(根-左-右)，左孩子为后继</span></span><br><span class="line"><span class="keyword">return</span> p-&gt;lchild;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> p-&gt;rchild;  <span class="comment">//若ltag=1，说明所找结点无左孩子，则后继结点为其右孩子</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> p-&gt;rchild;<span class="comment">//若rtag=1，说明所找结点无右孩子，则返回后继线索</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit2</span><span class="params">(ThreadNode *p)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5-2.利用先序后继实现先序遍历：空间复杂度为O(1) </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">(ThreadNode* T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (ThreadNode* p = T; p != <span class="literal">NULL</span>; p = <span class="built_in">NextNode</span>(p))</span><br><span class="line"><span class="built_in">visit2</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ThreadTree T;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;先序创建二叉树：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">CreateThTree</span>(T);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">InitThread</span>(T);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CreatePreThread</span>(T);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;根节点的先序后继为：&quot;</span>&lt;&lt;<span class="built_in">NextNode</span>(T)-&gt;data&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;先序遍历：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">PreOrder</span>(T);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 线索二叉树(后序) </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线索二叉树(后序)</span></span><br><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// void CreateThTree(ThreadTree&amp; T);//1.先序建立线索二叉树</span></span><br><span class="line"><span class="comment">// void InitThread(ThreadTree&amp; T);//2.初始化tag</span></span><br><span class="line"><span class="comment">// void visit1(ThreadNode* q);//3-1.访问并建立线索</span></span><br><span class="line"><span class="comment">// void PostThread(ThreadTree T);//3-2.遍历</span></span><br><span class="line"><span class="comment">// void CreatePostThread(ThreadTree T);//3-3.后序线索化主过程</span></span><br><span class="line"><span class="comment">// ThreadNode* PreNode(ThreadNode* p);//4.找到p的前驱结点</span></span><br><span class="line"><span class="comment">// void visit2(ThreadNode* p);//5-1.打印结点</span></span><br><span class="line"><span class="comment">// void RevPostOrder(ThreadNode* T);//5-2.利用后序前驱实现逆向后序遍历</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType char</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//线索二叉树结点类型定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ThreadNode</span> &#123;</span><br><span class="line">ElemType data;<span class="comment">//数据元素</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ThreadNode</span>* lchild, * rchild;<span class="comment">//左、右孩子指针</span></span><br><span class="line"><span class="type">int</span> ltag, rtag;<span class="comment">//左、右线索标志</span></span><br><span class="line"><span class="comment">//tag=0,表示指针指向孩子;tag=1,表示指针是“线索”,ltag指向前驱，rtag指向后继</span></span><br><span class="line">&#125;ThreadNode, * ThreadTree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateThTree</span><span class="params">(ThreadTree &amp;T)</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    cin&gt;&gt;c;</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        T=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        T=(ThreadNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ThreadNode));</span><br><span class="line">        T-&gt;data=c;</span><br><span class="line">        <span class="built_in">CreateThTree</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">CreateThTree</span>(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2.初始化tag*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitThread</span><span class="params">(ThreadTree&amp; T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line">T-&gt;ltag = <span class="number">0</span>;</span><br><span class="line">T-&gt;rtag = <span class="number">0</span>;<span class="comment">//初始化当前树中的tag指针为0，表示还未线索化</span></span><br><span class="line"><span class="built_in">InitThread</span>(T-&gt;lchild);<span class="comment">//递归遍历左子树</span></span><br><span class="line"><span class="built_in">InitThread</span>(T-&gt;rchild);<span class="comment">//递归遍历右子树</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ThreadNode* pre = <span class="literal">NULL</span>;<span class="comment">//pre指向当前访问结点的前驱</span></span><br><span class="line"><span class="comment">//3-1.访问并建立线索</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit1</span><span class="params">(ThreadNode* q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;lchild == <span class="literal">NULL</span>) &#123;<span class="comment">//左子树为空，建立前驱线索</span></span><br><span class="line">q-&gt;lchild = pre;</span><br><span class="line">q-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pre != <span class="literal">NULL</span> &amp;&amp; pre-&gt;rchild == <span class="literal">NULL</span>) &#123;</span><br><span class="line">pre-&gt;rchild = q;<span class="comment">//建立前驱结点的后继线索</span></span><br><span class="line">pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pre = q;<span class="comment">//标记当前结点为刚刚访问过的结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostThread</span><span class="params">(ThreadTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">PostThread</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">PostThread</span>(T-&gt;rchild);</span><br><span class="line">        <span class="built_in">visit1</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3-3.主过程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreatePostThread</span><span class="params">(ThreadTree T)</span> </span>&#123;</span><br><span class="line">pre = <span class="literal">NULL</span>;<span class="comment">//pre初始化为NULL</span></span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;<span class="comment">//非空二叉树才能线索化</span></span><br><span class="line"><span class="built_in">PostThread</span>(T);<span class="comment">//后序线索化二叉树</span></span><br><span class="line"><span class="keyword">if</span> (pre-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">pre-&gt;rtag = <span class="number">1</span>;<span class="comment">//处理遍历的最后一个结点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.寻找后序前驱</span></span><br><span class="line"><span class="function">ThreadNode* <span class="title">PreNode</span><span class="params">(ThreadNode* p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;ltag == <span class="number">0</span>) &#123;<span class="comment">//若ltag=0，说明所找结点有左孩子</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;rtag == <span class="number">0</span>)<span class="comment">//若rtag=0</span></span><br><span class="line"><span class="keyword">return</span> p-&gt;rchild;<span class="comment">//说明所找结点有右孩子，根据后序遍历的特点(左-右-根)，右孩子为前驱</span></span><br><span class="line"><span class="keyword">else</span>                    <span class="comment">//若rtag=1</span></span><br><span class="line"><span class="keyword">return</span>p-&gt;lchild;<span class="comment">//说明所找结点无右孩子，则前驱结点为其左孩子</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> p-&gt;lchild;<span class="comment">//若ltag=1，说明所找结点无左孩子，则返回前驱线索</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit2</span><span class="params">(ThreadNode *p)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5-2.利用后序前驱实现逆向后序遍历：空间复杂度为O(1) </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RevPostOrder</span><span class="params">(ThreadNode* T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (ThreadNode* p = T; p != <span class="literal">NULL</span>; p = <span class="built_in">PreNode</span>(p))</span><br><span class="line"><span class="built_in">visit2</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ThreadTree T;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;先序创建二叉树：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">CreateThTree</span>(T);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">InitThread</span>(T);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CreatePostThread</span>(T);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;根节点的后序前驱为:&quot;</span>&lt;&lt;<span class="built_in">PreNode</span>(T)-&gt;data&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;逆向后序遍历:&quot;</span>;</span><br><span class="line">    <span class="built_in">RevPostOrder</span>(T);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 二叉树的应用(二叉排序树) </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉树的应用(二叉排序树)</span></span><br><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="comment">// BSTNode* BST_Search(BSTree T, ElemType key);//1-1.查找操作-非递归</span></span><br><span class="line"><span class="comment">// BSTNode* BSTSearch(BSTree T, ElemType key);//1-2.查找操作-递归</span></span><br><span class="line"><span class="comment">// bool BST_Insert(BSTree&amp; T, ElemType key);//2-1.插入操作-非递归</span></span><br><span class="line"><span class="comment">// bool BSTInsert(BSTree&amp; T, ElemType key);//2-2.插入操作-递归</span></span><br><span class="line"><span class="comment">// void Create_BST(BSTree&amp; T, ElemType arr[], int n);//3.构造二叉排序树</span></span><br><span class="line"><span class="comment">// BSTNode* FirstNode(BSTNode* p);//4-1.找到最左下结点</span></span><br><span class="line"><span class="comment">// BSTNode* LastNode(BSTNode* p);//4-2.找到最右下结点</span></span><br><span class="line"><span class="comment">// BSTNode* BST_Delete1(BSTree&amp; T, ElemType key);//4-3.删除操作-用右子树中最左下结点填充</span></span><br><span class="line"><span class="comment">// BSTNode* BST_Delete2(BSTree&amp; T, ElemType key);//4-4.删除操作-用左子树中最右下结点填充</span></span><br><span class="line"><span class="comment">// void InOrder(BSTree T);//5.中序遍历</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BSTNode</span>&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BSTNode</span> *lchild,*rchild;</span><br><span class="line">&#125;BSTNode,*BSTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1-1.查找操作-非递归(最坏空间复杂度O(1))</span></span><br><span class="line"><span class="function">BSTNode* <span class="title">BST_Search</span><span class="params">(BSTree T, ElemType key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (T != <span class="literal">NULL</span> &amp;&amp; key != T-&gt;data) &#123;<span class="comment">//若树空或找到结点，则结束循环</span></span><br><span class="line"><span class="keyword">if</span> (key &lt; T-&gt;data)</span><br><span class="line">T = T-&gt;lchild;<span class="comment">//小于，在左子树上查找</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">T = T-&gt;rchild;<span class="comment">//大于，在右子树上查找</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1-2.查找操作-递归(最坏空间复杂度O(h),h指树的高度)</span></span><br><span class="line"><span class="function">BSTNode* <span class="title">BSTSearch</span><span class="params">(BSTree T, ElemType key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//查找失败</span></span><br><span class="line"><span class="keyword">if</span> (key == T-&gt;data)</span><br><span class="line"><span class="keyword">return</span> T;<span class="comment">//查找成功</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key &lt; T-&gt;data)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">BSTSearch</span>(T-&gt;lchild, key);<span class="comment">//小于，在左子树上查找</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">BSTSearch</span>(T-&gt;rchild, key);<span class="comment">//大于，在右子树上查找</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2-1.插入操作-非递归(最坏空间复杂度O(1))</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">BST_Insert</span><span class="params">(BSTree&amp; T, ElemType key)</span> </span>&#123;</span><br><span class="line">BSTNode* p = T;<span class="comment">//搜索指针</span></span><br><span class="line">BSTNode* parent = <span class="literal">NULL</span>;<span class="comment">//p的双亲结点</span></span><br><span class="line"><span class="keyword">while</span> (p) &#123;<span class="comment">//找到插入位置</span></span><br><span class="line"><span class="keyword">if</span> (key == p-&gt;data)<span class="comment">//树中存在相同关键字的结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//插入失败</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">parent = p;<span class="comment">//保留p的双亲结点</span></span><br><span class="line"><span class="keyword">if</span> (key &lt; p-&gt;data) </span><br><span class="line">p = p-&gt;lchild;<span class="comment">//小于，在左子树上寻找插入位置</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">p = p-&gt;rchild;<span class="comment">//大于，在右子树上寻找插入位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*直接插入到p是不会改变二叉树的</span></span><br><span class="line"><span class="comment">p = (BSTNode*)malloc(sizeof(BSTNode));//分配存储空间</span></span><br><span class="line"><span class="comment">p-&gt;data = key;//放入结点值</span></span><br><span class="line"><span class="comment">p-&gt;lchild = p-&gt;rchild = NULL;//左右孩子置空</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">BSTNode* s = (BSTNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BSTNode));</span><br><span class="line">s-&gt;data = key;</span><br><span class="line">s-&gt;lchild = s-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (!parent)<span class="comment">//若T为空树</span></span><br><span class="line">T = s;<span class="comment">//将s设为根结点</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key &lt; parent-&gt;data)</span><br><span class="line">parent-&gt;lchild = s;<span class="comment">//小于，插入pre的左子树</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">parent-&gt;rchild = s;<span class="comment">//大于，插入pre的右子树</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//插入成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2-2.插入操作-递归(最坏空间复杂度O(h),h指树的高度)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">BSTInsert</span><span class="params">(BSTree&amp; T, ElemType key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T == <span class="literal">NULL</span>) &#123;<span class="comment">//找到要插入的位置</span></span><br><span class="line">T = (BSTNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BSTNode));<span class="comment">//分配存储空间</span></span><br><span class="line">T-&gt;data = key;<span class="comment">//放入结点值</span></span><br><span class="line">T-&gt;lchild = T-&gt;rchild = <span class="literal">NULL</span>;        <span class="comment">//左右孩子置空</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;                        <span class="comment">//插入成功</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key == T-&gt;data)<span class="comment">//树中存在相同关键字的结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//插入失败</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key &lt; T-&gt;data)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">BSTInsert</span>(T-&gt;lchild, key);<span class="comment">//小于，在左子树上插入</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key &gt; T-&gt;data)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">BSTInsert</span>(T-&gt;rchild, key);<span class="comment">//大于，在右子树上插入</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*3.构造二叉排序树：按照arr[]中的关键字序列建立二叉排序树*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Create_BST</span><span class="params">(BSTree&amp; T, ElemType arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">T = <span class="literal">NULL</span>;<span class="comment">//初始T为空树</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; n) &#123;<span class="comment">//依次将每个关键字插入到二叉排序树中 </span></span><br><span class="line"><span class="built_in">BSTInsert</span>(T, arr[i]);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4-1.找到最左下结点，也是最小结点</span></span><br><span class="line"><span class="function">BSTNode* <span class="title">FirstNode</span><span class="params">(BSTNode* p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p)</span><br><span class="line"><span class="keyword">while</span> (p-&gt;lchild)</span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4-2.找到最右下结点，也是最大结点</span></span><br><span class="line"><span class="function">BSTNode* <span class="title">LastNode</span><span class="params">(BSTNode* p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p)</span><br><span class="line"><span class="keyword">while</span> (p-&gt;rchild)</span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4-3.删除操作-用右子树中最左下结点填充</span></span><br><span class="line"><span class="function">BSTNode* <span class="title">BST_Delete1</span><span class="params">(BSTree&amp; T, ElemType key)</span> </span>&#123;</span><br><span class="line">BSTNode* tmp;</span><br><span class="line"><span class="keyword">if</span> (!T)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;要删除的元素未找到！&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key &lt; T-&gt;data)</span><br><span class="line">T-&gt;lchild = <span class="built_in">BST_Delete1</span>(T-&gt;lchild, key);<span class="comment">//小于，删除左孩子</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key &gt; T-&gt;data)</span><br><span class="line">T-&gt;rchild = <span class="built_in">BST_Delete1</span>(T-&gt;rchild, key);<span class="comment">//大于，删除右孩子</span></span><br><span class="line"><span class="keyword">else</span>   <span class="comment">//找到要删除的结点</span></span><br><span class="line"><span class="keyword">if</span> (T-&gt;lchild &amp;&amp; T-&gt;rchild) &#123;<span class="comment">//1.被删除结点右左右两个子结点</span></span><br><span class="line">tmp = <span class="built_in">FirstNode</span>(T-&gt;rchild);<span class="comment">//找到右子树的最左下结点填充删除结点</span></span><br><span class="line">T-&gt;data = tmp-&gt;data;</span><br><span class="line">T-&gt;rchild = <span class="built_in">BST_Delete1</span>(T-&gt;rchild, T-&gt;data);<span class="comment">//在删除结点的右子树中删除最小结点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//2.被删除结点有一个子结点或者都没有</span></span><br><span class="line">tmp = T;</span><br><span class="line"><span class="keyword">if</span> (!T-&gt;lchild)</span><br><span class="line">T = T-&gt;rchild;<span class="comment">//有右孩子或无子结点</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!T-&gt;rchild)</span><br><span class="line">T = T-&gt;lchild;</span><br><span class="line"><span class="built_in">free</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4-4.删除操作-用左子树中最右下结点填充</span></span><br><span class="line"><span class="function">BSTNode* <span class="title">BST_Delete2</span><span class="params">(BSTree&amp; T, ElemType key)</span> </span>&#123;</span><br><span class="line">BSTNode* tmp;</span><br><span class="line"><span class="keyword">if</span> (!T)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;要删除的元素未找到！&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key &lt; T-&gt;data)</span><br><span class="line">T-&gt;lchild = <span class="built_in">BST_Delete2</span>(T-&gt;lchild, key);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key &gt; T-&gt;data)</span><br><span class="line">T-&gt;rchild = <span class="built_in">BST_Delete2</span>(T-&gt;rchild, key);</span><br><span class="line"><span class="keyword">else</span>   <span class="comment">//找到要删除的结点</span></span><br><span class="line"><span class="keyword">if</span> (T-&gt;lchild &amp;&amp; T-&gt;rchild) &#123;<span class="comment">//1.被删除结点有左右两个子结点</span></span><br><span class="line">tmp = <span class="built_in">LastNode</span>(T-&gt;lchild);<span class="comment">//找到左子树的最右下结点填充删除结点</span></span><br><span class="line">T-&gt;data = tmp-&gt;data;</span><br><span class="line">T-&gt;lchild = <span class="built_in">BST_Delete2</span>(T-&gt;lchild, T-&gt;data);<span class="comment">//在删除结点的左子树中删除最大结点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//2.被删除结点有一个子结点或者都没有</span></span><br><span class="line">tmp = T;</span><br><span class="line"><span class="keyword">if</span> (!T-&gt;lchild)</span><br><span class="line">T = T-&gt;rchild;<span class="comment">//有右孩子或无子结点</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!T-&gt;rchild)</span><br><span class="line">T = T-&gt;lchild;</span><br><span class="line"><span class="built_in">free</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">(BSTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">InOrder</span>(T-&gt;lchild);</span><br><span class="line">        cout&lt;&lt;T-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">InOrder</span>(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BSTree T;</span><br><span class="line">    <span class="type">int</span> arr[]=&#123;<span class="number">19</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">50</span>,<span class="number">26</span>,<span class="number">21</span>,<span class="number">30</span>,<span class="number">66</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">63</span>,<span class="number">61</span>,<span class="number">65</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Create_BST</span>(T,arr,<span class="number">14</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;构造二叉排序树：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">InOrder</span>(T);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;二叉排序树递归插入元素&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">BSTInsert</span>(T,<span class="number">62</span>))&#123;</span><br><span class="line">        <span class="built_in">InOrder</span>(T);</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;树中已存在相同结点，插入失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;二叉排序树非递归插入元素&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">BST_Insert</span>(T,<span class="number">67</span>))&#123;</span><br><span class="line">        <span class="built_in">InOrder</span>(T);</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;树中已存在相同结点，插入失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;删除指定元素-右子树最左下结点填充&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">BST_Delete1</span>(T,<span class="number">60</span>);</span><br><span class="line">    <span class="built_in">InOrder</span>(T);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;删除指定元素-左子树最右下结点填充&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">BST_Insert</span>(T,<span class="number">60</span>);</span><br><span class="line">    <span class="built_in">BST_Delete2</span>(T,<span class="number">60</span>);</span><br><span class="line">    <span class="built_in">InOrder</span>(T);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="排序-sort"><a href="#排序-sort" class="headerlink" title="排序-sort"></a>排序-sort</h1><details class="folding-tag" yellow><summary> 排序 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 顺序查找 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType *elem;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;SSTable;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitTable</span><span class="params">(SSTable &amp;ST)</span></span>&#123;</span><br><span class="line">    ST.elem=(ElemType *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ElemType)*InitSize);</span><br><span class="line">    ST.length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">AssignTbble</span><span class="params">(SSTable &amp;ST)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    ElemType x;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ST.length&gt;InitSize<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        ST.elem[i]=x;</span><br><span class="line">        ST.length++;</span><br><span class="line">        i++;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Search_Seq</span><span class="params">(SSTable ST,ElemType key)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    ST.elem[<span class="number">0</span>]=key;</span><br><span class="line">    <span class="keyword">for</span>(i=ST.length;ST.elem[i]!=key;--i);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SSTable ST;</span><br><span class="line">    <span class="built_in">InitTable</span>(ST);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;顺序表赋值开始，请依次输入元素：&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">AssignTbble</span>(ST))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;输入元素个数大于顺序表长度，赋值失败！&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前顺序表的长度为：&quot;</span>&lt;&lt;ST.length&lt;&lt;endl;</span><br><span class="line">        <span class="type">int</span> key;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入要查找的值：&quot;</span>;</span><br><span class="line">        cin&gt;&gt;key;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">Search_Seq</span>(ST,key))</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;当前顺序表中无此元素！&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;您要查找的元素所在位序为:&quot;</span>&lt;&lt;<span class="built_in">Search_Seq</span>(ST,key)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 折半查找 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType elem[MaxSize];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(SeqList &amp;L)</span></span>&#123;</span><br><span class="line">    L.length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">AssignList</span><span class="params">(SeqList &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    ElemType x;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(L.length&gt;=MaxSize)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        L.elem[i]=x;</span><br><span class="line">        L.length++;</span><br><span class="line">        i++;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Binary_Search</span><span class="params">(SeqList L,ElemType key)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> low=<span class="number">0</span>,high=L.length<span class="number">-1</span>,mid;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">        mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(L.elem[mid]==key)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(L.elem[mid]&gt;key)</span><br><span class="line">            high=mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            low=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SeqList L;</span><br><span class="line">    <span class="built_in">InitList</span>(L);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;顺序表赋值开始，请依次输入元素：&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">AssignList</span>(L))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;输入元素个数大于顺序表长度，赋值失败！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前顺序表的长度为:&quot;</span>&lt;&lt;L.length&lt;&lt;endl;</span><br><span class="line">        <span class="type">int</span> key;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入要查找的值：&quot;</span>;</span><br><span class="line">        cin&gt;&gt;key;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Binary_Search</span>(L,key)==<span class="number">-1</span>)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;查找值失败！当前顺序表无此元素！&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;查找的元素所在数组下标为：&quot;</span>&lt;&lt;<span class="built_in">Binary_Search</span>(L,key)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 内部排序(插入排序) </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELemType int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接插入排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DirectInsertSort</span><span class="params">(ELemType A[],<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(A[i]&lt;A[i<span class="number">-1</span>])&#123;</span><br><span class="line">            A[<span class="number">0</span>]=A[i];</span><br><span class="line">            <span class="keyword">for</span>(j=i<span class="number">-1</span>;A[<span class="number">0</span>]&lt;A[j];j--)</span><br><span class="line">                A[j+<span class="number">1</span>]=A[j];</span><br><span class="line">            A[j+<span class="number">1</span>]=A[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//折半查找排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HalfInsertSort</span><span class="params">(ELemType A[],<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,low,high,mid;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        A[<span class="number">0</span>]=A[i];</span><br><span class="line">        low=<span class="number">1</span>;</span><br><span class="line">        high=i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(A[mid]&gt;A[<span class="number">0</span>])</span><br><span class="line">                high=mid<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=high+<span class="number">1</span>;j--)</span><br><span class="line">            A[j+<span class="number">1</span>]=A[j];</span><br><span class="line">        A[high+<span class="number">1</span>]=A[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShellSort</span><span class="params">(ELemType A[],<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> d,i,j;</span><br><span class="line">    <span class="keyword">for</span>(d=n/<span class="number">2</span>;d&gt;=<span class="number">1</span>;d/=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span>(i=d+<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(A[i]&lt;A[i-d])&#123;</span><br><span class="line">                A[<span class="number">0</span>]=A[i];</span><br><span class="line">                <span class="keyword">for</span>(j=i-d;j&gt;<span class="number">0</span>&amp;&amp;A[<span class="number">0</span>]&lt;A[j];j-=d)</span><br><span class="line">                    A[j+d]=A[j];</span><br><span class="line">                A[j+d]=A[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//直接插入排序</span></span><br><span class="line">    ELemType A[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">11</span>;i++)</span><br><span class="line">        cin&gt;&gt;A[i];</span><br><span class="line">    <span class="built_in">DirectInsertSort</span>(A,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">11</span>;i++)</span><br><span class="line">        cout&lt;&lt;A[i]&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//折半插入排序</span></span><br><span class="line">    ELemType B[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">11</span>;i++)</span><br><span class="line">        cin&gt;&gt;B[i];</span><br><span class="line">    <span class="built_in">HalfInsertSort</span>(B,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">11</span>;i++)</span><br><span class="line">        cout&lt;&lt;B[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//希尔排序</span></span><br><span class="line">    ELemType C[<span class="number">9</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        cin&gt;&gt;C[i];</span><br><span class="line">    <span class="built_in">ShellSort</span>(C,<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        cout&lt;&lt;C[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 内部排序(交换排序) </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELemType int </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bubblesort</span><span class="params">(ELemType A[],<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=n<span class="number">-1</span>;j&gt;i;j--)</span><br><span class="line">            <span class="keyword">if</span>(A[j<span class="number">-1</span>]&gt;A[j])&#123;</span><br><span class="line">                <span class="built_in">Swap</span>(A[j<span class="number">-1</span>],A[j]);</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="literal">false</span>)</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Partition</span><span class="params">(ELemType A[],<span class="type">int</span> low,<span class="type">int</span> high)</span></span>&#123;</span><br><span class="line">    ELemType pivot=A[low];</span><br><span class="line">    <span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;A[high]&gt;=pivot)</span><br><span class="line">            high--;</span><br><span class="line">        A[low]=A[high];</span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;A[low]&lt;=pivot)</span><br><span class="line">            low++;</span><br><span class="line">        A[high]=A[low];</span><br><span class="line">    &#125;</span><br><span class="line">    A[low]=pivot;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(ELemType A[],<span class="type">int</span> low,<span class="type">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">        <span class="type">int</span> pivotpos=<span class="built_in">Partition</span>(A,low,high);</span><br><span class="line">        <span class="built_in">QuickSort</span>(A,low,pivotpos<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">QuickSort</span>(A,pivotpos+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ELemType A[]=&#123;<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="built_in">Bubblesort</span>(A,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        cout&lt;&lt;A[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    ELemType B[]=&#123;<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="built_in">QuickSort</span>(B,<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        cout&lt;&lt;B[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 内部排序(选择排序) </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1-2.简单选择排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SelectSort</span><span class="params">(ElemType A[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;<span class="comment">//一共进行n-1趟排序</span></span><br><span class="line"><span class="type">int</span> min = i;<span class="comment">//记录最小元素位置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)<span class="comment">//再A[i...n-1]中选择最小元素</span></span><br><span class="line"><span class="keyword">if</span> (A[j] &lt; A[min])</span><br><span class="line">min = j;<span class="comment">//更新最小元素的位置</span></span><br><span class="line"><span class="keyword">if</span> (min != i)</span><br><span class="line"><span class="built_in">swap</span>(A[i], A[min]);<span class="comment">//封装的swap函数共移动元素3次</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintA</span><span class="params">(ElemType A[],<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        cout&lt;&lt;A[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2-1.堆调整(以大根堆为例)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeadAdjust</span><span class="params">(ElemType A[], <span class="type">int</span> k, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="comment">//函数HeadAdjust将元素k为根的子树进行调整</span></span><br><span class="line">A[<span class="number">0</span>] = A[k];<span class="comment">//A[0]暂存子树的根结点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span> * k; i &lt;= len; i *= <span class="number">2</span>) &#123;<span class="comment">//沿key较大的子结点向下筛选</span></span><br><span class="line"><span class="keyword">if</span> (i &lt; len &amp;&amp; A[i] &lt; A[i + <span class="number">1</span>])<span class="comment">//子树根结点的左右孩子</span></span><br><span class="line">i++;<span class="comment">//取key较大的孩子的下标</span></span><br><span class="line"><span class="keyword">if</span> (A[<span class="number">0</span>] &gt;= A[i])</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//若子树的根结点大于左右孩子，不必调整</span></span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//否则</span></span><br><span class="line">A[k] = A[i];<span class="comment">//A[i]提到子树的根结点</span></span><br><span class="line">k = i;<span class="comment">//修改k值，继续向下筛选</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">A[k] = A[<span class="number">0</span>];<span class="comment">//被筛选结点的值放入最终位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2-2.建立大根堆</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BuildMaxHeap</span><span class="params">(ElemType A[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len / <span class="number">2</span>; i &gt; <span class="number">0</span>; i--)<span class="comment">//从i=[n/2]~1,反复调整堆</span></span><br><span class="line"><span class="built_in">HeadAdjust</span>(A, i, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2-3.堆排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapSort</span><span class="params">(ElemType A[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="built_in">BuildMaxHeap</span>(A, len);<span class="comment">//建立大根堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len; i &gt; <span class="number">1</span>; i--) &#123;<span class="comment">//n-1趟的交换和调整过程</span></span><br><span class="line"><span class="built_in">swap</span>(A[i], A[<span class="number">1</span>]);<span class="comment">//输出堆顶元素(和堆底元素交换)</span></span><br><span class="line"><span class="built_in">HeadAdjust</span>(A, <span class="number">1</span>, i - <span class="number">1</span>);<span class="comment">//调整，把剩余的i-1个元素整理成堆</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2-4.输出测试</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintB</span><span class="params">(ElemType B[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len + <span class="number">1</span>; i++)</span><br><span class="line">cout&lt;&lt;B[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ElemType A[] = &#123; <span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SelectSort</span>(A, <span class="number">8</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;简单选择排序&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">PrintA</span>(A, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2、堆排序*/</span></span><br><span class="line">ElemType B[] = &#123; <span class="number">-1</span>,<span class="number">53</span>,<span class="number">17</span>,<span class="number">78</span>,<span class="number">9</span>,<span class="number">45</span>,<span class="number">65</span>,<span class="number">87</span>,<span class="number">32</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2-1.建立大根堆</span></span><br><span class="line"><span class="built_in">BuildMaxHeap</span>(B, <span class="number">8</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;建立大根堆&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">PrintB</span>(B, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2-2.堆排序</span></span><br><span class="line"><span class="built_in">HeapSort</span>(B, <span class="number">8</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;堆排序&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">PrintB</span>(B, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 内部排序(归并排序) </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.归并</span></span><br><span class="line">ElemType* B = (ElemType*)<span class="built_in">malloc</span>((LEN) * <span class="built_in">sizeof</span>(ElemType));<span class="comment">//辅助数组B</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Merge</span><span class="params">(ElemType A[], <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="comment">//表A的两段A[low...mid]和A[mid+1...high]各自有序，将它们合并成一个有序表</span></span><br><span class="line"><span class="type">int</span> i, j, k;</span><br><span class="line"><span class="keyword">for</span> (k = low; k &lt;= high; k++)</span><br><span class="line">B[k] = A[k];<span class="comment">//将A中所有元素复制到B中</span></span><br><span class="line"><span class="keyword">for</span> (i = low, j = mid + <span class="number">1</span>, k = i; i &lt;= mid &amp;&amp; j &lt;= high; k++) &#123;</span><br><span class="line"><span class="keyword">if</span> (B[i] &lt;= B[j])<span class="comment">//比较B的左右两段中的元素</span></span><br><span class="line">A[k] = B[i++];<span class="comment">//将较小值复制到A中</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">A[k] = B[j++];</span><br><span class="line">&#125;<span class="comment">//for</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">A[k++] = B[i++];<span class="comment">//若第一个表未检测完，复制</span></span><br><span class="line"><span class="keyword">while</span> (j &lt;= high)</span><br><span class="line">A[k++] = B[j++];<span class="comment">//若第二个表未检测完，复制</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.归并主过程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeSort</span><span class="params">(ElemType A[], <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line"><span class="type">int</span> mid = (low + high) / <span class="number">2</span>;<span class="comment">//从中间划分两个子序列</span></span><br><span class="line"><span class="built_in">MergeSort</span>(A, low, mid);<span class="comment">//对左侧子序列进行递归排序</span></span><br><span class="line"><span class="built_in">MergeSort</span>(A, mid + <span class="number">1</span>, high);<span class="comment">//对右侧子序列进行递归排序</span></span><br><span class="line"><span class="built_in">Merge</span>(A, low, mid, high);<span class="comment">//归并</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.输出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(ElemType A[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">cout&lt;&lt;A[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ElemType A[] = &#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>&#125;;</span><br><span class="line"><span class="built_in">MergeSort</span>(A, <span class="number">0</span>, LEN<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">Print</span>(A, LEN);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 🎈c puls plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧c plus plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++教程</title>
      <link href="/2023/07/02/C-%E6%95%99%E7%A8%8B/"/>
      <url>/2023/07/02/C-%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一门很厉害的语言。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一门让你掉头发的语言。<br><!-- <details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details></p><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details> --><h1 id="c-初识"><a href="#c-初识" class="headerlink" title="c++初识"></a>c++初识</h1><details class="folding-tag" yellow><summary> c plus plus初识 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 常量 </summary>              <div class='content'>              <p>C++定义常量两种放式：</p><p>1：#define 宏常量： define 常量名 常量值</p><p>  通常在文件上方定义 表示一个常量</p><p>2： const 修饰的变量 const   数据类型 常量名 =常量值</p><p>  通常在变量定义前加关键字const，修饰该变量为常量，不可修改</p><p><br/></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># denfine day 7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;一周共有&quot;</span>&lt;&lt;day&lt;&lt;<span class="string">&quot;天&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const 修饰的变量</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> month=<span class="number">12</span>;    <span class="comment">//正常的变量</span></span><br><span class="line">  <span class="type">const</span> <span class="type">int</span> month=<span class="number">12</span>;  <span class="comment">//加了const变为不可修改的常量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 标识符 </summary>              <div class='content'>              <ul><li>标识符不能是关键字</li><li><p>标识符只能由字母，数字，下划线组成</p></li><li><p>第一个字符必须为字母或下划线</p></li><li>标识符中字母是区分大小写的</li></ul>              </div>            </details>              </div>            </details><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><details class="folding-tag" yellow><summary> 数据类型 </summary>              <div class='content'>              <details class="folding-tag" green><summary> 整形 </summary>              <div class='content'>              <p><br/></p><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th>占用空间</th></tr></thead><tbody><tr><td style="text-align:center">short（短整型）</td><td>2字节</td></tr><tr><td style="text-align:center">int（整形）</td><td>4字节</td></tr><tr><td style="text-align:center">long（长整型）</td><td>Windows4字节</td></tr><tr><td style="text-align:center">long long（长长整形）</td><td>8字节</td></tr></tbody></table></div>              </div>            </details><details class="folding-tag" red><summary> 浮点型 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">专用空间</th><th style="text-align:center">位数</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4字节</td><td style="text-align:center">6~7位有效数字</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8字节</td><td style="text-align:center">15~16位有效数字</td></tr><tr><td style="text-align:center">long double</td><td style="text-align:center">8字节</td><td style="text-align:center">15~16位有效数字</td></tr></tbody></table></div><hr><p><br/></p><p>保留小数点后几位格式：</p><pre><code>1：头文件：#include&lt;iomanip&gt;2：输出格式：cout&lt;&lt;fixed&lt;&lt;setprecision( 1 )&lt;&lt;a&lt;&lt;endl;              //setprecision( 填写保留的位数 )</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">float</span> a=<span class="number">2.5</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">float</span> b=<span class="number">1.5</span>;</span><br><span class="line">    <span class="type">int</span> c,d;</span><br><span class="line">    <span class="type">float</span> e;</span><br><span class="line">    cin&gt;&gt;c&gt;&gt;d;</span><br><span class="line">    e=((c<span class="number">-1</span>)*a)+(d*b);</span><br><span class="line">    cout&lt;&lt;fixed&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">1</span>)&lt;&lt;e&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> sizeof </summary>              <div class='content'>              <p>利用sizeof关键字可以统计数据类型所占用的大小空间</p><p>语法：sizeof（数据类型/变量）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">short</span> num1=<span class="number">100</span>;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;short所占用的字节数为&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(num1)&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 实型 </summary>              <div class='content'>              <p>单精度：float</p><p>双精度：double</p><p>c++在默认情况下，输出一个小数，会显示6位有效数字</p><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">占用空间</th><th style="text-align:center">有效数字范围</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4字节</td><td style="text-align:center">7位有效数字</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8字节</td><td style="text-align:center">15-16位有效数字</td></tr></tbody></table></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//1；单精度</span></span><br><span class="line">  <span class="type">float</span> f1 =<span class="number">3.14f</span>;  <span class="comment">//加f是转换为单精度类型</span></span><br><span class="line">  <span class="comment">//2：双精度</span></span><br><span class="line">  <span class="type">double</span> f2=<span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>科学计数法</p><p>float f2 =3e2;      //3*10^2</p><p>float f3=3e-2    //3*0.1^2</p>              </div>            </details><details class="folding-tag" red><summary> 字符型 </summary>              <div class='content'>              <p>作用：字符型变量用于显示单个字符</p><p>语法：char ch=’a’;</p><ul><li><p>在显示字符型变量时，用单引号将字符括起来，不能用双引号</p></li><li><p>单引号内只能有一个字符，不可以是字符串</p></li></ul><p>==c和c++中只占用1个字节==</p>              </div>            </details><details class="folding-tag" blue><summary> 转义字符 </summary>              <div class='content'>              <p>作用：用于表示一些不能显示出来的ASCII字符</p><p>现阶段常用的转义字符有：\n    \ \    \t</p><p>\n 换行，将当前位置移到下一行开头</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;<span class="string">&quot;hello world \n&quot;</span></span><br></pre></td></tr></table></figure><p>\ \ 代表一个反斜杠字符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;<span class="string">&quot;hello world \\&quot;</span></span><br></pre></td></tr></table></figure><p>\t 水平制表，（跳到下一个tab位置）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;<span class="string">&quot;hello world \t&quot;</span>&lt;&lt;<span class="string">&quot;aaa&quot;</span>&lt;&lt;endl;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 字符串类型 </summary>              <div class='content'>              <p>C风格字符串： char 变量名【】=“字符串值”</p><p>==字符串为双引号，字符为单引号==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> str1[]=<span class="string">&quot;hello world&quot;</span></span><br><span class="line">  cout&lt;&lt;str1&lt;&lt;endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++风格字符串： string 变量名 =“字符串值”</p><p>==必须加头文件  #include<string>==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string str2=<span class="string">&quot;hello world&quot;</span></span><br><span class="line">  cout&lt;&lt;str2&lt;&lt;endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 布尔数据类型 </summary>              <div class='content'>              <p>bool类型只有两个值：(bool 只占用1个字节)</p><ul><li>true ~~~~真（本质是1）</li><li>flase ~~~~假（本质是0）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">  cout&lt;&lt;flag&lt;&lt;endl;</span><br><span class="line">  flag =<span class="literal">false</span>;</span><br><span class="line">  cour&lt;&lt;flag&lt;&lt;endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><details class="folding-tag" yellow><summary> 运算符 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 算数运算符 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">术语</th><th style="text-align:center">示例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td><td style="text-align:center">10+5</td><td style="text-align:center">15</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td><td style="text-align:center">10-5</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td><td style="text-align:center">10*5</td><td style="text-align:center">50</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除</td><td style="text-align:center">10/5</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取模</td><td style="text-align:center">10%3</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">++</td><td style="text-align:center">前置递增</td><td style="text-align:center">a=2;b=++a</td><td style="text-align:center">a=3;b=3</td></tr><tr><td style="text-align:center">++</td><td style="text-align:center">后置递增</td><td style="text-align:center">a=2;b=a++</td><td style="text-align:center">a=3;b=2</td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">前置递减</td><td style="text-align:center">a=2;b=—a</td><td style="text-align:center">a=1;b=1</td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">后置递减</td><td style="text-align:center">a=2;b=a—</td><td style="text-align:center">a=1;b=2</td></tr></tbody></table></div><p>前置递增</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">  ++a;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;a=&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后置递增</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line">  b++;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;b=&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==区别 ==</p><pre><code>$==前置递增先让变量+1然后再进行表达式的运算==$==后置递增 先进行表达式的运算，再让变量+1==</code></pre>              </div>            </details><details class="folding-tag" green><summary> 赋值运算符 </summary>              <div class='content'>              <p><br/></p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">术语</th><th style="text-align:center">示例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">赋值</td><td style="text-align:center">a=2;b=3</td><td style="text-align:center">a=2;b=3</td></tr><tr><td style="text-align:center">+=</td><td style="text-align:center">加等于</td><td style="text-align:center">a=0;a+=2</td><td style="text-align:center">a=2</td></tr><tr><td style="text-align:center">-=</td><td style="text-align:center">减等于</td><td style="text-align:center">a=5;a-=3</td><td style="text-align:center">a=2</td></tr><tr><td style="text-align:center">*=</td><td style="text-align:center">乘等于</td><td style="text-align:center">a=2;a*=2</td><td style="text-align:center">a=4</td></tr><tr><td style="text-align:center">/=</td><td style="text-align:center">除等于</td><td style="text-align:center">a=4;a/=2</td><td style="text-align:center">a=2</td></tr><tr><td style="text-align:center">%=</td><td style="text-align:center">模等于</td><td style="text-align:center">a=3;a%=2;</td><td style="text-align:center">a=1</td></tr></tbody></table></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">  a+=<span class="number">2</span>;  <span class="comment">//a=a+2  =&gt; a=10+2;</span></span><br><span class="line">  cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">  a%=<span class="number">2</span>;   <span class="comment">//a=a%2  =&gt;a=10%2;</span></span><br><span class="line">  cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 比较运算符 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">术语</th><th style="text-align:center">示例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">==</td><td style="text-align:center">相等于</td><td style="text-align:center">4==3</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">！=</td><td style="text-align:center">不等于</td><td style="text-align:center">4！=3</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td><td style="text-align:center">4&lt;3</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td><td style="text-align:center">4&gt;3</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">小等于</td><td style="text-align:center">4&lt;=3</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">大等于</td><td style="text-align:center">4&gt;=3</td><td style="text-align:center">1</td></tr></tbody></table></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line">  cout&lt;&lt;(a&lt;b)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;(a!=<span class="number">10</span>)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;(a&lt;=<span class="number">10</span>)&lt;&lt;endl</span><br><span class="line">  cout&lt;&lt;(a==<span class="number">10</span>)&lt;&lt;endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" bule><summary> 逻辑运算符 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">术语</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">！</td><td style="text-align:center">非</td><td style="text-align:center">！a</td></tr><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">与</td><td style="text-align:center">a&amp;&amp;b</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center"></td><td style="text-align:center"></td><td>或</td><td>a\</td><td></td><td>b</td></tr></tbody></table></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> b=<span class="number">20</span>;</span><br><span class="line">  <span class="comment">//在C++中 除了0 都为真</span></span><br><span class="line">  cout&lt;&lt;!a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;!!a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;(a&amp;&amp;b)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;(a||b)&lt;&lt;endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="程序流程结构"><a href="#程序流程结构" class="headerlink" title="程序流程结构"></a>程序流程结构</h1><details class="folding-tag" yellow><summary> 程序流程结构 </summary>              <div class='content'>              <details class="folding-tag" red><summary> 选择结构 </summary>              <div class='content'>              <h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><h3 id="单行if语句"><a href="#单行if语句" class="headerlink" title="单行if语句"></a>单行if语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> score;</span><br><span class="line">  cin&gt;&gt;score;</span><br><span class="line">  <span class="keyword">if</span>(score&gt;<span class="number">60</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;及格&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多行if语句"><a href="#多行if语句" class="headerlink" title="多行if语句"></a>多行if语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> score;</span><br><span class="line">  cin&gt;&gt;score;</span><br><span class="line">  <span class="keyword">if</span>(score&gt;<span class="number">60</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;及格&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;不及格&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多条件if语句"><a href="#多条件if语句" class="headerlink" title="多条件if语句"></a>多条件if语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> score;</span><br><span class="line">  cin&gt;&gt;score;</span><br><span class="line">  <span class="keyword">if</span>(score&gt;<span class="number">80</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;优秀&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(score&gt;<span class="number">60</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;一般&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> (score&lt;<span class="number">60</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;继续加油&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><p>==语法：表达式1 ？表达式2 ：表达式3==</p><p>如果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表达式1的值为真，执行表达式2的结果</span><br><span class="line"></span><br><span class="line">表达式2的值为假，执行表达式3的结果</span><br></pre></td></tr></table></figure><h2 id="Switch语句"><a href="#Switch语句" class="headerlink" title="Switch语句"></a>Switch语句</h2><p>==作用：执行多条件分支语句==</p><p>缺点：判断的时候只能是整形或者是字符型，不可以是一个区间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">case</span> 结果<span class="number">1</span>：执行语句；<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 结果<span class="number">2</span>：执行语句；<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 结果<span class="number">3</span>：执行语句；<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 结果<span class="number">4</span>：执行语句；<span class="keyword">break</span>;</span><br><span class="line">  …………</span><br><span class="line">  <span class="keyword">default</span>: 执行语句；<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> score;</span><br><span class="line">  cin&gt;&gt;score;</span><br><span class="line">  <span class="keyword">switch</span>(score)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>: cout&lt;&lt;<span class="string">&quot;您认为是经典电影&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>: cout&lt;&lt;<span class="string">&quot;您认为是一般电影&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: cout&lt;&lt;<span class="string">&quot;您认为是尿片电影&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: cout&lt;&lt;<span class="string">&quot;您认为是辣鸡电影&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>： cout&lt;&lt;<span class="string">&quot;您认为是烂片&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 循环结构 </summary>              <div class='content'>              <h2 id="while循环语句（先买票再上船）"><a href="#while循环语句（先买票再上船）" class="headerlink" title="while循环语句（先买票再上船）"></a>while循环语句（先买票再上船）</h2><p>==语法： while（循环条件）{ 循环语句 }==</p><p>==解释： 只要循环条件为真，就执行循环语句==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(num&lt;<span class="number">10</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dowhile循环语句-先上船再买票"><a href="#dowhile循环语句-先上船再买票" class="headerlink" title="dowhile循环语句(先上船再买票)"></a>dowhile循环语句(先上船再买票)</h2><p>==语法： do{ 循环语句 }  while { 循环语句 }==</p><p>==区别： 与while语句的区别在于do……while会先执行一次循环语句，再判断循环条件==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    num++</span><br><span class="line">  &#125;<span class="keyword">while</span>(num&lt;<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h2><p>==for（起始表达式；条件表达式；末尾循环体）{ 循环语句； }==</p><h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2>              </div>            </details><details class="folding-tag" green><summary> 跳转语句 </summary>              <div class='content'>              <h2 id="while循环语句（先买票再上船）"><a href="#while循环语句（先买票再上船）" class="headerlink" title="while循环语句（先买票再上船）"></a>while循环语句（先买票再上船）</h2><p>==语法： while（循环条件）{ 循环语句 }==</p><p>==解释： 只要循环条件为真，就执行循环语句==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(num&lt;<span class="number">10</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dowhile循环语句-先上船再买票"><a href="#dowhile循环语句-先上船再买票" class="headerlink" title="dowhile循环语句(先上船再买票)"></a>dowhile循环语句(先上船再买票)</h2><p>==语法： do{ 循环语句 }  while { 循环语句 }==</p><p>==区别： 与while语句的区别在于do……while会先执行一次循环语句，再判断循环条件==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    num++</span><br><span class="line">  &#125;<span class="keyword">while</span>(num&lt;<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h2><p>==for（起始表达式；条件表达式；末尾循环体）{ 循环语句； }==</p><h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2>              </div>            </details>              </div>            </details><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><details class="folding-tag" yellow><summary> 数组 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 一维数组 </summary>              <div class='content'>              <h2 id="一维数组的定义方式"><a href="#一维数组的定义方式" class="headerlink" title="一维数组的定义方式"></a>一维数组的定义方式</h2><ol><li>数据类型 数组名【数组长度】</li><li>数据类型 数组名【数组长度】={ 值1，值2，值3，…… }</li><li>数据类型 数组名【】={ 值1，值2，值3，…… }</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> score[<span class="number">5</span>];</span><br><span class="line">  score[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">  score[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">  score[<span class="number">2</span>]=<span class="number">3</span>;</span><br><span class="line">  score[<span class="number">3</span>]=<span class="number">4</span>;</span><br><span class="line">  score[<span class="number">4</span>]=<span class="number">5</span>;</span><br><span class="line">  <span class="type">int</span> list[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;</span><br><span class="line">  <span class="type">int</span> num[]=&#123;A,B,C,D,E,F,G&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一维数组名的用途"><a href="#一维数组名的用途" class="headerlink" title="一维数组名的用途"></a>一维数组名的用途</h3><p>==1：可以统计整个数组在内存中的长度==</p><p>==2：可以获取数组在内存中的首地址==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//1：可以统计整个数组在内存中的长度</span></span><br><span class="line">  <span class="type">int</span> score[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;整个数组所占内存空间为&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(score)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;每个元素所占空间为&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(score[<span class="number">0</span>])&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;数组的元素个数为&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(score)/<span class="built_in">sizeof</span>(score[<span class="number">0</span>])&lt;&lt;endl;</span><br><span class="line">  <span class="comment">//2：可以获取数组在内存中的首地址</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;数组的首地址为: &quot;</span>&lt;&lt;(<span class="type">int</span>)score&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;数组第一个元素地址为&quot;</span>&lt;&lt;(<span class="type">int</span>)&amp;score[<span class="number">0</span>]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 二维数组 </summary>              <div class='content'>              <h2 id="二维数组的定义方式"><a href="#二维数组的定义方式" class="headerlink" title="二维数组的定义方式"></a>二维数组的定义方式</h2><ol><li>数据类型 数组名[ 行数 ] [ 列数 ]；</li><li>数据类型 数组名[ 行数 ] [ 列数 ]={ { 数据1，数据2 }，{ 数据2，数据4 } }；</li><li>数据类型 数组名[ 行数 ] [ 列数 ]={ 数据1，数据2，数据3，数据4…… }；</li><li><p>数据类型 数组名[   ] [ 列数 ]={ 数据1，数据2，数据3，数据4…… }；</p><p>==不可以写成 数据类型 数组名 [ 行数 ] [  ] 等于 { 数据1，数据2，数据3，数据4…… }；==</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> arr[][<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组数组名"><a href="#二维数组数组名" class="headerlink" title="二维数组数组名"></a>二维数组数组名</h3><p>1：查看二维数组所占内存空间</p><p>2：获取二维数组首地址</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> score[<span class="number">2</span>][<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;查看二维数组所占内存空间：&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(score)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;获取二维数组一行大小：&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(score[<span class="number">0</span>])&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;获取二维数组元素大小：&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(score[<span class="number">0</span>][<span class="number">0</span>])&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;获取二维数组首地址 &quot;</span>&lt;&lt;(<span class="type">int</span>)&amp;score&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;获取二维数组第一个元素地址&quot;</span>&lt;&lt;(<span class="type">int</span>)&amp;score[<span class="number">0</span>][<span class="number">0</span>]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 冒泡排序 </summary>              <div class='content'>              <p>1：比较相邻的元素。如果第一个比第二个大，就交换两个数</p><p>2：对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值 </p><p>3：重复以上步骤，每次比较次数-1，直到不需要比较</p><p><br/></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> arr[<span class="number">9</span>]=&#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span><span class="number">-1</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span><span class="number">-1</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="type">int</span> temp=arr[j];</span><br><span class="line">        arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">        arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><details class="folding-tag" yellow><summary> 程序流程结构 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 函数的定义 </summary>              <div class='content'>              <h2 id="函数的定义一般主要有5个步骤："><a href="#函数的定义一般主要有5个步骤：" class="headerlink" title="函数的定义一般主要有5个步骤："></a>函数的定义一般主要有5个步骤：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">==1：返回值类型：一个函数可以返回一个值。在函数定义中==</span><br><span class="line"></span><br><span class="line">==2：函数名：给函数起个名称==</span><br><span class="line"></span><br><span class="line">==3：参数列表：使用函数时，传入的数据==</span><br><span class="line"></span><br><span class="line">==4：函数体语句：花括号内的代码，函数内需要执行的语句==</span><br><span class="line"></span><br><span class="line">==5：return表达式：和返回值类型挂钩，函数执行完后，返回相应的数据==</span><br></pre></td></tr></table></figure><p><br/></p><hr><p>语法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名（参数列表）</span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  函数体语句</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> 表达式</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br/></p><p>例子：</p><blockquote><p>实现一个加法函数，功能为：传入两个整形数据，计算数据相加的结果，并且返回</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> sum=num1+num2;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 函数的调用 </summary>              <div class='content'>              <p>==功能：使用定义好的函数==</p><p>==语法：函数名（参数）==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> sun=num1+num2;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line">  <span class="comment">//调用add函数</span></span><br><span class="line">  <span class="type">int</span> sum=<span class="built_in">add</span>(a,b)</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;sum= &quot;</span>&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 值传递 </summary>              <div class='content'>              <p>==所谓值传递，就是 函数调用时实参将数值传入给形参==</p><p>==值传递，如果形参发生，并不会影响实参==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;交换前:&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;num1=&quot;</span>&lt;&lt;num1&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;num2=&quot;</span>&lt;&lt;num2&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> temp=num1;</span><br><span class="line">  num1=num2;</span><br><span class="line">  num2=temp;</span><br><span class="line">  </span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;交换后:&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;num1=&quot;</span>&lt;&lt;num1&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;num2=&quot;</span>&lt;&lt;num2&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//return ；当函数声明的时候，不需要返回值，可以不写return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> b=<span class="number">20</span>;</span><br><span class="line">  <span class="built_in">swap</span>(a,b);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" ><summary> 函数的常见样式 </summary>              <div class='content'>              <p>==常见的函数样式有4种==</p><pre><code>==1：无参无返====2：有参无返====3：无参有饭====4：有参有返==</code></pre><hr><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1：无参无饭</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;代码太难了&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2：有参无返</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;this is test2 a= &quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3：无参有返</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;this is test3 &quot;</span>&lt;&lt;endl;</span><br><span class="line">  teturn <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4：有参有返</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test4</span><span class="params">(<span class="type">int</span> b,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sum=s1+s2;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//无参无饭函数调用</span></span><br><span class="line">  <span class="built_in">test1</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//有参无返函数调用</span></span><br><span class="line">  <span class="built_in">test2</span>(<span class="number">100</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//无参有返函数调用</span></span><br><span class="line">  <span class="type">int</span> c=<span class="built_in">test3</span>();</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;c= &quot;</span>&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//有参有返函数调用</span></span><br><span class="line">  <span class="type">int</span> s1=<span class="number">100</span>;</span><br><span class="line">  <span class="type">int</span> s2=<span class="number">200</span>;</span><br><span class="line">  <span class="type">int</span> sum=<span class="built_in">test4</span>(s1,s2);</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;sum=&quot;</span>&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 函数的声明 </summary>              <div class='content'>              <p>==作用：告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义==</p><p>==函数声明可以多次，但是函数的定义只能有一次==</p><hr><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="comment">//比较函数，实现两个整形数字进行比较，返回较大的值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>   <span class="comment">//提前声明</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> b=<span class="number">20</span>;</span><br><span class="line">  <span class="type">int</span> c=<span class="built_in">max</span>(a,b);</span><br><span class="line">  cout&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 函数的分文件编写 </summary>              <div class='content'>              <p>==作用：让代码结构更加清晰==</p><p><br/></p><p>==函数分文件编写一般有4个步骤==</p><pre><code>1：创建后缀名为.h的头文件2：创建后缀名为.cpp的源文件3：在头文件中写函数声明4：在源文件中写函数的定义</code></pre>              </div>            </details>              </div>            </details><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><details class="folding-tag" yellow><summary> 指针 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 指针变量的定义和使用 </summary>              <div class='content'>              <h2 id="指针的基本概念"><a href="#指针的基本概念" class="headerlink" title="指针的基本概念"></a>指针的基本概念</h2><p>==指针的作用：可以通过指针间接访问内存==</p><ul><li>内存编号是从0开始记录的，一般用十六进制的数字表示</li><li>可以利用指针变量保存地址</li></ul><h2 id="指针变量的定义和使用"><a href="#指针变量的定义和使用" class="headerlink" title="指针变量的定义和使用"></a>指针变量的定义和使用</h2><p>==指针定义的语法：数据类型 * 指针变量名；==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//1：定义指针</span></span><br><span class="line">  <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> *p；   <span class="comment">//定义指针</span></span><br><span class="line">  p=&amp;a;      <span class="comment">//让指针记录a的地址</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;a的地址为：&quot;</span>&lt;&lt;&amp;a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;指针p为：&quot;</span>&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">  <span class="comment">//2：使用指针</span></span><br><span class="line">  <span class="comment">//可以通过解引用（指针前面加一个*   被称为解引用的操作）的方式来找到指针指向的内存</span></span><br><span class="line">  *p=<span class="number">1000</span>;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;a= &quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;*p= &quot;</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 指针所占的内存空间 </summary>              <div class='content'>              <p>指针也是种数据类型:：占用4个字节（32位）8个字节（64位）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> a;</span><br><span class="line">  <span class="type">int</span> *p=&amp;a;</span><br><span class="line">  <span class="comment">//不管什么数据类型都占4个字节</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;sizeof(int*)= &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(p)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;sizeof(int*)= &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">int</span> *)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;sizeof(double*)= &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">double</span> *)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;sizeof(float*)= &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">float</span> *)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;sizeof(char*)= &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">char</span> *)&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 空指针和野指针 </summary>              <div class='content'>              <h2 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h2><p>==空指针：指针变量指向内存中编号为0的空间==</p><p>==用途：初始化指针变量==</p><p>==注意：空指针指向的内存是不可以访问的==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//指针变量p指向内存编号为0的内存</span></span><br><span class="line">  <span class="type">int</span> *p=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="comment">//空指针指向的内存是不可以访问的</span></span><br><span class="line">  *p =<span class="number">100</span>;    <span class="comment">//显示不能访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h2><p>==野指针：指针变量指向非法的内存空间==</p><p>在操作中尽量避免野指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> *p=(<span class="type">int</span> *)<span class="number">0x1100</span>;   <span class="comment">//野指针</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" bule><summary> const修饰指针 </summary>              <div class='content'>              <p>==const修饰指针的三种情况==</p><ul><li><p>const修饰指针   ——— 常量指针</p><p>特点：指针的指向可以修改，但是指针指向的值不可以修改</p></li><li><p>const修饰常量   ———指针常量</p><p>特点：  指针的指向不可以修改，但是指针指向的值可以修改</p></li><li>const即修饰指针，有修饰常量</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"> <span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line"> <span class="type">int</span> *p=&amp;a;</span><br><span class="line"> <span class="type">const</span> <span class="type">int</span> *p=&amp;a;             <span class="comment">//常量指针</span></span><br><span class="line"> <span class="type">int</span> * <span class="type">const</span> p=&amp;a;           <span class="comment">//指针常量</span></span><br><span class="line"> <span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p=&amp;a;     <span class="comment">//const即修饰指针，有修饰常量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 指针和数组 </summary>              <div class='content'>              <p>==作用：利用指针访问数组中的元素==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">  <span class="type">int</span> *p=arr;   <span class="comment">//arr就是数组首地址</span></span><br><span class="line">  <span class="comment">//p++;</span></span><br><span class="line">  <span class="comment">//cout&lt;&lt;&quot;利用指针访问第二个元素：&quot;&lt;&lt;*p&lt;&lt;endl;</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">    p++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 指针和函数 </summary>              <div class='content'>              <p>==作用：利用指正作为函数参数，可以修改实参的值==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> temp=a;</span><br><span class="line">  a=b;</span><br><span class="line">  b=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap2</span><span class="params">(<span class="type">int</span> *p1,<span class="type">int</span> *p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> temp=*p1;</span><br><span class="line">  *p1=*p2;</span><br><span class="line">  *p2=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//指针和函数</span></span><br><span class="line">  <span class="comment">//1:值传递</span></span><br><span class="line">  <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> b=<span class="number">20</span>;</span><br><span class="line">  <span class="built_in">swap1</span>(a,b);</span><br><span class="line">  <span class="comment">//2:地址传递    ///地址传输可以修改实参</span></span><br><span class="line">  <span class="built_in">swap2</span>(&amp;a,&amp;b);</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;a= &quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;b= &quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 指针、数组、函数 </summary>              <div class='content'>              <p>案例：封装一个函数，利用冒泡排序，实现对整形数组的升序排序</p><p>数组：int arr[10]={4,3,6,9,1,2,10,8,7,5};</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="type">int</span> *arr,<span class="type">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length<span class="number">-1</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;length-i<span class="number">-1</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="type">int</span> temp=arr[j];</span><br><span class="line">        arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">        arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArray</span><span class="params">(<span class="type">int</span> *arr,<span class="type">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;arr[i]&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span>&#125;;</span><br><span class="line">  <span class="type">int</span> length=<span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">bubbleSort</span>(arr,length);</span><br><span class="line">  <span class="built_in">printArray</span>(arr,length);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><details class="folding-tag" yellow><summary> 结构体 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 结构体定义和使用 </summary>              <div class='content'>              <h2 id="结构体的基本概念"><a href="#结构体的基本概念" class="headerlink" title="结构体的基本概念"></a>结构体的基本概念</h2><p>结构体属于用户自定义的数据类型，允许用户储存不同的数据类型</p><p><br/></p><h2 id="结构体定义和使用"><a href="#结构体定义和使用" class="headerlink" title="结构体定义和使用"></a>结构体定义和使用</h2><p>==语法：struct 结构体名{ 结构体成员列表 } ；==</p><p>通过结构体创建变量的方式有三种：</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 ={ 成员1值，成员2值…… }</li><li>定义结构体时顺便创建变量</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">studnet</span>&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="type">bool</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">studnet</span>&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="type">bool</span> sex;</span><br><span class="line">&#125;s3;</span><br><span class="line"><span class="comment">//同过学生类型来创建具体学生</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//1. struct student s1</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">student</span> s1;    <span class="comment">//给s1属性赋值通过.访问结构体变量中的属性(创建变量时struct可以省略)</span></span><br><span class="line">  s1.name=<span class="string">&quot;张三&quot;</span>；</span><br><span class="line">  s1.age=<span class="number">18</span>;</span><br><span class="line">  s1.sex=<span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;姓名: &quot;</span>&lt;&lt;s1.name&lt;&lt;<span class="string">&quot;年龄：&quot;</span>&lt;&lt;s1.age&lt;&lt;<span class="string">&quot;性别 &quot;</span>&lt;&lt;s1.sex&lt;&lt;endl;</span><br><span class="line">  <span class="comment">//2. struct student s2=&#123; .... &#125;;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">student</span> s2=&#123;<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">0</span>&#125;;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;姓名: &quot;</span>&lt;&lt;s2.name&lt;&lt;<span class="string">&quot;年龄：&quot;</span>&lt;&lt;s2.age&lt;&lt;<span class="string">&quot;性别 &quot;</span>&lt;&lt;s2.sex&lt;&lt;endl;</span><br><span class="line">  <span class="comment">//在定义结构体时顺便创建变量</span></span><br><span class="line">  s3.name=<span class="string">&quot;王五&quot;</span>;</span><br><span class="line">  s3.age=<span class="number">200</span>;</span><br><span class="line">  s3.sex=<span class="number">1</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;姓名: &quot;</span>&lt;&lt;s3.name&lt;&lt;<span class="string">&quot;年龄：&quot;</span>&lt;&lt;s3.age&lt;&lt;<span class="string">&quot;性别 &quot;</span>&lt;&lt;s3.sex&lt;&lt;endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" ><summary> 结构体数组 </summary>              <div class='content'>              <p>==作用：将自定义的结构体放入到数组中方便维护==</p><p><strong>语法：struct 结构体名 数组名[ 元素个数 ]={ { }，{ }，{ }，…… }</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="type">int</span> sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//创建结构体数组</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">student</span> arr[<span class="number">3</span>]</span><br><span class="line">  &#123;</span><br><span class="line">    &#123;<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;李四&quot;</span>,<span class="number">20</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;王五&quot;</span>,<span class="number">19</span>,<span class="number">0</span>&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//给结构体数组中的元素赋值</span></span><br><span class="line">  arr[<span class="number">2</span>].name=<span class="string">&quot;赵六&quot;</span>;</span><br><span class="line">  arr[<span class="number">2</span>].age=<span class="number">28</span>;</span><br><span class="line">  <span class="comment">//遍历结构体数组</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;arr[i].name&lt;&lt;arr[i].age&lt;&lt;arr[i].sex&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 结构体指针 </summary>              <div class='content'>              <p>==作用：通过指针访问结构体中的成员==</p><p>利用操作符-&gt;可以通过结构体指针访问结构体属性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义学生的结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="type">int</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//创建学生结构体变量</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">student</span> s1=&#123;<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="comment">//通过指针指向结构体变量</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">student</span> *p=&amp;s1;</span><br><span class="line">  <span class="comment">//通过指针访问结构体变量的数据</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;姓名：&quot;</span>&lt;&lt;p-&gt;name&lt;&lt;<span class="string">&quot;年龄：&quot;</span>&lt;&lt;p-&gt;age&lt;&lt;<span class="string">&quot;性别：&quot;</span>&lt;&lt;p-&gt;sex&lt;&lt;endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 结构体嵌套结构体 </summary>              <div class='content'>              <p>==作用：结构体中的成员可以是另一个结构体==</p><p>==例如：每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="type">int</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">teacher</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> id;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">student</span> stu;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  teacher t;</span><br><span class="line">  t.id=<span class="number">100</span>;</span><br><span class="line">  t.name=<span class="string">&quot;老王&quot;</span>；</span><br><span class="line">  t.age=<span class="number">30</span>;</span><br><span class="line">  t.stu.name=<span class="string">&quot;小王&quot;</span>；</span><br><span class="line">  t.stu.age=<span class="number">20</span>;</span><br><span class="line">  t.stu.sex=<span class="number">0</span>;</span><br><span class="line">  <span class="comment">//打印</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;老师姓名：&quot;</span>&lt;&lt;t.name&lt;&lt;<span class="string">&quot;老师编号：&quot;</span>&lt;&lt;t.id&lt;&lt;<span class="string">&quot;老师年龄：&quot;</span>&lt;&lt;t.age&lt;&lt;<span class="string">&quot;学生姓名&quot;</span>&lt;&lt;t.stu.name&lt;&lt;<span class="string">&quot;学生年龄&quot;</span>&lt;&lt;t.stu.age&lt;&lt;endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 结构体做函数参数 </summary>              <div class='content'>              <p>==作用：将结构体作为参数向函数中传递==</p><p>==传递方式有两种：==</p><ul><li>==值传递==</li><li>==地址传递==</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义学生结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印学生信息</span></span><br><span class="line"><span class="comment">//1:值传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printstudent1</span><span class="params">(<span class="keyword">struct</span> student s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;子函数中 姓名：&quot;</span>&lt;&lt;s.name&lt;&lt;<span class="string">&quot;年龄：&quot;</span>&lt;&lt;s.age&lt;&lt;<span class="string">&quot;性别：&quot;</span>&lt;&lt;s.sex&lt;&lt;endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2：地址传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printstudent2</span><span class="params">(<span class="keyword">struct</span> student *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;子函数2中 姓名：&quot;</span>&lt;&lt;p-&gt;name&lt;&lt;<span class="string">&quot;年龄：&quot;</span>&lt;&lt;p-&gt;age&lt;&lt;<span class="string">&quot;性别：&quot;</span>&lt;&lt;p-&gt;sex&lt;&lt;endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建结构体变量</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">student</span> s;</span><br><span class="line">    s.name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    s.age=<span class="number">18</span>;</span><br><span class="line">    s.sex=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printstudent1</span>(s);</span><br><span class="line">    <span class="built_in">printstudent2</span>(&amp;s);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 结构体中const使用场景 </summary>              <div class='content'>              <p>==作用：用const来防止误操作==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="type">int</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printstudent</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> student *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;s-&gt;name&lt;&lt;s-&gt;age&lt;&lt;s-&gt;sex&lt;&lt;endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">student</span> s=&#123;<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="built_in">printstudent</span>(&amp;s);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 结构体案例1 </summary>              <div class='content'>              <p><strong>案例描述：</strong><br>学校正在做毕设项目，每名老师带领5个学生，总共有8名老师，需求如下：<br>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员<br>学生的成员有姓名，考试分数，创建数组存放3名老师 ，通过函数给每个老师及所带学生赋值<br>最终打印出老师数据以及老师所带学生数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span>  <span class="title class_">teacher</span>&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">student</span> stu[<span class="number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">allocatespace</span><span class="params">(<span class="keyword">struct</span> teacher arr[],<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string nameseed=<span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line">  <span class="type">int</span> scorel[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    arr[i].name=<span class="string">&quot;Teacher_a&quot;</span>;</span><br><span class="line">    arr[i].name+=nameseed[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      arr[i].stu[j].name=<span class="string">&quot;Student_&quot;</span>;</span><br><span class="line">      arr[i].stu[j].name+=nameseed[j];</span><br><span class="line">      arr[i].stu[j].score=scorel[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printInfo</span><span class="params">(<span class="keyword">struct</span> teacher arr[],<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;老师姓名：&quot;</span>&lt;&lt;arr[i].name&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;\t老师学生姓名：&quot;</span>&lt;&lt;arr[i].stu[j].name&lt;&lt;endl&lt;&lt;<span class="string">&quot;\t成绩：&quot;</span>&lt;&lt;arr[i].stu[j].score&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">teacher</span> arr[<span class="number">3</span>];</span><br><span class="line">  <span class="type">int</span> len=<span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">allocatespace</span>(arr,len);</span><br><span class="line">  <span class="built_in">printInfo</span>(arr,len);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 结构体案例2 </summary>              <div class='content'>              <p><strong>案例描述：</strong></p><p>设计一个英雄的结构体，包括成员姓名，年龄，性别；创建结构体数据数组，数组中存放5名英雄。</p><p>通过冒泡排序算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p><hr><p>==五名英雄信息：==</p><p>{“刘备”,23,“男”}，</p><p>{“关羽”,22,“男”}，</p><p>{“张飞”,20,“男”}，</p><p>{“赵云”,21,“男”}，</p><p>{“貂蝉”,19,“女”}，</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hero</span></span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  string sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heroInfo</span><span class="params">(<span class="keyword">struct</span> hero arr[],<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string xingming[<span class="number">5</span>]=&#123;<span class="string">&quot;刘备&quot;</span>,<span class="string">&quot;关羽&quot;</span>,<span class="string">&quot;张飞&quot;</span>,<span class="string">&quot;赵云&quot;</span>,<span class="string">&quot;貂蝉&quot;</span>&#125;;</span><br><span class="line">  <span class="type">int</span> nianlin[<span class="number">5</span>]=&#123;<span class="number">23</span>,<span class="number">22</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">19</span>&#125;;</span><br><span class="line">  string xingbie[<span class="number">5</span>]=&#123;<span class="string">&quot;男&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;女&quot;</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    arr[i].name=xingming[i];</span><br><span class="line">    arr[i].age=nianlin[i];</span><br><span class="line">    arr[i].sex=xingbie[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">herosort</span><span class="params">(<span class="keyword">struct</span> hero arr[],<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len-i<span class="number">-1</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j].age&lt;arr[j+<span class="number">1</span>].age)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">hero</span> temp=arr[j];</span><br><span class="line">        arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">        arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printhero</span><span class="params">(<span class="keyword">struct</span> hero arr[],<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;英雄姓名：&quot;</span>&lt;&lt;arr[i].name&lt;&lt;<span class="string">&quot;英雄年龄:&quot;</span>&lt;&lt;arr[i].age&lt;&lt;<span class="string">&quot;英雄性别:&quot;</span>&lt;&lt;arr[i].sex&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">hero</span> arr[<span class="number">5</span>];</span><br><span class="line">  <span class="type">int</span> len=<span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">heroInfo</span>(arr,len);</span><br><span class="line">  <span class="built_in">herosort</span>(arr,len);</span><br><span class="line">  <span class="built_in">printhero</span>(arr,len);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 🎈c puls plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧c plus plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>医院局域网规划</title>
      <link href="/2023/07/02/%E5%8C%BB%E9%99%A2%E5%B1%80%E5%9F%9F%E7%BD%91%E8%A7%84%E5%88%92/"/>
      <url>/2023/07/02/%E5%8C%BB%E9%99%A2%E5%B1%80%E5%9F%9F%E7%BD%91%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本次项目的所有配置都是在华为ENSP上完成🛸，cisco不适用🔪<br>GitHub开源仓库栏显示可能存在异常，需要魔法🪄请自备！！！<br>为大家配备了各设备层的配置文件🛴<br>同时也为也在GitHub上开源🛵<br>项目需求已经在此篇文章中给出🛒 </p></blockquote><div class="note success simple"><p class='p cyan'>医院局域网规划</p></div><p class='p cyan'></p><p class='p cyan'></p><p class='p cyan'></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Johnson-Yhy/Hospital-LAN@1.0.0/48e3d9ebba264e52017642ef0028afc.png" style="width:650px;"/></div></div><p class='p cyan'></p><p class='p cyan'></p><p class='p cyan'></p><div class="note success simple"><p class='p cyan'>GitHub开源仓库</p></div><p><center> <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Johnson-Yhy/Hospital-LAN"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Johnson-Yhy&repo=Hospital-LAN&theme=solarized-dark&show_owner=true"/></a> </p><details class="folding-tag" red><summary> 项目需求 </summary>              <div class='content'>              <p>某医院需建设两个相互独立的网络：一个为内部网络，用于医务管理系统；一个为信息网络，连接Internet。每间房间至少布设两个信息点，一个为内部网，一个为信息网。</p><ol><li>门诊大楼1幢（11层），一楼为挂号、药房、收费等10个窗口科室，每个科室布设两个信息点，大厅安装5台服务器终端，一台用于大屏幕显示，4台为触摸屏式医务服务导航。2至11楼为诊断科室，每层楼有20间科室，每间科室布设2个信息点。</li><li>病房大楼1幢（11层），每层有40间病房，每间病房最多3个病人，4间值班室，每间值班室布设两个信息点。病房提供无线网络接入，需要考虑带宽流量。需要进行接入带宽限制。</li><li>行政大楼1幢（7层），每层10个办公室，每间办公室布设两个信息点。网络中心位于大楼一层，机房布设20个信息点。</li><li>应用系统支持：医院对外发表信息的网站，内部网络的医务管理系统，并配备磁盘阵列和数据备份系统。</li><li>网络安全支持：配备防火墙，防病毒系统网络版，上网行为管理系统。</li></ol>              </div>            </details><details class="folding-tag" yellow><summary> 配置语法 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> AC </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sys</span><br><span class="line">sys AC</span><br><span class="line">vlan batch 40 100</span><br><span class="line">int vlan 100</span><br><span class="line"> ip add 192.168.100.100 24</span><br><span class="line">int g0/0/10</span><br><span class="line"> p l t</span><br><span class="line"> p t a v 40 100</span><br><span class="line"></span><br><span class="line">capwap source ip-address 192.168.100.100</span><br><span class="line"></span><br><span class="line">wlan </span><br><span class="line"> ap auth-mode no-auth </span><br><span class="line">  ssid-profile name 1</span><br><span class="line">  ssid yiyuan</span><br><span class="line">  security-profile name 1</span><br><span class="line">  security wpa-wpa2 psk pass-phrase 12345678 aes</span><br><span class="line">  vap-profile name 1</span><br><span class="line">  service-vlan vlan-id 40</span><br><span class="line">  ssid-profile 1</span><br><span class="line">  security-profile 1</span><br><span class="line">  ap-id 0 </span><br><span class="line">  vap 1 wlan 1 radio all</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> sys </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sys</span><br><span class="line">int g0/0/2</span><br><span class="line">ip address 200.100.1.2 30 </span><br><span class="line">int g0/0/1</span><br><span class="line">ip address 100.100.1.2 30 </span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 防火墙 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">interface GigabitEthernet1/0/0</span><br><span class="line"> undo shutdown</span><br><span class="line"> ip address 192.168.77.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/1</span><br><span class="line"> undo shutdown</span><br><span class="line"> ip address 192.168.50.254 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/2</span><br><span class="line"> undo shutdown</span><br><span class="line"> ip address 192.168.88.2 255.255.255.0</span><br><span class="line"></span><br><span class="line">security-policy</span><br><span class="line"> rule name T2U</span><br><span class="line">  source-zone trust</span><br><span class="line">  destination-zone untrust</span><br><span class="line">  action permit</span><br><span class="line"> rule name T2D</span><br><span class="line">  source-zone trust</span><br><span class="line">  destination-zone dmz</span><br><span class="line">  action permit</span><br><span class="line"> rule name L2A</span><br><span class="line">  source-zone local</span><br><span class="line">  action permit</span><br><span class="line">   rule name U2D</span><br><span class="line">  source-zone untrust</span><br><span class="line">  destination-zone dmz</span><br><span class="line">  action permit</span><br><span class="line"> rule name U2T</span><br><span class="line">  source-zone untrust</span><br><span class="line">  destination-zone trust</span><br><span class="line">  source-address 172.16.0.0 mask 255.255.0.0</span><br><span class="line">  action permit</span><br><span class="line"></span><br><span class="line">ospf 1</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.50.0 0.0.0.255</span><br><span class="line">  network 192.168.77.0 0.0.0.255</span><br><span class="line">  network 192.168.88.0 0.0.0.255</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 防火墙2 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">interface GigabitEthernet1/0/0</span><br><span class="line"> undo shutdown</span><br><span class="line"> ip address 192.168.77.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/1</span><br><span class="line"> undo shutdown</span><br><span class="line"> ip address 192.168.50.254 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet1/0/2</span><br><span class="line"> undo shutdown</span><br><span class="line"> ip address 192.168.88.2 255.255.255.0</span><br><span class="line"></span><br><span class="line">security-policy</span><br><span class="line"> rule name T2U</span><br><span class="line">  source-zone trust</span><br><span class="line">  destination-zone untrust</span><br><span class="line">  action permit</span><br><span class="line"> rule name T2D</span><br><span class="line">  source-zone trust</span><br><span class="line">  destination-zone dmz</span><br><span class="line">  action permit</span><br><span class="line"> rule name L2A</span><br><span class="line">  source-zone local</span><br><span class="line">  action permit</span><br><span class="line">   rule name U2D</span><br><span class="line">  source-zone untrust</span><br><span class="line">  destination-zone dmz</span><br><span class="line">  action permit</span><br><span class="line"> rule name U2T</span><br><span class="line">  source-zone untrust</span><br><span class="line">  destination-zone trust</span><br><span class="line">  source-address 172.16.0.0 mask 255.255.0.0</span><br><span class="line">  action permit</span><br><span class="line"></span><br><span class="line">ospf 1</span><br><span class="line"> area 0.0.0.0</span><br><span class="line">  network 192.168.50.0 0.0.0.255</span><br><span class="line">  network 192.168.77.0 0.0.0.255</span><br><span class="line">  network 192.168.88.0 0.0.0.255</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 分布出口 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">sys</span><br><span class="line">sys WB-CK</span><br><span class="line">dhcp enable</span><br><span class="line">int g0/0/1</span><br><span class="line"> ip add 100.100.1.1 30</span><br><span class="line"> nat outbound 3001</span><br><span class="line"> ipsec policy map1</span><br><span class="line">int g0/0/2</span><br><span class="line"> ip add 172.16.10.254 24</span><br><span class="line"> dhcp sel intface </span><br><span class="line"> </span><br><span class="line">ip route-static 0.0.0.0 0 100.100.1.2</span><br><span class="line"></span><br><span class="line">acl 3001</span><br><span class="line"> rule deny ip source 172.16.0.0 0.0.255.255 destination 192.168.0.0 0.0.255.255</span><br><span class="line"> rule permit ip </span><br><span class="line"></span><br><span class="line">acl 3000</span><br><span class="line"> rule permit ip source 172.16.0.0 0.0.255.255 destination 192.168.0.0 0.0.255.255</span><br><span class="line"> </span><br><span class="line">ipsec proposal fb2zb</span><br><span class="line">transform esp</span><br><span class="line"></span><br><span class="line">ipsec policy map1 10 isakmp</span><br><span class="line">security acl 3000</span><br><span class="line">proposal fb2zb</span><br><span class="line">ike-peer zb</span><br><span class="line"></span><br><span class="line">ike proposal 5</span><br><span class="line"></span><br><span class="line">ike peer zb v1</span><br><span class="line">exchange-mode main</span><br><span class="line">pre-shared-key cipher huawei</span><br><span class="line">ike-proposal 5</span><br><span class="line">local-address 100.100.1.1</span><br><span class="line">remote-address 200.100.1.1</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 各接入交换机 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">sys</span><br><span class="line">sys MZ-JR</span><br><span class="line">vlan batch 10 40</span><br><span class="line">int g0/0/1</span><br><span class="line"> p l t </span><br><span class="line"> p t a v 10 40</span><br><span class="line">int e0/0/1</span><br><span class="line"> p l a</span><br><span class="line"> p d v 40</span><br><span class="line">int e0/0/2</span><br><span class="line"> p l a </span><br><span class="line"> p d v 10</span><br><span class="line"></span><br><span class="line">sys</span><br><span class="line">sys BF-JR</span><br><span class="line">vlan batch 20 40 100</span><br><span class="line">int g0/0/1</span><br><span class="line"> p l t </span><br><span class="line"> p t a v 20 40 100</span><br><span class="line">int e0/0/1</span><br><span class="line"> p l a</span><br><span class="line"> p d v 20</span><br><span class="line">int e0/0/2</span><br><span class="line"> p l a </span><br><span class="line"> p d v 40</span><br><span class="line">int e0/0/3</span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan 40 100</span><br><span class="line"> p t p v 100</span><br><span class="line"></span><br><span class="line">sys</span><br><span class="line">sys XZ-JR</span><br><span class="line">vlan batch 30 40</span><br><span class="line">int g0/0/1</span><br><span class="line"> p l t </span><br><span class="line"> p t a v 30 40</span><br><span class="line">int e0/0/1</span><br><span class="line"> p l a</span><br><span class="line"> p d v 30</span><br><span class="line">int e0/0/2</span><br><span class="line"> p l a </span><br><span class="line"> p d v 40</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 核心交换机 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">sys</span><br><span class="line">sys YX-HX</span><br><span class="line">vlan batch 10 20 30 40 77 100</span><br><span class="line">dhcp enable</span><br><span class="line">int g0/0/1</span><br><span class="line"> p l t</span><br><span class="line"> p t a v 10 40</span><br><span class="line">int g0/0/2</span><br><span class="line"> p l t</span><br><span class="line"> p t a v 20 40 100</span><br><span class="line">int g0/0/3</span><br><span class="line"> p l t</span><br><span class="line"> p t a v 30 40</span><br><span class="line">int g0/0/10</span><br><span class="line"> p l t</span><br><span class="line"> p t a v 40 100</span><br><span class="line">int g0/0/24</span><br><span class="line"> p l a</span><br><span class="line"> p d v 77   &quot;port default vlan&quot;命令是用于配置交换机端口的默认VLAN</span><br><span class="line"></span><br><span class="line">int vlan 10 </span><br><span class="line"> ip add 192.168.10.254 24</span><br><span class="line"> dhcp sel int</span><br><span class="line"> dhcp server dns-list 192.168.50.10</span><br><span class="line">int vlan 20 </span><br><span class="line"> ip add 192.168.20.254 24</span><br><span class="line"> dhcp sel int</span><br><span class="line"> dhcp server dns-list 192.168.50.10</span><br><span class="line">int vlan 30 </span><br><span class="line"> ip add 192.168.30.254 24</span><br><span class="line"> dhcp sel int</span><br><span class="line"> dhcp server dns-list 192.168.50.10</span><br><span class="line">int vlan 40 </span><br><span class="line"> ip add 192.168.40.254 24</span><br><span class="line"> dhcp sel int</span><br><span class="line"> dhcp server dns-list 192.168.50.10</span><br><span class="line">int vlan 100</span><br><span class="line"> ip add 192.168.100.254 24</span><br><span class="line"> dhcp sel int</span><br><span class="line"> dhcp server dns-list 192.168.50.10</span><br><span class="line"> dhcp server option 43 sub 2 ip 192.168.100.100</span><br><span class="line">int vlan 77</span><br><span class="line"> ip add 192.168.77.1 24</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ospf 1 </span><br><span class="line"> a 0</span><br><span class="line"> net 192.168.77.0 0.0.0.255</span><br><span class="line"> net 192.168.10.0 0.0.0.255</span><br><span class="line"> net 192.168.20.0 0.0.0.255</span><br><span class="line"> net 192.168.30.0 0.0.0.255</span><br><span class="line"> net 192.168.40.0 0.0.0.255</span><br><span class="line"> net 192.168.100.0 0.0.0.255</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">acl 3000</span><br><span class="line"> rule deny ip source 192.168.40.0 0.0.0.255 des 192.168.10.0 0.0.0.255</span><br><span class="line"> rule deny ip source 192.168.40.0 0.0.0.255 des 192.168.20.0 0.0.0.255</span><br><span class="line"> rule deny ip source 192.168.40.0 0.0.0.255 des 192.168.30.0 0.0.0.255</span><br><span class="line"> rule permit ip</span><br><span class="line">int g0/0/1</span><br><span class="line"> traffic-filter inbound acl 3000</span><br><span class="line">int g0/0/2</span><br><span class="line"> traffic-filter inbound acl 3000</span><br><span class="line">int g0/0/3</span><br><span class="line"> traffic-filter inbound acl 3000</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 总部出口 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">sys</span><br><span class="line">sys YX-CK</span><br><span class="line">nat alg all enable</span><br><span class="line">acl 3001    //配置nat</span><br><span class="line"> rule deny ip source 192.168.0.0 0.0.255.255 destination 172.16.0.0 0.0.255.255</span><br><span class="line"> rule permit ip</span><br><span class="line">int g0/0/1</span><br><span class="line"> ip add 192.168.88.1 24</span><br><span class="line">int g0/0/2</span><br><span class="line"> ip add 200.100.1.1 30</span><br><span class="line"> nat outbound 3001   //配置nat </span><br><span class="line"> nat server protocol tcp global current-interface www inside 192.168.50.20 www</span><br><span class="line"> nat server protocol tcp global current-interface ftp inside 192.168.50.30 ftp   //端口映射--此配置命令表示将公共网络上的TCP流量的特定端口（www）转发到私有网络中的192.168.50.20设备上的相应端口（也是www）。这将允许公共网络上的设备或用户通过访问公共网络上的特定端口，与私有网络中的192.168.50.20设备上的服务进行通信。</span><br><span class="line"> ipsec policy map1</span><br><span class="line"></span><br><span class="line">ip route-s 0.0.0.0 0 200.100.1.2    </span><br><span class="line"></span><br><span class="line"> ospf 1</span><br><span class="line"> default-route-advertise      //缺省路由下发到ospf里面</span><br><span class="line">  a 0</span><br><span class="line">  net 192.168.88.0 0.0.0.255</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">acl 3000</span><br><span class="line"> rule permit ip source 192.168.0.0 0.0.255.255 destination 172.16.0.0 0.0.255.255</span><br><span class="line"></span><br><span class="line">ipsec proposal zb2fb     //zb2fb是一个IPsec提案的名称，而esp是一个用于提案中的转换，它指定了使用ESP来保护IPsec通信的数据包。请注意，具体的配置和参数可能根据不同的设备和实际部署环境而有所不同。</span><br><span class="line">transform esp</span><br><span class="line"></span><br><span class="line">ipsec policy map1 10 isakmp</span><br><span class="line">security acl 3000</span><br><span class="line">proposal zb2fb</span><br><span class="line">ike-peer fb  //1. `ipsec policy map1 10 isakmp`: 这个命令表示在IPsec策略`map1`中的第10条策略中使用ISAKMP（Internet Security Association and Key Management Protocol）协商安全参数。</span><br><span class="line"></span><br><span class="line">2. `security acl 3000`: 这个命令指定ACL（Access Control List）编号为3000，用于定义允许或拒绝IPsec流量的安全策略。</span><br><span class="line"></span><br><span class="line">3. `proposal zb2fb`: 这个命令指定使用名为`zb2fb`的IPsec提案。该提案定义了在IPsec通信中使用的安全参数，例如加密算法、认证算法等。</span><br><span class="line"></span><br><span class="line">4. `ike-peer fb`: 这个命令指定了一个名为`fb`的IKE（Internet Key Exchange）对等体。IKE是在IPsec建立安全通道时进行密钥协商和身份验证的协议。该命令可能包含了与对等体相关的配置参数，例如IP地址、预共享密钥等。</span><br><span class="line"></span><br><span class="line">综上所述，根据提供的配置命令，它们涉及到IPsec策略、ACL、IPsec提案以及IKE对等体的配置。具体的配置和参数可能会根据设备和实际部署环境而有所不同。</span><br><span class="line"></span><br><span class="line">ike proposal 5</span><br><span class="line"></span><br><span class="line">ike peer fb v1</span><br><span class="line">exchange-mode main</span><br><span class="line">pre-shared-key cipher huawei</span><br><span class="line">ike-proposal 5</span><br><span class="line">local-address 200.100.1.1</span><br><span class="line">remote-address 100.100.1.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 🎈Ensp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧Ensp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL教程</title>
      <link href="/2023/07/01/STL%E6%95%99%E7%A8%8B/"/>
      <url>/2023/07/01/STL%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>STL介绍</p><blockquote><p>长久以来，软件界一直希望建立一种可重复利用的东西<br>C++的面向对象和泛型编程思想，目的就是复用性的提升<br>面向对象的三大特性：封装，多态</p></blockquote><details class="folding-tag" yellow><summary> STL概念介绍 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> STL基本概念 </summary>              <div class='content'>              <p>STL（Standard Template Library，标准模板库）<br>STL从广义上分为：容器（container）算法（algorithm）迭代器（iterator）<br>容器和算法之间通过迭代器进行无缝连接<br>STL几乎所有的代码都采用了模板类或者模板函数</p>              </div>            </details><details class="folding-tag" blue><summary> STL的六大组件 </summary>              <div class='content'>              <p>STL的六大组件分别为：容器，算法，迭代器，仿函数，适配器（配接器），空间适配器</p><p>1，容器：各种数据结构，如vector，list，deque，set，map等，用来存放数据</p><p>2，算法：各种常用的算法，如sort，find，copy，for_each等</p><p>3，迭代器：扮演了容器与算法之间的胶合剂</p><p>4：仿函数：行为类似函数，可作为算法的某种策略</p><p>5：适配器：一种用来修饰容器或者仿函数或迭代器接口的东西</p><p>6：空间适配器：负责空间的适配和管理</p>              </div>            </details><details class="folding-tag" blue><summary> 容器 </summary>              <div class='content'>              <p>容器分为序列式容器和关联式容器两种：</p><ul><li>序列式容器：强调值的排序，序列式容器中的每个元素均有固定的位置</li><li>关联式容器 ：二叉树结构，各元素之间没有严格的物理上的顺序关系</li></ul>              </div>            </details><details class="folding-tag" blue><summary> 算法 </summary>              <div class='content'>              <p>算法分为质变算法和非质变算法：</p><ul><li>质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等</li><li>非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找，计数，遍历，寻找极值等</li></ul>              </div>            </details><details class="folding-tag" blue><summary> 迭代器 </summary>              <div class='content'>              <p>迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针</p><p>迭代器种类：</p><div class="table-container"><table><thead><tr><th style="text-align:center">种类</th><th style="text-align:center">功能</th><th style="text-align:center">支持运算</th></tr></thead><tbody><tr><td style="text-align:center">输入迭代器</td><td style="text-align:center">对数据的只读访问</td><td style="text-align:center">只读，支持++，==，！=</td></tr><tr><td style="text-align:center">输出迭代器</td><td style="text-align:center">对数据的只写访问</td><td style="text-align:center">只写，支持++</td></tr><tr><td style="text-align:center">前向迭代器</td><td style="text-align:center">读写操作，并能向前推进的迭代器</td><td style="text-align:center">读写，支持++，==，！=</td></tr><tr><td style="text-align:center">双向迭代器</td><td style="text-align:center">读写操作，并能向前和向后操作</td><td style="text-align:center">读写，支持++，—，</td></tr><tr><td style="text-align:center">随机访问迭代器</td><td style="text-align:center">读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td><td style="text-align:center">读写，支持++，—，[ n ]，-n，&lt;，&lt;=，&gt;，&gt;=</td></tr></tbody></table></div><p>常用的容器中迭代器种类为双向迭代器，和随机访问迭代器</p>              </div>            </details>              </div>            </details><h1 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h1><details class="folding-tag" yellow><summary> Vector </summary>              <div class='content'>              <details class="folding-tag" blue><summary> vector </summary>              <div class='content'>              <p>容器：vector<br>算法：for_each<br>迭代器：vector<int>::iterator<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>  <span class="comment">//标准算法头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;val&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建一个vector容器，数组</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向容器中插入数据</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">10</span>);   <span class="comment">//尾插数据</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过迭代器访问容器中的数据</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator itBegin=v.<span class="built_in">begin</span>();  <span class="comment">//起始迭代器 指向容器中第一个元素</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator itEnd=v.<span class="built_in">end</span>();      <span class="comment">//结束迭代器 指向容器中最后一个元素的下一个位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一种遍历方式</span></span><br><span class="line">    <span class="keyword">while</span>(itBegin!=itEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*itBegin&lt;&lt;endl;</span><br><span class="line">        itBegin++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种遍历方式</span></span><br><span class="line">    <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*it&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第三种遍历方式 利用STL中提供的遍历算法</span></span><br><span class="line">    for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),myprint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>              </div>            </details><details class="folding-tag" blue><summary> vector中存放自定义的数据类型 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(string name,<span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name=name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    string m_Name;</span><br><span class="line">    <span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;val&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;Person&gt;v;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;张三&quot;</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;李四&quot;</span>,<span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;王五&quot;</span>,<span class="number">30</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;老刘&quot;</span>,<span class="number">40</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向容器中添加数据</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(p1);</span><br><span class="line">    v.<span class="built_in">push_back</span>(p2);</span><br><span class="line">    v.<span class="built_in">push_back</span>(p3);</span><br><span class="line">    v.<span class="built_in">push_back</span>(p4);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历容器中的数据</span></span><br><span class="line">    <span class="keyword">for</span>(vector&lt;Person&gt;::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//第一种方式</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;姓名：&quot;</span>&lt;&lt;(*it).m_Name&lt;&lt;<span class="string">&quot;年龄：&quot;</span>&lt;&lt;(*it).m_Age&lt;&lt;endl;</span><br><span class="line">        <span class="comment">//第二种方式</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;姓名：&quot;</span>&lt;&lt;it-&gt;m_Name&lt;&lt;<span class="string">&quot;年龄：&quot;</span>&lt;&lt;it-&gt;m_Age&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放自定义数据类型 指针</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;Person*&gt;v;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;张三&quot;</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;李四&quot;</span>,<span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;王五&quot;</span>,<span class="number">30</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;老刘&quot;</span>,<span class="number">40</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向容器中添加数据</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p1);</span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p2);</span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p3);</span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p4);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历容器</span></span><br><span class="line">    <span class="keyword">for</span>(vector&lt;Person *&gt;::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;::姓名：&quot;</span>&lt;&lt;(*it)-&gt;m_Name&lt;&lt;<span class="string">&quot;::年龄：&quot;</span>&lt;&lt;(*it)-&gt;m_Age&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> vector 容器嵌套容器 </summary>              <div class='content'>              <p>作用：类似于二维数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//容器嵌套容器</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建小容器</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;v2;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;v3;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;v4;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向小容器中添加数据</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.<span class="built_in">push_back</span>(i+<span class="number">1</span>);</span><br><span class="line">        v2.<span class="built_in">push_back</span>(i+<span class="number">2</span>);</span><br><span class="line">        v3.<span class="built_in">push_back</span>(i+<span class="number">3</span>);</span><br><span class="line">        v4.<span class="built_in">push_back</span>(i+<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将小容器插入到大容器中</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(v1);</span><br><span class="line">    v.<span class="built_in">push_back</span>(v2);</span><br><span class="line">    v.<span class="built_in">push_back</span>(v3);</span><br><span class="line">    v.<span class="built_in">push_back</span>(v4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过大容器将所有的数据遍历一遍</span></span><br><span class="line">    <span class="keyword">for</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">// (*it)----为一个容器</span></span><br><span class="line">        <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::iterator vit=(*it).<span class="built_in">begin</span>();vit!=(*it).<span class="built_in">end</span>();vit++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;*vit&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><details class="folding-tag" yellow><summary> String </summary>              <div class='content'>              <details class="folding-tag" blue><summary> String的基本概念 </summary>              <div class='content'>              <p>本质：String是C++风格的字符串，而String本质上是一个类</p><p><br/></p><p>String和char *的区别：</p><ul><li>char * 是一个指针</li><li>String是一个类，类内部封装了char * ，管理这个字符串，是一个char  型的容器。</li></ul><p><br/></p><p>特点：</p><p>String类内部封装了很多成员方法</p><p>例如：查找find，拷贝copy，删除delete，替换replace，插入insert</p><p>String管路char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</p><p><br/></p>              </div>            </details><details class="folding-tag" blue><summary> String构造函数 </summary>              <div class='content'>              <p>构造函数原型：</p><ul><li><p>String( )；  //创建一个空的字符串 例如：String str；</p><p>String( const char*  s） //使用字符串s初始化</p></li><li>String( const String&amp; str);   //使用一个String对象初始化另一个String对象</li><li>String( int n,char c );   //使用n个字符串c初始化<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1;   <span class="comment">//m默认构造</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *str=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="function">string <span class="title">s2</span><span class="params">(str)</span></span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str:&quot;</span>&lt;&lt;str&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">s3</span><span class="params">(s2)</span></span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;S3: &quot;</span>&lt;&lt;s3&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">s4</span><span class="params">(<span class="number">10</span>,<span class="string">&#x27;a&#x27;</span>)</span></span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;s4 &quot;</span>&lt;&lt;s4&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><details class="folding-tag" blue><summary> String的赋值操作 </summary>              <div class='content'>              <p>功能描述：给String字符串进行赋值操作</p><p><br/></p><p>赋值的函数原型：</p><ul><li><p>String&amp; operator=( const char* s )   </p><p> //char*  类型字符串 赋值给当前的字符串</p></li><li>String&amp; operator=( const string &amp;s);      //把字符串s赋给当前的字符串</li><li>String&amp; operator=( char c );    //字符赋值给当前的字符串</li><li>String&amp; assign( const char *s ）//把字符串s赋给当前的字符串</li><li>String&amp; assign(const char *s, int n)             //把字符串s的前n个字符赋给当前的字符串</li><li>String&amp; assign(const string &amp;s);    //把字符串s赋给当前字符串</li><li>String&amp; assign(int n,  char c);          //用n个字符c赋给当前字符串</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    string str1;</span><br><span class="line">    str1=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str1:&quot;</span>&lt;&lt;str1&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    string str2;</span><br><span class="line">    str2=str1;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str2:&quot;</span>&lt;&lt;str2&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    string str3;</span><br><span class="line">    str3=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str3：&quot;</span>&lt;&lt;str3&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    string str4;</span><br><span class="line">    str4.<span class="built_in">assign</span>(<span class="string">&quot;hello c++&quot;</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str4:&quot;</span>&lt;&lt;str4&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    string str5;</span><br><span class="line">    str5.<span class="built_in">assign</span>(<span class="string">&quot;hello c++&quot;</span>,<span class="number">5</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str5: &quot;</span>&lt;&lt;str5&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    string str6;</span><br><span class="line">    str6.<span class="built_in">assign</span>(str5);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str6: &quot;</span>&lt;&lt;str6&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    string str7;</span><br><span class="line">    str7.<span class="built_in">assign</span>(<span class="number">10</span>,<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str7: &quot;</span>&lt;&lt;str7&lt;&lt;endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> String字符串的拼接 </summary>              <div class='content'>              <p>功能描述：实现字符串的拼接</p><p><br/></p><p>函数原型：</p><ul><li>String&amp;  operator+=( const char* ste );               // 重载+=操作符</li><li>String&amp;  operator+=( const char c );                    //重载+=操作符</li><li>String&amp;  operator+=( const string&amp; str );            //重载+=操作符</li><li>String&amp;  append( const char *s );                         //把字符串s连接到当前字符串结尾</li><li>String&amp;  append( const char *s ,int n );                //把字符串s的前n个字符连接到当前字符串结尾</li><li>String&amp;  append( const string &amp;s );                     //同opereator+=(const string&amp; str)</li><li>String&amp;  append( const string &amp;s,int &amp;s, int pos,int n );              //把字符串s从pos开始的n个字符连接到字符串结尾</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    string str1=<span class="string">&quot;早上好 &quot;</span>;</span><br><span class="line">    str1+=<span class="string">&quot;中国&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str1:&quot;</span>&lt;&lt;str1&lt;&lt;endl;</span><br><span class="line">    str1+=<span class="string">&#x27;:&#x27;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str1:&quot;</span>&lt;&lt;str1&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    string str2=<span class="string">&quot;今天我有冰激凌&quot;</span>;</span><br><span class="line">    str1+=str2;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str1:&quot;</span>&lt;&lt;str1&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    string str3=<span class="string">&quot;冰激凌&quot;</span>;</span><br><span class="line">    str3.<span class="built_in">append</span>(<span class="string">&quot;冰激凌&quot;</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str3:&quot;</span>&lt;&lt;str3&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5</span></span><br><span class="line">    str3.<span class="built_in">append</span>(<span class="string">&quot;icecrame amazing&quot;</span>,<span class="number">9</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str3:&quot;</span>&lt;&lt;str3&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6</span></span><br><span class="line">    str3.<span class="built_in">append</span>(str2);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str3:&quot;</span>&lt;&lt;str3&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7</span></span><br><span class="line">    str3.<span class="built_in">append</span>(str2,<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str3:&quot;</span>&lt;&lt;str3&lt;&lt;endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> String的查找和替换 </summary>              <div class='content'>              <p>功能描述 ：</p><ul><li>查找：查找指定字符串是否存在</li><li>替换：在指定位置替换字符串</li></ul><p><br/></p><p>函数原型：</p><ul><li>int find( const string &amp;str, int pos=0 ) const;                             //查找str第一次出现的位置，从pos开始查找</li><li>int find( const char *s ,int pos=0 ) const;                                   //查找s第一次出现的位置，从pos开始查找</li><li>int find( const char *s ,int pos ,int n ) const ;                             //从pos位置查找s的前n个字符第一次位置</li><li>int find( const char c ,int pos =0 ) const ;                                  //查找字符c最后一次位置</li><li>int rfind( const string&amp; str, int pos=npos ) const ;                    //查找str最后一次位置，从pos开始查找</li><li>int rfind( const char* s, int pos=npos ) const;                           //查找s最后一次出现位置，从pos开始查找</li><li>int rfind( const char* s, int pos, int n ) const;                            //从pos查找s的前n个字符最后一次位置</li><li>int rfind( const char c, int pos=0 ) const;                                  /查找字符c最后一次出现的位置</li><li>string&amp; replace( int pos, int n, const string&amp; str );                   //替换从pos开始n个字符为字符串str</li><li>string&amp; replace(int pos ,int n,const char* s );                           //替换从pos开始n个字符为字符串s</li></ul><p>find 和rfind 区别：rfind是从右往左查找        find是从左往右查找</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.查找</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str1=<span class="string">&quot;abcdefgde&quot;</span>;</span><br><span class="line">    <span class="type">int</span> pos=str1.<span class="built_in">find</span>(<span class="string">&quot;de&quot;</span>);                <span class="comment">//查找到字符串返回下标</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;pos:&quot;</span>&lt;&lt;pos&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> pso=str1.<span class="built_in">find</span>(<span class="string">&quot;hj&quot;</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;pso:&quot;</span>&lt;&lt;pso&lt;&lt;endl;                <span class="comment">//查找不到字符串返回-1</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//rfind                  </span></span><br><span class="line">    pos=str1.<span class="built_in">rfind</span>(<span class="string">&quot;de&quot;</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;pos:&quot;</span>&lt;&lt;pos&lt;&lt;endl;</span><br><span class="line">   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.替换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str2=<span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line">    str2.<span class="built_in">replace</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="string">&quot;1111&quot;</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str2:&quot;</span>&lt;&lt;str2&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br/></p>              </div>            </details><details class="folding-tag" blue><summary> String的字符串比较 </summary>              <div class='content'>              <p>比较方式：</p><p>= 返回 0    &gt; 返回 1   &lt;返回 -1</p><p><br/></p><p>函数原型：</p><ul><li>int compare ( const string &amp;s ) const;           //与字符串s比较</li><li>int compare ( const char *s ) const;               //与字符串s比较</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str1=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    string str2=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(str1.<span class="built_in">compare</span>(str2)==<span class="number">0</span>)</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str1等于str2&quot;</span>&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//string str1=&quot;xello&quot;;</span></span><br><span class="line">    <span class="comment">//string str2=&quot;hello&quot;;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(str1.<span class="built_in">compare</span>(str2)&gt;<span class="number">0</span>)</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str1大于str2&quot;</span>&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//string str1=&quot;aello&quot;;</span></span><br><span class="line">    <span class="comment">//string str2=&quot;hello&quot;;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(str1.<span class="built_in">compare</span>(str2)&lt;<span class="number">0</span>)</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str1小于str2&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般用于比较两个字符串是否相等</p><p>比较的原理是：ASCII 码的比较</p><p><br/></p>              </div>            </details><details class="folding-tag" blue><summary> String字符存取 </summary>              <div class='content'>              <p>String中单个字符存取方式有两种：</p><ul><li>char&amp; operator[ ] ( int n );                       //通过[ ]方法取字符</li><li>char at (int n)                                          //通过at方法获取字符</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str:&quot;</span>&lt;&lt;str&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过[]访问单个字符</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span>  i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;str[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过at方式访问单个字符</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;str.<span class="built_in">size</span>();j++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;str.<span class="built_in">at</span>(j)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改单个字符</span></span><br><span class="line">    str[<span class="number">0</span>]=<span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    <span class="comment">//xhllo</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str:&quot;</span>&lt;&lt;str&lt;&lt;endl;</span><br><span class="line">    str.<span class="built_in">at</span>(<span class="number">1</span>)=<span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">    <span class="comment">//xyllo</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;str:&quot;</span>&lt;&lt;str&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br/></p>              </div>            </details><details class="folding-tag" blue><summary> String中的插入与删除 </summary>              <div class='content'>              <p>函数原型：</p><ul><li>String&amp; insert (int pos, const char *s);                         //插入字符串</li><li>String&amp; insert (int pos, const string&amp; str);                //插入字符串</li><li>String&amp; insert(int pos. int n, char c);                        //在指定位置插入n个字符c</li><li>String&amp; erase(int pos,int n=npos);                         //删除从pos开始的n个字符</li></ul>              </div>            </details>              </div>            </details><h1 id="Substr"><a href="#Substr" class="headerlink" title="Substr"></a>Substr</h1><details class="folding-tag" yellow><summary> Substr </summary>              <div class='content'>              <details class="folding-tag" blue><summary> Substr 函数的使用 </summary>              <div class='content'>              <p>Substr 函数的使用（俗称：字符截取函数）</p><p>　格式1： substr(string string, int a, int b);<br>　格式2：substr(string string, int a) ;</p><p>格式1：<br>    1、string 需要截取的字符串<br>    2、a 截取字符串的开始位置（注：当a等于0或1时，都是从第一位开始截取）<br>    3、b 要截取的字符串的长度</p><p>格式2：<br>    1、string 需要截取的字符串<br>    2、a 可以理解为从第a个字符开始截取后面所有的字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="function">select <span class="title">substr</span><span class="params">(<span class="string">&#x27;HelloWorld&#x27;</span>,<span class="number">0</span>,<span class="number">3</span>)</span> value from dual</span>;           <span class="comment">//返回结果：Hel，截取从“H”开始3个字符</span></span><br><span class="line"><span class="number">2</span>、<span class="function">select <span class="title">substr</span><span class="params">(<span class="string">&#x27;HelloWorld&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>)</span> value from dual</span>;          <span class="comment">//返回结果：Hel，截取从“H”开始3个字符</span></span><br><span class="line"><span class="number">3</span>、<span class="function">select <span class="title">substr</span><span class="params">(<span class="string">&#x27;HelloWorld&#x27;</span>,<span class="number">2</span>,<span class="number">3</span>)</span> value from dual</span>;         <span class="comment">//返回结果：ell，截取从“e”开始3个字符</span></span><br><span class="line"><span class="number">4</span>、<span class="function">select <span class="title">substr</span><span class="params">(<span class="string">&#x27;HelloWorld&#x27;</span>,<span class="number">0</span>,<span class="number">100</span>)</span> value from dual</span>;      <span class="comment">//返回结果：HelloWorld，100虽然超出预处理的字符串最长度，但不会影响返回结果，系统按预处理字符串最大数量返回。</span></span><br><span class="line"><span class="number">5</span>、<span class="function">select <span class="title">substr</span><span class="params">(<span class="string">&#x27;HelloWorld&#x27;</span>,<span class="number">5</span>,<span class="number">3</span>)</span> value from dual</span>;            <span class="comment">//返回结果：oWo</span></span><br><span class="line"><span class="number">6</span>、<span class="function">select <span class="title">substr</span><span class="params">(<span class="string">&#x27;Hello World&#x27;</span>,<span class="number">5</span>,<span class="number">3</span>)</span> value from dual</span>;           <span class="comment">//返回结果：o W (中间的空格也算一个字符串，结果是：o空格W)</span></span><br><span class="line"><span class="number">7</span>、<span class="function">select <span class="title">substr</span><span class="params">(<span class="string">&#x27;HelloWorld&#x27;</span>,<span class="number">-1</span>,<span class="number">3</span>)</span> value from dual</span>;           <span class="comment">//返回结果：d （从后面倒数第一位开始往后取1个字符，而不是3个。原因：下面红色 第三个注解）</span></span><br><span class="line"><span class="number">8</span>、<span class="function">select <span class="title">substr</span><span class="params">(<span class="string">&#x27;HelloWorld&#x27;</span>,<span class="number">-2</span>,<span class="number">3</span>)</span> value from dual</span>;           <span class="comment">//返回结果：ld （从后面倒数第二位开始往后取2个字符，而不是3个。原因：下面红色 第三个注解）</span></span><br><span class="line"><span class="number">9</span>、<span class="function">select <span class="title">substr</span><span class="params">(<span class="string">&#x27;HelloWorld&#x27;</span>,<span class="number">-3</span>,<span class="number">3</span>)</span> value from dual</span>;           <span class="comment">//返回结果：rld （从后面倒数第三位开始往后取3个字符）</span></span><br><span class="line"><span class="number">10</span>、<span class="function">select <span class="title">substr</span><span class="params">(<span class="string">&#x27;HelloWorld&#x27;</span>,<span class="number">-4</span>,<span class="number">3</span>)</span> value from dual</span>;          <span class="comment">//返回结果：orl （从后面倒数第四位开始往后取3个字符）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 🎈c puls plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧c plus plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题日记</title>
      <link href="/2023/06/28/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/"/>
      <url>/2023/06/28/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>牺牲掉一大把头发写的题解，记录每日刷题过程中有意思的题目🐒<br>刷题网站：CodeChef（代码厨子）🐥</p></blockquote><div class="tip home"><p>Mathison and pangrams</p></div><h1 id="Mathison-and-pangrams"><a href="#Mathison-and-pangrams" class="headerlink" title="Mathison and pangrams"></a>Mathison and pangrams</h1><h3 id="题目链接：-https-www-codechef-com-problems-MATPAN-tab-statement"><a href="#题目链接：-https-www-codechef-com-problems-MATPAN-tab-statement" class="headerlink" title="题目链接： https://www.codechef.com/problems/MATPAN?tab=statement"></a>题目链接： <a href="https://">https://www.codechef.com/problems/MATPAN?tab=statement</a></h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Johnson-Yhy/Hospital-LAN@2.0.0/1.png" style="width:650px;"/></div></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码实现思想：定义一个标签f，将字母a-z与字符串中的每一个字符相比，如果有则标签改为true,如果没有则</span></span><br><span class="line"><span class="comment">//计入将该位置的价格记下来，进行累加</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="string">&#x27;a&#x27;</span>;i&lt;=<span class="string">&#x27;z&#x27;</span>;i++)&#123;</span><br><span class="line">        <span class="type">bool</span> f=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;s.<span class="built_in">length</span>();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==s[j])&#123;</span><br><span class="line">                f=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="literal">false</span>)&#123;</span><br><span class="line">            c+=a[i<span class="number">-97</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="tip home"><p>Lapindromes</p></div><h1 id="Lapindromes"><a href="#Lapindromes" class="headerlink" title="Lapindromes"></a>Lapindromes</h1><h3 id="题目链接：-https-www-codechef-com-problems-LAPIN-tab-statement"><a href="#题目链接：-https-www-codechef-com-problems-LAPIN-tab-statement" class="headerlink" title="题目链接： https://www.codechef.com/problems/LAPIN?tab=statement"></a>题目链接： <a href="https://">https://www.codechef.com/problems/LAPIN?tab=statement</a></h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Johnson-Yhy/Hospital-LAN@2.0.0/2.png" style="width:650px;"/></div></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="type">int</span> f1[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> f2[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> f=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n=s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)&#123;</span><br><span class="line">                f1[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=n/<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line">                f2[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)</span><br><span class="line">                f1[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=n/<span class="number">2</span>+<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">                f2[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f1[i]!=f2[i])&#123;</span><br><span class="line">                f=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="number">0</span>)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cout&lt;&lt;&quot;s[&quot;&lt;&lt;i&lt;&lt;&quot;]:&quot;&lt;&lt;s[i]&lt;&lt;&quot;s[i]-a:&quot;&lt;&lt;s[i]-&#x27;a&#x27;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;f1[s[i]-&#x27;a&#x27;]&lt;&lt;endl;</span></span><br></pre></td></tr></table></figure><hr><div class="tip home"><p>Asymmetric Swaps</p></div><h1 id="Asymmetric-Swaps"><a href="#Asymmetric-Swaps" class="headerlink" title="Asymmetric Swaps"></a>Asymmetric Swaps</h1><h3 id="题目链接：https-www-codechef-com-problems-ARRSWAP"><a href="#题目链接：https-www-codechef-com-problems-ARRSWAP" class="headerlink" title="题目链接：https://www.codechef.com/problems/ARRSWAP"></a>题目链接：<a href="https://">https://www.codechef.com/problems/ARRSWAP</a></h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Johnson-Yhy/Hospital-LAN@2.0.0/3.png" style="width:650px;"/></div></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a[m],b[m],c[m+m];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">c[x++]=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">cin&gt;&gt;b[j];</span><br><span class="line">c[x++]=b[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(c,c+m+m);</span><br><span class="line"><span class="type">int</span> p=c[m<span class="number">-1</span>]-c[<span class="number">0</span>];</span><br><span class="line"><span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">p=<span class="built_in">min</span>(p,c[m+k]-c[i]);</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;p&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="tip home"><p>Distinct Codes</p></div><h1 id="Distinct-Codes"><a href="#Distinct-Codes" class="headerlink" title="Distinct Codes"></a>Distinct Codes</h1><h3 id="题目链接：https-www-codechef-com-problems-DISTCODE-tab-statement"><a href="#题目链接：https-www-codechef-com-problems-DISTCODE-tab-statement" class="headerlink" title="题目链接：https://www.codechef.com/problems/DISTCODE?tab=statement"></a>题目链接：<a href="https://">https://www.codechef.com/problems/DISTCODE?tab=statement</a></h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Johnson-Yhy/Hospital-LAN@2.0.0/4.png" style="width:650px;"/></div></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">string str;</span><br><span class="line">cin&gt;&gt;str;</span><br><span class="line"><span class="type">int</span> c=str.<span class="built_in">length</span>();</span><br><span class="line">string arr[c<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;c<span class="number">-1</span>;i++)&#123;</span><br><span class="line">arr[i]=str.<span class="built_in">substr</span>(i,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;c<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line"><span class="keyword">if</span>(arr[i]==arr[j])</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(j==i)</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;count&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="tip home"><p>Max Binary</p></div><h1 id="Max-Binary"><a href="#Max-Binary" class="headerlink" title="Max Binary"></a>Max Binary</h1><h3 id="题目链接：https-www-codechef-com-problems-MAX-BIN-tab-statement"><a href="#题目链接：https-www-codechef-com-problems-MAX-BIN-tab-statement" class="headerlink" title="题目链接：https://www.codechef.com/problems/MAX_BIN?tab=statement"></a>题目链接：<a href="https://">https://www.codechef.com/problems/MAX_BIN?tab=statement</a></h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Johnson-Yhy/Hospital-LAN@5.0.0/5.png" style="width:650px;"/></div></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    string str;</span><br><span class="line">    cin&gt;&gt;str;</span><br><span class="line">        <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        str[<span class="number">0</span>]=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        b--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(b--)&#123;</span><br><span class="line">        <span class="keyword">if</span>((str[<span class="number">0</span>]==<span class="string">&#x27;1&#x27;</span>))&#123;</span><br><span class="line">            str+=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    cout&lt;&lt;str&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="tip home"><p>Daily Train</p></div><h1 id="Daily-Train"><a href="#Daily-Train" class="headerlink" title="Daily Train"></a>Daily Train</h1><h3 id="题目链接：https-www-codechef-com-problems-DAILY-tab-statement"><a href="#题目链接：https-www-codechef-com-problems-DAILY-tab-statement" class="headerlink" title="题目链接：https://www.codechef.com/problems/DAILY?tab=statement"></a>题目链接：<a href="https://">https://www.codechef.com/problems/DAILY?tab=statement</a></h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Johnson-Yhy/Hospital-LAN@5.0.0/6.png" style="width:650px;"/></div></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fact</span><span class="params">(<span class="type">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>)</span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   <span class="keyword">return</span> n * <span class="built_in">fact</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">coun</span><span class="params">(string s[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x,n;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;   </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        string f1=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> f2=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> f3=<span class="number">53</span>;</span><br><span class="line">        <span class="type">int</span> f4=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> f5=<span class="number">0</span>;</span><br><span class="line">        string a[<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">            a[i]=s[f2];</span><br><span class="line">            f2++;</span><br><span class="line">            &#125;</span><br><span class="line">                a[<span class="number">4</span>]=s[f3];</span><br><span class="line">                f3--;</span><br><span class="line">                a[<span class="number">5</span>]=s[f3];</span><br><span class="line">                f3--;</span><br><span class="line">            f4=<span class="built_in">coun</span>(a);</span><br><span class="line">            <span class="keyword">if</span>(f4&gt;=x)</span><br><span class="line">            &#123;</span><br><span class="line">                f5=<span class="built_in">fact</span>(f4) / (<span class="built_in">fact</span>(x) * <span class="built_in">fact</span>(f4-x));</span><br><span class="line">                sum=sum+f5;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="tip home"><p>Maximise XOR</p></div><h1 id="Maximise-XOR"><a href="#Maximise-XOR" class="headerlink" title="Maximise XOR"></a>Maximise XOR</h1><h3 id="题目链接：https-www-codechef-com-problems-XORMAX-tab-statement"><a href="#题目链接：https-www-codechef-com-problems-XORMAX-tab-statement" class="headerlink" title="题目链接：https://www.codechef.com/problems/XORMAX?tab=statement"></a>题目链接：<a href="https://">https://www.codechef.com/problems/XORMAX?tab=statement</a></h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Johnson-Yhy/Hospital-LAN@5.0.0/7.png" style="width:650px;"/></div></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string a,b;</span><br><span class="line">    <span class="type">int</span> ones=<span class="number">0</span>,zeros=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            ones++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            zeros++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(b[i]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            ones++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            zeros++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> temp=<span class="built_in">min</span>(zeros,ones);</span><br><span class="line">    string ans=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;temp;i++)&#123;</span><br><span class="line">        ans+=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=temp;i&lt;a.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        ans+=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><div class="tip home"><p>Tourist Translations</p></div><h1 id="Tourist-Translations"><a href="#Tourist-Translations" class="headerlink" title="Tourist Translations"></a>Tourist Translations</h1><h3 id="题目链接：https-www-codechef-com-problems-TOTR"><a href="#题目链接：https-www-codechef-com-problems-TOTR" class="headerlink" title="题目链接：https://www.codechef.com/problems/TOTR"></a>题目链接：<a href="https://">https://www.codechef.com/problems/TOTR</a></h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Johnson-Yhy/Hospital-LAN@5.0.0/8.png" style="width:650px;"/></div></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    string str;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cin&gt;&gt;str;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        string k=<span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k.<span class="built_in">length</span>();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i]==k[j]&amp;&amp;s[i]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">                    s[i]=str[j];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;Z&#x27;</span>&amp;&amp;s[i]==k[j]-<span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">                    s[i]=str[j]-<span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;_&#x27;</span>)&#123;</span><br><span class="line">                    s[i]=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 🎈c puls plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧c plus plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>烟雨阁website网站</title>
      <link href="/2023/06/28/%E7%83%9F%E9%9B%A8%E9%98%81%E7%BD%91%E7%AB%99/"/>
      <url>/2023/06/28/%E7%83%9F%E9%9B%A8%E9%98%81%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目前网页未提供上线服务⛱️<br>但是项目源码已经在GitHub上开源🤟🤟🤟，有兴趣的小伙伴可以下载下来在自己设备上运行哦 ❄️<br>GitHub开源仓库栏显示可能存在异常，需要魔法🪄请自备！！！<br>别忘了给个star⭐️呦！！！<br>转载请标明出处，否则击哔你🔫<br>MySQL and HTML🚥🚥🚥</p></blockquote><iframe height=498 width=800 src='https://player.youku.com/embed/XNTk4MDAzNTE2MA==' frameborder=0 'allowfullscreen'></iframe><div class="note success simple"><p class='p cyan'>GitHub开源仓库</p></div><p><center> <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Johnson-Yhy/YanYuGe-groggery"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Johnson-Yhy&repo=YanYuGe-groggery&theme=solarized-dark&show_owner=true"/></a> </p>]]></content>
      
      
      <categories>
          
          <category> 🎈website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧php </tag>
            
            <tag> 🥧MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2023/06/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/06/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构基本概念"><a href="#数据结构基本概念" class="headerlink" title="数据结构基本概念"></a>数据结构基本概念</h1><details class="folding-tag" yellow><summary> 数据结构基本概念 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 数据结构基本概念 </summary>              <div class='content'>              <ul><li>数据：数据是信息的载体，是描述客观事物属性的数，字符及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。数据是计算机程序加工的原料。</li><li>数据元素：数据元素是数据的基本单位，通常作为一个整体进行考虑和处理。一个数据元素可由若干个数据项组成，数据项是构成数据元素的不可分割的最小单位。（学生记录就是一个数据元素，它由学号，姓名，性别等数据项组成）</li><li>数据对象：数据对象 是具有相同性质的数据元素的集合，是数据的一个子集。（整数数据对象是集合N={0,1,2,3,……}）</li><li>数据结构：数据结构是相互之间存在一种或者多种特定关系的数据元素的集合</li></ul><p>（不同的数据元素，可以组成相同的数据结构）</p>              </div>            </details><details class="folding-tag" blue><summary> 数据结构的三要素 </summary>              <div class='content'>              <p>数据的运算：施加在数据上的运算包括运算的定义和实现，</p><ul><li>运算的定义是针对逻辑运算的，指出运算的功能</li><li>运算的实现是指针对存储结构的，指出运算的具体操作步骤</li></ul>              </div>            </details>              </div>            </details><details class="folding-tag" yellow><summary> 算法的基本概念 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 算法的概念 </summary>              <div class='content'>              <p>算法是对特定的问题求解步骤的一种描述，它是指令的有限序列，其中的每条指令表示一个或者多个操作。</p><p>一个算法具有下列5个重要特性：</p><ul><li>有穷性：一个算法必须总在执行有穷步后结束，且每一步都可在有穷时间内完成；</li><li>确定性：算法中每条指令必须有确切的含义，对于相同的输入只能得出相同的输出；</li><li>可行性：算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现；</li><li>输入：一个算法有零个或多个输入，这些输入取之于某个特定的对象的集合；</li><li>输出；一个算法有零个或多个输出，这些输出是与输入有着某种特定关系的量。</li></ul><p>通常，设计一个“好“的算法应该考虑达到以下目标：</p><ol><li>正确性：算法应能够正确地解决求解问题；</li><li>可读性：算法应具有良好的可读性，以帮助人们理解；</li><li>健壮性：输入非法数据时，算法能适应地做出反应或进行处理，而不会产生莫名奇妙的输出结果；</li><li>高效率和低存储量需求：效率是指算法执行的时间，存储量需求是指算法执行过程中所需要的最大存储空间，这两者都与问题的规模有关；</li></ol>              </div>            </details><details class="folding-tag" blue><summary> 算法效率的度量 </summary>              <div class='content'>              <ul><li>时间复杂度        T(n)=O(f(n))</li><li>空间复杂度        S(n)=O(g(n))</li></ul>              </div>            </details><details class="folding-tag" blue><summary> 复杂度 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 时间复杂度 </summary>              <div class='content'>              <p>如何计算：</p><ol><li>找到一个基本操作（最深层循环）；</li><li>分析该基本操作的执行次数*与问题规模n的关系x=f(n);</li><li>x的数量级O(x)就是算法的时间复杂度T(n)；</li></ol><p>常用技巧：</p><ol><li>加法规则：O(f(n))+O(g(n))=O(max(f(n),g(n)));</li><li>乘法规则：O(f(n))*O(g(n))=O(f(n)Xg(n));</li><li><img src="attachment:35f45196618e63f98be238cef5baff66" alt="截图"></li></ol><p>三种复杂度：</p><ol><li>最坏时间复杂度：考虑输入数据“最坏”的情况；</li><li>平均时间复杂度：考虑所有输入数据都等概率出现的情况</li><li>最好时间复杂度：考虑输入数据“最好”的情况；</li></ol><p>一般来说：我们只考虑最坏时间复杂度和平均时间复杂度</p><p>算法的性能问题只有在n很大时才会暴露出来</p>              </div>            </details><details class="folding-tag" blue><summary> 空间复杂度 </summary>              <div class='content'>              <p>无论问题规模怎么变，算法运行所需的内存空间都是固定的常量，算法空间复杂度为S(n)=O(1)：算法原地工作—算法所需要内存空间为常量</p><p>考虑算法空间复杂度：只需要关注存储空间大小与问题规模相关的变量</p><p>在递归调用中：S(n)=O(n)       空间复杂度=递归调用的深度</p><p><br/></p><p>如何计算：</p><ol><li>普通程序</li></ol><ul><li>找到所占空间的大小与问题规模相关的变量</li><li>分析所占空间*与问题规模n的关系x=f(n);</li><li>x的数量级O(x)就是算法空间复杂度S(n);</li></ul><ol><li>递归程序</li></ol><ul><li>找到递归调用的深度*与问题规模n的关系x=f(n);</li><li><p>x的数量级O(x)就是算法空间复杂度S(n);</p><p>注：有的算法各层函数所需存储空间不同，分析方法略有区别</p></li></ul>              </div>            </details>              </div>            </details>              </div>            </details><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><details class="folding-tag" yellow><summary> 线性表 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 线性表 </summary>              <div class='content'>              <p>数据结构三要素——逻辑结构，数据的运算，存储结构（物理结构）</p><p><br/></p><hr><p>==线性表的定义：线性表是具有相同数据类型的n(n&gt;0)个数据元素的有限序列，其中n为表长当n为0时，线性表是一个空表，若用L命名线性表，则其一般表示为：==</p><p><img src="attachment:848f05c11f174f0d58cc5ee2e2bac304" alt="截图" style="zoom:40%;" /></p><p>几个概念：</p><ul><li>ai是线性表中的“第i个”元素线性表中的位序</li><li>a1是表头元素，an是表尾元素</li><li>除第一个元素外，每个元素有且仅有一个直接前驱；除最后一个元素外，每个元素有且仅有一个直接后驱</li></ul><p><img src="attachment:af6d551244b8ac30142c978da4888c8d" alt="截图" style="zoom:35%;" /></p><p><br/></p><hr><h1 id="线性表的基本操作"><a href="#线性表的基本操作" class="headerlink" title="线性表的基本操作"></a>线性表的基本操作</h1><p><br/></p><div class="table-container"><table><thead><tr><th>InitList(&amp;L)</th><th>初始化表</th><th>构造一个空的线性表L,分配内存空间</th></tr></thead><tbody><tr><td>DestroyList(&amp;L)</td><td>销毁操作</td><td>销毁线性表，并释放线性表L所占的内存空间。</td></tr><tr><td>ListInsert(&amp;L,i,e)</td><td>插入操作</td><td>在表L中的第i个位置上插入指定的元素e</td></tr><tr><td>ListDelete(&amp;L,i,&amp;e)</td><td>删除操作</td><td>删除表L中第i个位置的元素，并用e返回删除元素的值</td></tr><tr><td>LocateElem(L,e)</td><td>按值查找操作</td><td>在表L中查找具体给定关键字值的元素</td></tr><tr><td>GetElem(L,i)</td><td>按位查找操作</td><td>获取表L中第i个位置的元素的值</td></tr><tr><td>Length(L)</td><td>求表长</td><td>返回线性表L的长度，即L中数据元素的个数</td></tr><tr><td>PrintList(L)</td><td>输出操作</td><td>按前后顺序输出线性表L的所有元素值</td></tr><tr><td>Empty(L)</td><td>判空操作</td><td>若L为空表，则返回true，否则为false</td></tr></tbody></table></div><p>tips：</p><ol><li>对数据的操作（记忆思路）————创销.增删查改</li><li>C语言函数定义————&lt;返回值类型&gt;函数名（&lt;参数1类型&gt;参数1，&lt;参数2类型&gt;参数2，……）</li><li>实际开发中，可根据实际需求定义其他的基本操作</li><li>函数名和参数的形式、命名都可改变</li><li>什么时候要传入引用“&amp;”——对参数的修改结果需要“带回来”</li></ol><p><br/></p><hr><p>#</p>              </div>            </details><details class="folding-tag" blue><summary> 顺序存储 </summary>              <div class='content'>              <p><strong>顺序表的定义：用顺序存储的方式来实现线性表</strong><br><strong>顺序存储：把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻街关系来体现</strong></p><details class="folding-tag" blue><summary> 顺序表的实现-----静态分配 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10               <span class="comment">//定义最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;                 </span><br><span class="line">  ElemType data[MaxSize];      <span class="comment">//用静态的“数组”存放数据元素</span></span><br><span class="line">  <span class="type">int</span> length;                  <span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SqList;                       <span class="comment">//顺序表的类型定义（静态分配方式）</span></span><br></pre></td></tr></table></figure><p>给各个数据元素分配连续的存储空间，大小为MaxSize*sizeof(ElemType)  </p>              </div>            </details><details class="folding-tag" blue><summary> 顺序表的实现-----静态分配 </summary>              <div class='content'>              <h1 id="顺序表的实现——-静态分配"><a href="#顺序表的实现——-静态分配" class="headerlink" title="顺序表的实现——-静态分配"></a>顺序表的实现——-静态分配</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10            <span class="comment">//顺序表的初始长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123; </span><br><span class="line">  ElemType *data;             <span class="comment">//指示动态分配数组的指针</span></span><br><span class="line">  <span class="type">int</span> Maxsize;                <span class="comment">//顺序表的最大容量</span></span><br><span class="line">  <span class="type">int</span> length;                 <span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SqList;                      <span class="comment">//顺序表的类型定义（动态分配方式）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>key：动态申请和释放内存空间</p><p>C—-malloc（动态申请）———free（释放）函数</p><p><img src="attachment:7b34b7eb1602fe0ef62b455f880cde7e" alt="截图" style="zoom:50%;" /></p><p>malloc函数返回一个指针，需要强制转型为你定义的数据元素类型指针</p><p>malloc申请的是一整片连续存储空间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">  <span class="type">int</span> *data;</span><br><span class="line">  <span class="type">int</span> MaxSize;</span><br><span class="line">  <span class="type">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  L.data=(<span class="type">int</span> *)<span class="built_in">malloc</span>(InitSize*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">  L.length=<span class="number">0</span>;</span><br><span class="line">  L.MaxSize=InitSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//增加动态数组的长度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IncreaseSize</span><span class="params">(SqList &amp;L,<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> *p=L.data;</span><br><span class="line">  L.data=(<span class="type">int</span> *)<span class="built_in">malloc</span>((L.MaxSize+len)*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    L.data[i]=p[i];</span><br><span class="line">  &#125;  </span><br><span class="line">  L.MaxSize=L.MaxSize+len;</span><br><span class="line">  <span class="built_in">free</span>(p);            <span class="comment">//释放原来的内存空间</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  SqList L;           <span class="comment">//声明一个顺序表</span></span><br><span class="line">  <span class="built_in">InitList</span>(L);        <span class="comment">//初始化顺序表    </span></span><br><span class="line">  <span class="built_in">IncreaseSize</span>(L,<span class="number">5</span>);  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br/></p><p>顺序表的特点：</p><ol><li>随机访问，即可在O(1)时间内找到第i个元素</li><li>存储密度高，每个节点只存储数据元素</li><li>拓展容量不方便（即便采用动态分配的方式实现，拓展长度的时间复杂度也比较高）</li></ol><p><br/></p>              </div>            </details><details class="folding-tag" blue><summary> 顺序表的插入删除 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 插入 </summary>              <div class='content'>              <p>Listsert(&amp;L,i,e)：插入操作。在表L中第i个位置上插入指定元素e</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxxSize 10      <span class="comment">//定义最大长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">  ElemType data[MaxSize];   <span class="comment">//用静态的“数组”存放数据元素</span></span><br><span class="line">  <span class="type">int</span> length;               <span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SqList;                    <span class="comment">//顺序表的类型定义</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10      <span class="comment">//定义最大长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">  <span class="type">int</span> data[MaxSize];   <span class="comment">//用静态的“数组”存放数据元素</span></span><br><span class="line">  <span class="type">int</span> length;               <span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SqList;                    <span class="comment">//顺序表的类型定义</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L,<span class="type">int</span> i,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length+<span class="number">1</span>)    <span class="comment">//判断是不是顺序存储</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(L.length&gt;=MaxSize)       <span class="comment">//判断是不是数据溢出</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=L.length;i&gt;=i;j--)    <span class="comment">//将第i个元素及之后的元素后移</span></span><br><span class="line">  &#123;</span><br><span class="line">    L.data[j]=L.data[j<span class="number">-1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  L.data[i<span class="number">-1</span>]=e;                <span class="comment">//在位置i处放入e</span></span><br><span class="line">  L.length++;                   <span class="comment">//长度加一</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  SqList L;</span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  <span class="built_in">ListInsert</span>(L,<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断时间复杂度：</p><p>问题规模n=L.length(表长)</p><p>最好：插入表尾————————O(1)</p><p>最坏：插入表头————————O(n)</p><p>平均：任意位置————————O(n))</p>              </div>            </details><details class="folding-tag" blue><summary> 删除 </summary>              <div class='content'>              <p>ListDelete(&amp;L,i,&amp;e)：删除操作。删除表L中第i个位置元素，并用e返回删除元素的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDetele</span><span class="params">(SqList &amp;L,<span class="type">int</span> i,<span class="type">int</span> &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;L.length;j++)</span><br><span class="line">  &#123;</span><br><span class="line">    L.data[j<span class="number">-1</span>]=L.data[j];</span><br><span class="line">  &#125;</span><br><span class="line">  L.length--;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  SqList L;</span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  <span class="type">int</span> e=<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">ListDelete</span>(L,<span class="number">3</span>,e))</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;已删除第3个元素，删除元素的值为&quot;</span>&lt;&lt;e&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;位序i不合法，删除失败&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：</p><p>最好：删除表尾——————O(1)</p><p>最坏：删除表头——————O(n)</p><p>平均：任意位置——————O(n)</p>              </div>            </details>              </div>            </details><details class="folding-tag" blue><summary> 顺序表的查找 </summary>              <div class='content'>              <p>类型：按位查找，按值查找</p><details class="folding-tag" blue><summary> 按位查找 </summary>              <div class='content'>              <p>GetElem(L,i)：按位查找操作。获取表L中第i个位置的元素的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//采用静态分配</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10             </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">  ElemType data[MaxSize];</span><br><span class="line">  <span class="type">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function">ElemType <span class="title">GetElem</span><span class="params">(SqList L,<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> L.data[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//采用动态分配</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">  ElemType *data;</span><br><span class="line">  <span class="type">int</span> MaxSize;</span><br><span class="line">  <span class="type">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function">ElemType <span class="title">GetElem</span><span class="params">(SqList L,<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> L.data[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(1)</p>              </div>            </details><details class="folding-tag" blue><summary> 按值查找 </summary>              <div class='content'>              <p>LocateElem(L,e)：按值查找操作。在表L中查找具体给定关键字值的元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">  ElemType *data;</span><br><span class="line">  <span class="type">int</span> MaxSize;</span><br><span class="line">  <span class="type">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LocateElem</span><span class="params">(SqList L,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(L.data==e)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">  ElemType *data;</span><br><span class="line">  <span class="type">int</span> MaxSize;</span><br><span class="line">  <span class="type">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LocateElem</span><span class="params">(SqList L,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(L.data==e)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tips：在结构类型中不适用</p><p><br/></p><p>时间复杂度：</p><p>最好————————O(1)</p><p>最坏————————O(n)</p><p>平均————————O(n)</p>              </div>            </details>              </div>            </details>              </div>            </details><details class="folding-tag" blue><summary> 链式存储 </summary>              <div class='content'>              </div>            </details>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 🎈c puls plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧c plus plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>personal website</title>
      <link href="/2023/06/02/%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BD%91%E9%A1%B5/"/>
      <url>/2023/06/02/%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BD%91%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此网页为博主第一次尝试制作个人网页，技术菜菜🥬🥬🥬，希望各位大佬能够手下留情。<br>本项目因为视频太大缘故，不能上传到GitHub🥕，如有需要源码的小伙伴可以Email📮留言。<br>本网站为静态网站🚥🚥🚥</p></blockquote><h1 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h1><iframe height=498 width=800 src='https://player.youku.com/embed/XNTk3Nzg2NTYwNA==' frameborder=0 'allowfullscreen'></iframe>]]></content>
      
      
      <categories>
          
          <category> 🎈website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧 WXML/WXSS </tag>
            
            <tag> 🥧 php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吃啦咪微信小程序</title>
      <link href="/2023/05/27/%E5%90%83%E5%95%A6%E5%92%AA%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2023/05/27/%E5%90%83%E5%95%A6%E5%92%AA%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目前小程序只能发布体验版本⛱️，因为涉及支付功能，不能以个人账户进行发布❄️<br>但是项目源码已经在GitHub上开源🤟🤟🤟，有兴趣的小伙伴可以下载下来在自己的微信开发者工具上运行哦<br>GitHub开源仓库栏显示可能存在异常，需要魔法🪄请自备！！！<br>别忘了给个star⭐️呦！！！</p><h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><p>吃啦咪小程序是一个专为选择困难症的小伙伴打造的的微信小程序🥕，每当你在为每天吃什么担心时，只需要打开小程序进入到摇一摇界面🥦，只需轻轻摇晃一下手机，我们的系统就会随机为你推荐一家餐厅，你可以点击店铺名称🛖，查看店铺相关信息(店铺环境，店铺地址导航等)🥘，也可以拨打电话询问需求，如果你不满意系统的推荐，继续摇晃手机，直到你满意为止🏁🏁🏁。</p></blockquote><h1 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h1><iframe height=498 width=370 src='https://player.youku.com/embed/XNTk4MDA1NzQ0OA==' frameborder=0 'allowfullscreen'></iframe> &nbsp; &nbsp; &nbsp; &nbsp; <iframe height=498 width=370 src='https://player.youku.com/embed/XNTk4MDA2MzcyOA==' frameborder=0 'allowfullscreen'></iframe><div class="note success simple"><p class='p cyan'>GitHub开源仓库</p></div><p><center> <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Johnson-Yhy/ChiLaMi-WeChatminiprgram"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Johnson-Yhy&repo=ChiLaMi-WeChatminiprgram&theme=solarized-dark&show_owner=true"/></a> </p>]]></content>
      
      
      <categories>
          
          <category> 🎈Wechat miniprogram </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧 JavaScript </tag>
            
            <tag> 🥧 WXML/WXSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记</title>
      <link href="/2023/05/21/%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/05/21/%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>网页正在加急制作中，先饮杯奶茶🧋</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 🎈笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧 个人笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原码 补码 反码</title>
      <link href="/2023/05/02/%E5%8E%9F%E7%A0%81-%E8%A1%A5%E7%A0%81-%E5%8F%8D%E7%A0%81/"/>
      <url>/2023/05/02/%E5%8E%9F%E7%A0%81-%E8%A1%A5%E7%A0%81-%E5%8F%8D%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h1><p>原码就是符号位加上真值的绝对值，即用第一位表示符号，其余位表示值。比如如果是8位二进制：</p><p>+1 = 0000 0001</p><p>-1 = 1000 0001</p><p>第一位是符号位，所以8位二进制数的取值范围就是：</p><p>[1111 1111 , 0111 1111]</p><p>即</p><p>[-127 , 127]</p><p>原码是人脑最容易理解和计算的表示方式。</p><h1 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h1><p>反码的表示方法是: 正数的反码是其本身，负数的反码是在其原码的基础上，符号位不变，其余各个位取反。</p><p>[+1] = 00000001= 00000001</p><p>[-1] = 10000001= 11111110</p><p>可见如果一个反码表示的是负数，人脑无法直观的看出来它的数值。通常要将其转换成原码再计算。</p><h1 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h1><p>补码的表示方法是：正数的补码就是其本身，负数的补码是在其原码的基础上，符号位不变，其余各位取反，最后+1 (即在反码的基础上+1)。</p><p>[+1] = 00000001 = 00000001 = 00000001</p><p>[-1] = 10000001 = 11111110 = 11111111</p><p>对于负数，补码表示方式也是人脑无法直观看出其数值的。通常也需要转换成原码在计算其数值。</p><p>补码解决了0的符号以及两个编码的问题，让计算机的减法可以直接转为加法运算(计算机内部都是用补码直接运算，只有负数与原码不一致):</p><p>1-1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原</p><p>这样0用[0000 0000]表示, 而以前出现问题的-0则不存在了.而且可以用[1000 0000]表示-128:</p><p>(-1) + (-127) = [1000 0001]原 + [1111 1111]原 = [1111 1111]补 + [1000 0001]补 = [1000 0000]补</p><p>-1-127的结果应该是-128，在用补码运算的结果中，[1000 0000]补就是-128。但是注意因为实际上是使用以前的-0的补码来表示-128，所以-128并没有原码和反码表示 。</p><p>使用补码，不仅仅修复了0的符号以及存在两个编码的问题，而且还能够：多表示一个最低数。这就是为什么8位二进制，使用原码或反码表示的范围为[-127, +127]，而使用补码表示的范围为[-128, 127]。</p>]]></content>
      
      
      <categories>
          
          <category> 🎈c puls plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🥧c plus plus </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>charts</title>
      <link href="/charts/index.html"/>
      <url>/charts/index.html</url>
      
        <content type="html"><![CDATA[<!-- 文章发布时间统计图 --><div id="posts-chart" data-start="2021-01" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 文章标签统计图 --><div id="tags-chart" data-length="10" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 文章分类统计图 --><div id="categories-chart" data-parent="true" style="border-radius: 8px; height: 300px; padding: 10px;"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/font.css"/>
      <url>/css/font.css</url>
      
        <content type="html"><![CDATA[@font-face {  font-family: 'CascadiaCodePL';  font-display: swap;  src: url('../font/YeZiGongChangRuiYunNongKaiShu-2.ttf') format("truetype");}@font-face {  font-family: 'ziti';  font-display: swap;  src: url('../font/CascadiaCodeItalic_VTT.ttf') format("truetype");}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/readPercent.css"/>
      <url>/css/readPercent.css</url>
      
        <content type="html"><![CDATA[/* 返回顶部 */button#go-up #percent {    display: none;    font-weight: bold;    font-size: 15px !important;}button#go-up span {    font-size: 12px!important;    margin-right: -1px;}/* 鼠标滑动到按钮上时显示返回顶部图标 */button#go-up:hover i {    display: block !important;}button#go-up:hover #percent {    display: none !important;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/VolantisTags.js"/>
      <url>/js/VolantisTags.js</url>
      
        <content type="html"><![CDATA[/* eslint-disable */(function ($) {    "use strict";    function setTabs() {      const $tabs = $(".tabs");      if ($tabs.length === 0) return;      let $navs = $tabs.find(".nav-tabs .tab");      for (var i = 0; i < $navs.length; i++) {        let $a = $tabs.find($navs[i].children[0]);        $a.addClass($a.attr("href"));        $a.removeAttr("href");      }      $(".tabs .nav-tabs").on("click", "a", (e) => {        e.preventDefault();        e.stopPropagation();        let $tab = $(e.target.parentElement.parentElement.parentElement);        $tab.find(".nav-tabs .active").removeClass("active");        $tab.find(e.target.parentElement).addClass("active");        $tab.find(".tab-content .active").removeClass("active");        $tab.find($(e.target).attr("class")).addClass("active");        return false;      });    }      $(function () {      setTabs();      // $(".article .video-container").fitVids();      $(".scroll-down").on("click", function () {        scrolltoElement(".l_body");      });      setTimeout(function () {        $("#loading-bar-wrapper").fadeOut(500);      }, 300);    });  })(jQuery);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[:root {  --blue-custom: #5ea6e5;  --loading-color: rgba(207, 246, 247, 0.92);  --border-color: #c9c9c9;  --color-red: rgb(241, 71, 71);  --color-orange: rgb(241, 162, 71);  --color-yellow: rgb(241, 238, 71);  --color-purple: rgb(179, 71, 241);  --color-blue: rgb(102, 204, 255);  --color-gray: rgb(226, 226, 226);  --color-green: rgb(57, 197, 187);  --color-whitegray: rgb(241, 241, 241);  --color-pink: rgb(237, 112, 155);  --color-black: rgb(0, 0, 0);  --color-darkblue: rgb(97, 100, 159);  --color-heoblue: rgb(66, 90, 239);  --btn-bg: var(--theme-color) !important;  --scrollbar-color: var(--theme-color) !important;  --border-style: 1px solid rgba(169, 169, 169, 0.7);  /* 代码框行数背景色 */  --hlnumber-bg: #282c34;  /* 代码框顶部背景色 */  --hltools-bg: #1c1c1c;  /* 代码框背景色 */  --hl-bg: #282c34;}/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }  /* 翻页按钮居中 */#pagination {    width: 100%;    margin: auto;  }  /* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {    background: linear-gradient(      -45deg,      #e8d8b9,      #eccec5,      #a3e9eb,      #bdbdf0,      #eec1ea    );    box-shadow: 0 0 5px rgb(66, 68, 68);    position: relative;    background-size: 400% 400%;    -webkit-animation: Gradient 10s ease infinite;    -moz-animation: Gradient 10s ease infinite;    animation: Gradient 10s ease infinite !important;  }  @-webkit-keyframes Gradient {    0% {      background-position: 0% 50%;    }    50% {      background-position: 100% 50%;    }    100% {      background-position: 0% 50%;    }  }  @-moz-keyframes Gradient {    0% {      background-position: 0% 50%;    }    50% {      background-position: 100% 50%;    }    100% {      background-position: 0% 50%;    }  }  @keyframes Gradient {    0% {      background-position: 0% 50%;    }    50% {      background-position: 100% 50%;    }    100% {      background-position: 0% 50%;    }  }    /* 黑夜模式适配 */  [data-theme="dark"] #aside-content > .card-widget.card-info {    background: #191919ee;  }    /* 个人信息Follow me按钮 */  #aside-content > .card-widget.card-info > #card-info-btn {    background-color: #3eb8be;    border-radius: 8px;  }  /* 鼠标样式 */#cursor {    position: fixed;    width: 16px;    height: 16px;    /* 这里改变跟随的底色 */    background: rgb(57, 197, 187);    border-radius: 8px;    opacity: 0.25;    z-index: 10086;    pointer-events: none;    transition: 0.2s ease-in-out;    transition-property: background, opacity, transform;  }    #cursor.hidden {    opacity: 0;  }    #cursor.hover {    opacity: 0.1;    transform: scale(2.5);    -webkit-transform: scale(2.5);    -moz-transform: scale(2.5);    -ms-transform: scale(2.5);    -o-transform: scale(2.5);  }    #cursor.active {    opacity: 0.5;    transform: scale(0.5);    -webkit-transform: scale(0.5);    -moz-transform: scale(0.5);    -ms-transform: scale(0.5);    -o-transform: scale(0.5);  }  /* 帧率检测 */#fps {    position: fixed;    /* 指定位置 */    left: 15px;    bottom: 15px;    z-index: 1919810;  }  [data-theme="light"] #fps {    background-color: rgba(255, 255, 255, 0.85);    backdrop-filter: var(--backdrop-filter);    padding: 8px;    border-radius: 4px;  }  [data-theme="dark"] #fps {    background-color: rgba(0, 0, 0, 0.72);    backdrop-filter: var(--backdrop-filter);    padding: 8px;    border-radius: 4px;  }    .card-info-avatar .author-status-box {    position: absolute;    bottom: 0;    left: calc(100% - 28px);    width: 28px;    height: 28px;    border: 1px solid #d0d7de;    border-radius: 2em;    background-color: #f8f8f8f8;    transition: 0.4s;    overflow: hidden;  }    [data-theme="dark"] .card-info-avatar .author-status-box {    background-color: #222222f2;    border: 1px solid #5c6060;  }    .card-info-avatar .author-status-box .author-status {    display: flex;    align-items: center;    justify-content: center;    height: 28px;    padding: 0 5px;  }    .card-info-avatar .author-status-box:hover {    width: 105px;  }    .card-info-avatar .author-status-box:hover .author-status span {    width: 105px;    margin-left: 4px;  }    .card-info-avatar .author-status-box .author-status span {    width: 0;    font-size: 12px;    height: 100%;    overflow: hidden;    text-overflow: ellipsis;    white-space: nowrap;    transition: 0.4s;  }    .card-widget .card-info-avatar {    display: inline-block;    position: relative;  }  /* 信息卡片彩带 */.author_top:hover {  background: url(https://tuchuang.voooe.cn/images/2023/01/02/snow.gif);  background-size: cover;}/* 个人信息卡片背景图 */[data-theme="light"] #aside-content > .card-widget.card-info {  background-image: url(/image/springBg.webp);  background-repeat: no-repeat;  background-attachment: inherit;  background-size: 100%;}[data-theme="dark"] #aside-content > .card-widget.card-info {  background-image: url(/image/aurora.webp);  background-repeat: no-repeat;  background-attachment: inherit;  background-size: 120%;}/* 头像呼吸灯 */[data-theme="light"] .avatar-img {  animation: huxi_light 4s ease-in-out infinite;}[data-theme="dark"] .avatar-img {  animation: huxi_dark 4s ease-in-out infinite;}@keyframes huxi_light {  0% {    box-shadow: 0px 0px 1px 1px #e9f5fa;  }  50% {    box-shadow: 0px 0px 5px 5px #e9f5fa;  }  100% {    box-shadow: 0px 0px 1px 1px #e9f5fa;  }}@keyframes huxi_dark {  0% {    box-shadow: 0px 0px 1px 1px #39c5bb;  }  50% {    box-shadow: 0px 0px 5px 5px #39c5bb;  }  100% {    box-shadow: 0px 0px 1px 1px #39c5bb;  }}/* 波浪css */.main-hero-waves-area {  width: 100%;  position: absolute;  left: 0;  bottom: -11px;  z-index: 5;}.waves-area .waves-svg {  width: 100%;  height: 5rem;}/* Animation */.parallax > use {  animation: move-forever 25s cubic-bezier(0.55, 0.5, 0.45, 0.5) infinite;}.parallax > use:nth-child(1) {  animation-delay: -2s;  animation-duration: 7s;  fill: #f7f9febd;}.parallax > use:nth-child(2) {  animation-delay: -3s;  animation-duration: 10s;  fill: #f7f9fe82;}.parallax > use:nth-child(3) {  animation-delay: -4s;  animation-duration: 13s;  fill: #f7f9fe36;}.parallax > use:nth-child(4) {  animation-delay: -5s;  animation-duration: 20s;  fill: #f7f9fe;}/* 黑色模式背景 */[data-theme="dark"] .parallax > use:nth-child(1) {  animation-delay: -2s;  animation-duration: 7s;  fill: #18171dc8;}[data-theme="dark"] .parallax > use:nth-child(2) {  animation-delay: -3s;  animation-duration: 10s;  fill: #18171d80;}[data-theme="dark"] .parallax > use:nth-child(3) {  animation-delay: -4s;  animation-duration: 13s;  fill: #18171d3e;}[data-theme="dark"] .parallax > use:nth-child(4) {  animation-delay: -5s;  animation-duration: 20s;  fill: #18171d;}@keyframes move-forever {  0% {    transform: translate3d(-90px, 0, 0);  }  100% {    transform: translate3d(85px, 0, 0);  }}/*Shrinking for mobile*/@media (max-width: 768px) {  .waves-area .waves-svg {    height: 40px;    min-height: 40px;  }}/* 滚动条样式 */::-webkit-scrollbar {  width: 8px;  height: 8px;}::-webkit-scrollbar-track {  background-color: rgba(73, 177, 245, 0.2);  border-radius: 2em;}::-webkit-scrollbar-thumb {  background-color: var(--theme-color);  background-image: -webkit-linear-gradient(    45deg,    rgba(255, 255, 255, 0.4) 25%,    transparent 25%,    transparent 50%,    rgba(255, 255, 255, 0.4) 50%,    rgba(255, 255, 255, 0.4) 75%,    transparent 75%,    transparent  );  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: rgb(107, 113, 219);}/* 欢迎信息 */#welcome-info {  background: linear-gradient(45deg, #b9f4f3, #e3fbf9);  border-radius: 18px;  padding: 10px;}[data-theme="dark"] #welcome-info {  background: #212121;}/* [--blue-custom="dark"] #welcome-info {  background: #007acc;}[--pink-custom="dark"] #welcome-info {  background: #ed709b;} *//*哔哩哔哩视频适配*/.aspect-ratio {  position: relative;  width: 90%;  height: 90%;  padding-bottom: 100%;  margin: 3% auto;  text-align: center;}.aspect-ratio iframe {  position: absolute;  width: 100%;  height: 76%;  left: 0;  top: 0;}/* 侧边卡片栏宽度 */.aside-content {  max-width: 318px;  min-width: 300px;}/* 除了首页以外其他页面隐藏卡片，并采用宽屏显示 *//* 除了首页以外其他页面隐藏卡片，并采用宽屏显示 *//* #archive,#page,#category,#tag {  width: 100%;}.page:not(.page.home) .aside-content {  display: none;} */]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/readPercent.js"/>
      <url>/js/readPercent.js</url>
      
        <content type="html"><![CDATA[window.onscroll = percent;// 执行函数// 页面百分比function percent() {    let a = document.documentElement.scrollTop || window.pageYOffset, // 卷去高度        b = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight) - document.documentElement.clientHeight, // 整个网页高度        result = Math.round(a / b * 100), // 计算百分比        up = document.querySelector("#go-up") // 获取按钮    if (result <= 95) {        up.childNodes[0].style.display = 'none'        up.childNodes[1].style.display = 'block'        up.childNodes[1].innerHTML = result;    } else {        up.childNodes[1].style.display = 'none'        up.childNodes[0].style.display = 'block'    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>movie</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[<!-- <center><font color=blue ，size = 10>( ＾∀＾）／欢迎光临，可以试试右下角关灯观看!＼( ＾∀＾）</font> --><p><center><font size = 5; color=blue>( ＾∀＾）／欢迎光临，可以试试右下角关灯观看!＼( ＾∀＾）</font></p><h1 id="音乐是心灵的一味良剂"><a href="#音乐是心灵的一味良剂" class="headerlink" title="音乐是心灵的一味良剂"></a>音乐是心灵的一味良剂</h1><div class="tabs" id="music"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#music-1">1 号厅</button></li><li class="tab"><button type="button" data-href="#music-2">2 号厅</button></li><li class="tab"><button type="button" data-href="#music-3">3 号厅</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="music-1"><h3 id="您当前正处于-1-号厅，当前放映的是《梁祝-钢琴曲》"><a href="#您当前正处于-1-号厅，当前放映的是《梁祝-钢琴曲》" class="headerlink" title=" 您当前正处于 1 号厅，当前放映的是《梁祝-钢琴曲》"></a><font color=#f47466> 您当前正处于 1 号厅，当前放映的是《梁祝-钢琴曲》</font></h3><div align=center class="aspect-ratio">    <iframe src="//player.bilibili.com/player.html?aid=696567712&bvid=BV1bm4y1675T&cid=1068227530&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="music-2"><h3 id="您当前正处于-2-号厅，当前放映的是《Lonely》"><a href="#您当前正处于-2-号厅，当前放映的是《Lonely》" class="headerlink" title=" 您当前正处于 2 号厅，当前放映的是《Lonely》"></a><font color=#f47466> 您当前正处于 2 号厅，当前放映的是《Lonely》</font></h3><div align=center class="aspect-ratio">    <iframe src="//player.bilibili.com/player.html?aid=929880587&bvid=BV19K4y127Ag&cid=318180121&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="music-3"><h3 id="您当前正处于-3-号厅，当前放映的是《Black-sheep》"><a href="#您当前正处于-3-号厅，当前放映的是《Black-sheep》" class="headerlink" title=" 您当前正处于 3 号厅，当前放映的是《Black sheep》"></a><font color=#f47466> 您当前正处于 3 号厅，当前放映的是《Black sheep》</font></h3><div align=center class="aspect-ratio">    <iframe src="//player.bilibili.com/player.html?aid=226597779&bvid=BV1Rh411G7EF&cid=1069971292&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="电影是心灵的旅行"><a href="#电影是心灵的旅行" class="headerlink" title="电影是心灵的旅行"></a>电影是心灵的旅行</h1><div class="tabs" id="电影"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#电影-1">壹 号厅</button></li><li class="tab"><button type="button" data-href="#电影-2">贰 号厅</button></li><li class="tab"><button type="button" data-href="#电影-3">叁 号厅</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="电影-1"><h3 id="您当前正处于-壹-号厅，当前放映的是《心灵奇旅》"><a href="#您当前正处于-壹-号厅，当前放映的是《心灵奇旅》" class="headerlink" title="您当前正处于 壹 号厅，当前放映的是《心灵奇旅》"></a><font color=#f47466>您当前正处于 壹 号厅，当前放映的是《心灵奇旅》</font></h3><div align=center class="aspect-ratio">    <iframe height=498 width=510 src='https://player.youku.com/embed/XNTExNDg5NDgzMg==' frameborder=0 'allowfullscreen'></iframe></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="电影-2"><h3 id="您当前正处于-贰-号厅，当前放映的是《至暗时刻》"><a href="#您当前正处于-贰-号厅，当前放映的是《至暗时刻》" class="headerlink" title="您当前正处于 贰 号厅，当前放映的是《至暗时刻》"></a><font color=#f47466>您当前正处于 贰 号厅，当前放映的是《至暗时刻》</font></h3><div align=center class="aspect-ratio">    <iframe height=498 width=510 src='https://player.youku.com/embed/XMzQyODg5NjQ3Ng==' frameborder=0 'allowfullscreen'></iframe></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="电影-3"><h3 id="您当前正处于-叁-号厅，当前放映的是《绿皮书》"><a href="#您当前正处于-叁-号厅，当前放映的是《绿皮书》" class="headerlink" title="您当前正处于 叁 号厅，当前放映的是《绿皮书》"></a><font color=#f47466>您当前正处于 叁 号厅，当前放映的是《绿皮书》</font></h3><div align=center class="aspect-ratio">    <iframe height=498 width=510 src='https://player.youku.com/embed/XNDA4MDcyMDI0OA==' frameborder=0 'allowfullscreen'></iframe></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="个人收藏推荐"><a href="#个人收藏推荐" class="headerlink" title="个人收藏推荐"></a>个人收藏推荐</h1><div class="tabs" id="推荐"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#推荐-1">静下心来</button></li><li class="tab"><button type="button" data-href="#推荐-2">鲁迅</button></li><li class="tab"><button type="button" data-href="#推荐-3">王德峰</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="推荐-1"><div align=center class="aspect-ratio">    <iframe src="//player.bilibili.com/player.html?aid=814741940&bvid=BV1MG4y1Y7ak&cid=809257637&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="推荐-2"><div align=center class="aspect-ratio">    <iframe src="//player.bilibili.com/player.html?aid=293153006&bvid=BV14f4y1E79N&cid=415761826&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="推荐-3"><div align=center class="aspect-ratio">    <iframe src="//player.bilibili.com/player.html?aid=635164923&bvid=BV1gb4y1i7Rh&cid=470785779&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>网站</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h1><div class="site-card-group"><a class="site-card" href="https://google.fomal.cc/"><div class="img"><img src="https://img2.baidu.com/it/u=1168575598,3417000709&fm=253&fmt=auto&app=138&f=JPEG?w=750&h=500"/></div><div class="info"><img src="https://google.fomal.cc/favicon.ico"/><span class="title">Google</span><span class="desc">无需翻墙也可以访问谷歌</span></div></a><a class="site-card" href="https://www.ilovepdf.com/zh-cn"><div class="img"><img src="https://img2.baidu.com/it/u=2061698305,1347684775&fm=253&fmt=auto&app=138&f=PNG?w=952&h=500"/></div><div class="info"><img src="https://www.ilovepdf.com/favicon.ico"/><span class="title">I Love PDF</span><span class="desc">一个完全免费、便捷、强大的PDF在线工具</span></div></a><a class="site-card" href="http://www.199it.com/"><div class="img"><img src="https://img2.baidu.com/it/u=3296829953,871051569&fm=253&fmt=auto&app=120&f=JPEG?w=460&h=250"/></div><div class="info"><img src="http://www.199it.com/favicon.ico"/><span class="title">199T大数据导航</span><span class="desc">199T中文互联网数据资讯网</span></div></a><a class="site-card" href="http://www.4243.net/"><div class="img"><img src="https://img2.baidu.com/it/u=2925677808,735634614&fm=253&fmt=auto&app=138&f=JPEG?w=903&h=500"/></div><div class="info"><img src="http://www.4243.net/images/favicon.ico"/><span class="title">大木虫学术导航</span><span class="desc">各种和学术有关的信息一应俱全</span></div></a><a class="site-card" href="https://www.ping.cn/"><div class="img"><img src="https://img0.baidu.com/it/u=4096137748,2701620107&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=330"/></div><div class="info"><img src="https://www.ping.cn/favicon.ico"/><span class="title">Ping.cn</span><span class="desc">网站速度测试、网络速度检测、多地区在线ping检测...</span></div></a><a class="site-card" href="https://www.uupoop.com/#/"><div class="img"><img src="https://img0.baidu.com/it/u=2549486855,3822128598&fm=253&fmt=auto&app=138&f=JPG?w=500&h=313"/></div><div class="info"><img src="https://www.uupoop.com/favicon.ico"/><span class="title">稿定设计</span><span class="desc">专业精简的在线ps图片照片制作处理软件工具...</span></div></a><a class="site-card" href="https://flowus.cn/product"><div class="img"><img src="https://img0.baidu.com/it/u=2242374362,2397447072&fm=253&fmt=auto&app=120&f=JPEG?w=640&h=360"/></div><div class="info"><img src="https://cdn.allflow.cn/assets/favicon.png"/><span class="title">FlowUs息流</span><span class="desc">新一代知识管理与协作平台</span></div></a><a class="site-card" href="https://jianlixiazai.cn/"><div class="img"><img src="https://img0.baidu.com/it/u=1264802571,2296448083&fm=253&fmt=auto&app=138&f=JPEG?w=650&h=365"/></div><div class="info"><img src="https://jianlixiazai.cn/assets/img/favicon.png"/><span class="title">免费简历模板下载</span><span class="desc">一个可以免费下载word格式简历的网站</span></div></a><a class="site-card" href="https://imagestool.com/zh_CN/index.html"><div class="img"><img src="https://img1.baidu.com/it/u=3701772426,3988314680&fm=253&fmt=auto&app=138&f=PNG?w=500&h=297"/></div><div class="info"><img src="https://imagestool.com/favicon.ico"/><span class="title">imagesTool</span><span class="desc">无需上传文件也可在线处理图片的神器</span></div></a><a class="site-card" href="https://tinypng.com/"><div class="img"><img src="https://img1.baidu.com/it/u=1450647140,3671339293&fm=253&fmt=auto&app=138&f=JPEG?w=667&h=500"/></div><div class="info"><img src="https://tinypng.com/images/apple-touch-icon.png"/><span class="title">TinyPNG</span><span class="desc">一个图片无损压缩的网站</span></div></a><a class="site-card" href="https://cloudconvert.com/"><div class="img"><img src="https://img0.baidu.com/it/u=2192673679,2949053802&fm=253&fmt=auto&app=138&f=JPEG?w=889&h=500"/></div><div class="info"><img src="https://cloudconvert.com/images/logo_flat_32.png"/><span class="title">Cloud Convert</span><span class="desc">一个十分强大的在线格式转换工具</span></div></a><a class="site-card" href="https://cowtransfer.com/"><div class="img"><img src="https://cdn.sspai.com/article/66fdd32d-4bd4-5bb3-0820-c0a97fee636f.jpg?imageMogr2/auto-orient/quality/95/thumbnail/%211420x708r/gravity/Center/crop/1420x708/interlace/1"/></div><div class="info"><img src="https://cowtransfer.com/favicon.ico"/><span class="title">奶牛快传</span><span class="desc">「奶牛快传」是一款主打年轻客群的大文件传输服务...</span></div></a></div><p><br /></p><h1 id="上帝视角"><a href="#上帝视角" class="headerlink" title="上帝视角"></a>上帝视角</h1><div class="site-card-group"><a class="site-card" href="https://www.darkmap.cn/"><div class="img"><img src="https://image.imufu.cn/forum/201201/03/1930404zjv8gosb8vsotvx.jpg"/></div><div class="info"><img src="https://www.darkmap.cn/favicon.ico"/><span class="title">全球光污染地图</span><span class="desc">观星必备，全球波特尔光污染等级查询</span></div></a><a class="site-card" href="https://www.heavens-above.com/"><div class="img"><img src="https://img0.baidu.com/it/u=3630712112,678518697&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=237"/></div><div class="info"><img src="https://www.heavens-above.com/favicon.ico"/><span class="title">Heavens above</span><span class="desc">记录全球卫星实时位置与可见性的网站</span></div></a><a class="site-card" href=""><div class="img"><img src="https://img0.baidu.com/it/u=31771107,2924071807&fm=253&fmt=auto&app=138&f=JPEG?w=701&h=500"/></div><div class="info"><img src="https://earth.nullschool.net/apple-touch-icon-120x120.png"/><span class="title">earth全球地图 url=https://earth.nullschool.net/zh-cn/</span><span class="desc">一个全球天气状况的视觉化超级计算机预报每三小时…</span></div></a><a class="site-card" href="https://www.google.com/intl/zh-CN/earth/"><div class="img"><img src="https://img1.baidu.com/it/u=189732036,1324818720&fm=253&fmt=auto&app=138&f=JPEG?w=957&h=500"/></div><div class="info"><img src="https://img1.baidu.com/it/u=1166283861,1553356203&fm=253&fmt=auto&app=138&f=JPEG?w=600&h=434"/><span class="title">Google Earth</span><span class="desc">世界上最详尽的地球仪</span></div></a><a class="site-card" href="https://stellarium.org/"><div class="img"><img src="https://img1.baidu.com/it/u=285289609,110389859&fm=253&fmt=auto&app=138&f=JPEG?w=824&h=500"/></div><div class="info"><img src="https://stellarium.org/favicon.ico"/><span class="title">Stellarium</span><span class="desc">适用于您计算机的免费开源 天文馆，可计算前后10万..</span></div></a><a class="site-card" href="https://www.windy.com/?52.371,4.904,5"><div class="img"><img src="https://img0.baidu.com/it/u=3404164025,1833933236&fm=253&fmt=auto&app=138&f=JPEG?w=658&h=439"/></div><div class="info"><img src="https://www.windy.com/favicon.ico"/><span class="title">Windy</span><span class="desc">提供世界上最好的天气预报服务</span></div></a><a class="site-card" href="https://www.msn.cn/zh-cn/weather/"><div class="img"><img src="https://img2.baidu.com/it/u=2564296994,4254401408&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=363"/></div><div class="info"><img src="https://img1.baidu.com/it/u=1610368037,2198476565&fm=253&fmt=auto&app=138&f=JPEG?w=889&h=500"/><span class="title">Microsoft Start</span><span class="desc">提供准确的天气预报服务</span></div></a></div><p><br /></p><h1 id="算法网站"><a href="#算法网站" class="headerlink" title="算法网站"></a>算法网站</h1><blockquote><p>少年你准备好开卷了吗？<br><div class="site-card-group"><a class="site-card" href="https://codetop.cc/home"><div class="img"><img src="https://img1.baidu.com/it/u=97279850,713678509&fm=253&fmt=auto&app=138&f=PNG?w=550&h=272"/></div><div class="info"><img src="https://codetop.cc/logo.jpg"/><span class="title">CodeTop</span><span class="desc">CodeTop用于汇总互联网大厂面试的高频考题帮助</span></div></a><a class="site-card" href="https://www.programmercarl.com/"><div class="img"><img src="https://img0.baidu.com/it/u=1144768895,574323614&fm=253&fmt=auto&app=138&f=JPEG?w=880&h=408"/></div><div class="info"><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210614201246512.png"/><span class="title">代码随想录</span><span class="desc">卡哥的算法刷题合集，非常适合算法初学者</span></div></a><a class="site-card" href="https://interviewguide.cn/"><div class="img"><img src="https://img2.baidu.com/it/u=3207269873,3197889981&fm=253&fmt=auto&app=138&f=PNG?w=793&h=500"/></div><div class="info"><img src="https://interviewguide.cn/favicon.ico"/><span class="title">阿秀的学习笔记</span><span class="desc">阿秀从校园职场多年的计算机自学总结</span></div></a><a class="site-card" href="https://www.xiaolincoding.com/"><div class="img"><img src="https://img0.baidu.com/it/u=971565758,475369905&fm=253&fmt=auto&app=138&f=JPEG?w=857&h=500"/></div><div class="info"><img src="https://www.xiaolincoding.com/icon.webp"/><span class="title">小林 x 图解计算机基础</span><span class="desc">图解计算机网络、操作系统、计算机组成、数据库，让天下没有难懂的八股文！</span></div></a><a class="site-card" href="https://acoier.com/"><div class="img"><img src="https://img2.baidu.com/it/u=292804051,2063130546&fm=253&fmt=auto&app=138&f=JPG?w=400&h=225"/></div><div class="info"><img src="https://acoier.com/oimg/RoundCorner.png"/><span class="title">宫水三叶の刷题日记</span><span class="desc">提供世界上最好的天气预报服务</span></div></a><a class="site-card" href="https://csacademy.com/app/graph_editor/"><div class="img"><img src="https://img0.baidu.com/it/u=336054246,226141696&fm=253&fmt=auto&app=138&f=PNG?w=1073&h=500"/></div><div class="info"><img src="https://csacademy.com/favicon.ico"/><span class="title">图结构可视化</span><span class="desc">将图转换为可视化</span></div></a></div><br><br /></p></blockquote><h1 id="刷题网站"><a href="#刷题网站" class="headerlink" title="刷题网站"></a>刷题网站</h1><div class="site-card-group"><a class="site-card" href="https://oj.czos.cn/"><div class="img"><img src="https://img1.baidu.com/it/u=3896541106,3668880018&fm=253&fmt=auto&app=138&f=JPEG?w=400&h=280"/></div><div class="info"><img src="https://oj.czos.cn/favicon.ico"/><span class="title">东方博宜oj</span><span class="desc">非常适合新手的小伙伴</span></div></a><a class="site-card" href="https://www.codechef.com/"><div class="img"><img src="https://img0.baidu.com/it/u=2732899572,2721088027&fm=253&fmt=auto&app=138&f=JPEG?w=723&h=500"/></div><div class="info"><img src="https://www.codechef.com/favicon.ico"/><span class="title">CodeChef</span><span class="desc">代码厨子，国外非常火的刷题网站</span></div></a><a class="site-card" href="https://codeforces.com/"><div class="img"><img src="https://img0.baidu.com/it/u=433445481,1198356654&fm=253&fmt=auto&app=138&f=JPEG?w=950&h=399"/></div><div class="info"><img src="https://codeforces.org/s/0/apple-icon-76x76.png"/><span class="title">CodeForces</span><span class="desc">世界各路大神聚集地</span></div></a><a class="site-card" href="https://leetcode.cn/"><div class="img"><img src="https://picx.zhimg.com/v2-4c90223c3b08372218c26a4edb436863_720w.jpg?source=172ae18b"/></div><div class="info"><img src="https://leetcode.cn/favicon.ico"/><span class="title">Leetcode</span><span class="desc">这是一项由全球知名编程训练平台,具有较高的知名度和影响力</span></div></a></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/cebian.css"/>
      <url>/css/cebian.css</url>
      
        <content type="html"><![CDATA[@media screen and (max-width: 900px){    .aside-content{        max-width:none!important;    }}#archive,#page,#category,#tag{    width:100%;}.page:not(.page.home) .aside-content{    display: none;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/11.html"/>
      <url>/tags/11.html</url>
      
        <content type="html"><![CDATA[<p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一门很厉害的语言。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 让你掉头发的一门语言。<br><!-- <details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details></p><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details> --><h1 id="c-初识"><a href="#c-初识" class="headerlink" title="c++初识"></a>c++初识</h1><details class="folding-tag" yellow><summary> c plus plus初识 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 常量 </summary>              <div class='content'>              <p>C++定义常量两种放式：</p><p>1：#define 宏常量： define 常量名 常量值</p><p>  通常在文件上方定义 表示一个常量</p><p>2： const 修饰的变量 const   数据类型 常量名 =常量值</p><p>  通常在变量定义前加关键字const，修饰该变量为常量，不可修改</p><p><br/></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># denfine day 7</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;&quot;一周共有&quot;&lt;&lt;day&lt;&lt;&quot;天&quot;&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//const 修饰的变量</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int month=12;    //正常的变量</span><br><span class="line">  const int month=12;  //加了const变为不可修改的常量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 标识符 </summary>              <div class='content'>              <ul><li>标识符不能是关键字</li><li><p>标识符只能由字母，数字，下划线组成</p></li><li><p>第一个字符必须为字母或下划线</p></li><li>标识符中字母是区分大小写的</li></ul>              </div>            </details>              </div>            </details><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><details class="folding-tag" yellow><summary> 数据类型 </summary>              <div class='content'>              <details class="folding-tag" green><summary> 整形 </summary>              <div class='content'>              <p><br/></p><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th>占用空间</th></tr></thead><tbody><tr><td style="text-align:center">short（短整型）</td><td>2字节</td></tr><tr><td style="text-align:center">int（整形）</td><td>4字节</td></tr><tr><td style="text-align:center">long（长整型）</td><td>Windows4字节</td></tr><tr><td style="text-align:center">long long（长长整形）</td><td>8字节</td></tr></tbody></table></div>              </div>            </details><details class="folding-tag" red><summary> 浮点型 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">专用空间</th><th style="text-align:center">位数</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4字节</td><td style="text-align:center">6~7位有效数字</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8字节</td><td style="text-align:center">15~16位有效数字</td></tr><tr><td style="text-align:center">long double</td><td style="text-align:center">8字节</td><td style="text-align:center">15~16位有效数字</td></tr></tbody></table></div><hr><p><br/></p><p>保留小数点后几位格式：</p><pre><code>1：头文件：#include&lt;iomanip&gt;2：输出格式：cout&lt;&lt;fixed&lt;&lt;setprecision( 1 )&lt;&lt;a&lt;&lt;endl;              //setprecision( 填写保留的位数 )</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;iomanip&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  const float a=2.5;</span><br><span class="line">    const float b=1.5;</span><br><span class="line">    int c,d;</span><br><span class="line">    float e;</span><br><span class="line">    cin&gt;&gt;c&gt;&gt;d;</span><br><span class="line">    e=((c-1)*a)+(d*b);</span><br><span class="line">    cout&lt;&lt;fixed&lt;&lt;setprecision(1)&lt;&lt;e&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> sizeof </summary>              <div class='content'>              <p>利用sizeof关键字可以统计数据类型所占用的大小空间</p><p>语法：sizeof（数据类型/变量）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  short num1=100;</span><br><span class="line">  cout&lt;&lt;&quot;short所占用的字节数为&quot;&lt;&lt;sizeof(num1)&lt;&lt;endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 实型 </summary>              <div class='content'>              <p>单精度：float</p><p>双精度：double</p><p>c++在默认情况下，输出一个小数，会显示6位有效数字</p><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">占用空间</th><th style="text-align:center">有效数字范围</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4字节</td><td style="text-align:center">7位有效数字</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8字节</td><td style="text-align:center">15-16位有效数字</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //1；单精度</span><br><span class="line">  float f1 =3.14f;  //加f是转换为单精度类型</span><br><span class="line">  //2：双精度</span><br><span class="line">  double f2=3.14;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>科学计数法</p><p>float f2 =3e2;      //3*10^2</p><p>float f3=3e-2    //3*0.1^2</p>              </div>            </details><details class="folding-tag" red><summary> 字符型 </summary>              <div class='content'>              <p>作用：字符型变量用于显示单个字符</p><p>语法：char ch=’a’;</p><ul><li><p>在显示字符型变量时，用单引号将字符括起来，不能用双引号</p></li><li><p>单引号内只能有一个字符，不可以是字符串</p></li></ul><p>==c和c++中只占用1个字节==</p>              </div>            </details><details class="folding-tag" blue><summary> 转义字符 </summary>              <div class='content'>              <p>作用：用于表示一些不能显示出来的ASCII字符</p><p>现阶段常用的转义字符有：\n    \ \    \t</p><p>\n 换行，将当前位置移到下一行开头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;&quot;hello world \n&quot;</span><br></pre></td></tr></table></figure><p>\ \ 代表一个反斜杠字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;&quot;hello world \\&quot;</span><br></pre></td></tr></table></figure><p>\t 水平制表，（跳到下一个tab位置）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;&quot;hello world \t&quot;&lt;&lt;&quot;aaa&quot;&lt;&lt;endl;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 字符串类型 </summary>              <div class='content'>              <p>C风格字符串： char 变量名【】=“字符串值”</p><p>==字符串为双引号，字符为单引号==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  char str1[]=&quot;hello world&quot;</span><br><span class="line">  cout&lt;&lt;str1&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++风格字符串： string 变量名 =“字符串值”</p><p>==必须加头文件  #include<string>==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  string str2=&quot;hello world&quot;</span><br><span class="line">  cout&lt;&lt;str2&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 布尔数据类型 </summary>              <div class='content'>              <p>bool类型只有两个值：(bool 只占用1个字节)</p><ul><li>true ~~~~真（本质是1）</li><li>flase ~~~~假（本质是0）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  bool flag=true;</span><br><span class="line">  cout&lt;&lt;flag&lt;&lt;endl;</span><br><span class="line">  flag =false;</span><br><span class="line">  cour&lt;&lt;flag&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><details class="folding-tag" yellow><summary> 运算符 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 算数运算符 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">术语</th><th style="text-align:center">示例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td><td style="text-align:center">10+5</td><td style="text-align:center">15</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td><td style="text-align:center">10-5</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td><td style="text-align:center">10*5</td><td style="text-align:center">50</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除</td><td style="text-align:center">10/5</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取模</td><td style="text-align:center">10%3</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">++</td><td style="text-align:center">前置递增</td><td style="text-align:center">a=2;b=++a</td><td style="text-align:center">a=3;b=3</td></tr><tr><td style="text-align:center">++</td><td style="text-align:center">后置递增</td><td style="text-align:center">a=2;b=a++</td><td style="text-align:center">a=3;b=2</td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">前置递减</td><td style="text-align:center">a=2;b=—a</td><td style="text-align:center">a=1;b=1</td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">后置递减</td><td style="text-align:center">a=2;b=a—</td><td style="text-align:center">a=1;b=2</td></tr></tbody></table></div><p>前置递增</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  ++a;</span><br><span class="line">  cout&lt;&lt;&quot;a=&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后置递增</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int b=10;</span><br><span class="line">  b++;</span><br><span class="line">  cout&lt;&lt;&quot;b=&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==区别 ==</p><pre><code>$==前置递增先让变量+1然后再进行表达式的运算==$==后置递增 先进行表达式的运算，再让变量+1==</code></pre>              </div>            </details><details class="folding-tag" green><summary> 赋值运算符 </summary>              <div class='content'>              <p><br/></p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">术语</th><th style="text-align:center">示例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">赋值</td><td style="text-align:center">a=2;b=3</td><td style="text-align:center">a=2;b=3</td></tr><tr><td style="text-align:center">+=</td><td style="text-align:center">加等于</td><td style="text-align:center">a=0;a+=2</td><td style="text-align:center">a=2</td></tr><tr><td style="text-align:center">-=</td><td style="text-align:center">减等于</td><td style="text-align:center">a=5;a-=3</td><td style="text-align:center">a=2</td></tr><tr><td style="text-align:center">*=</td><td style="text-align:center">乘等于</td><td style="text-align:center">a=2;a*=2</td><td style="text-align:center">a=4</td></tr><tr><td style="text-align:center">/=</td><td style="text-align:center">除等于</td><td style="text-align:center">a=4;a/=2</td><td style="text-align:center">a=2</td></tr><tr><td style="text-align:center">%=</td><td style="text-align:center">模等于</td><td style="text-align:center">a=3;a%=2;</td><td style="text-align:center">a=1</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  a+=2;  //a=a+2  =&gt; a=10+2;</span><br><span class="line">  cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  a%=2;   //a=a%2  =&gt;a=10%2;</span><br><span class="line">  cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 比较运算符 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">术语</th><th style="text-align:center">示例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">==</td><td style="text-align:center">相等于</td><td style="text-align:center">4==3</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">！=</td><td style="text-align:center">不等于</td><td style="text-align:center">4！=3</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td><td style="text-align:center">4&lt;3</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td><td style="text-align:center">4&gt;3</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">小等于</td><td style="text-align:center">4&lt;=3</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">大等于</td><td style="text-align:center">4&gt;=3</td><td style="text-align:center">1</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=10;</span><br><span class="line">  cout&lt;&lt;(a&lt;b)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;(a!=10)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;(a&lt;=10)&lt;&lt;endl</span><br><span class="line">  cout&lt;&lt;(a==10)&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" bule><summary> 逻辑运算符 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">术语</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">！</td><td style="text-align:center">非</td><td style="text-align:center">！a</td></tr><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">与</td><td style="text-align:center">a&amp;&amp;b</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center"></td><td style="text-align:center"></td><td>或</td><td>a\</td><td></td><td>b</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=20;</span><br><span class="line">  //在C++中 除了0 都为真</span><br><span class="line">  cout&lt;&lt;!a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;!!a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;(a&amp;&amp;b)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;(a||b)&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="程序流程结构"><a href="#程序流程结构" class="headerlink" title="程序流程结构"></a>程序流程结构</h1><details class="folding-tag" yellow><summary> 程序流程结构 </summary>              <div class='content'>              <details class="folding-tag" red><summary> 选择结构 </summary>              <div class='content'>              <h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><h3 id="单行if语句"><a href="#单行if语句" class="headerlink" title="单行if语句"></a>单行if语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int score;</span><br><span class="line">  cin&gt;&gt;score;</span><br><span class="line">  if(score&gt;60)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;及格&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多行if语句"><a href="#多行if语句" class="headerlink" title="多行if语句"></a>多行if语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int score;</span><br><span class="line">  cin&gt;&gt;score;</span><br><span class="line">  if(score&gt;60)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;及格&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;不及格&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多条件if语句"><a href="#多条件if语句" class="headerlink" title="多条件if语句"></a>多条件if语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int score;</span><br><span class="line">  cin&gt;&gt;score;</span><br><span class="line">  if(score&gt;80)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;优秀&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  else if(score&gt;60)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;一般&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  else (score&lt;60)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;继续加油&quot;&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><p>==语法：表达式1 ？表达式2 ：表达式3==</p><p>如果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表达式1的值为真，执行表达式2的结果</span><br><span class="line"></span><br><span class="line">表达式2的值为假，执行表达式3的结果</span><br></pre></td></tr></table></figure><h2 id="Switch语句"><a href="#Switch语句" class="headerlink" title="Switch语句"></a>Switch语句</h2><p>==作用：执行多条件分支语句==</p><p>缺点：判断的时候只能是整形或者是字符型，不可以是一个区间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">switch(表达式)</span><br><span class="line">&#123;</span><br><span class="line">  case 结果1：执行语句；break;</span><br><span class="line">  case 结果2：执行语句；break;</span><br><span class="line">  case 结果3：执行语句；break;</span><br><span class="line">  case 结果4：执行语句；break;</span><br><span class="line">  …………</span><br><span class="line">  default: 执行语句；break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int score;</span><br><span class="line">  cin&gt;&gt;score;</span><br><span class="line">  switch(score)</span><br><span class="line">  &#123;</span><br><span class="line">    case 8: cout&lt;&lt;&quot;您认为是经典电影&quot;&lt;&lt;endl;</span><br><span class="line">    break;</span><br><span class="line">    case 5: cout&lt;&lt;&quot;您认为是一般电影&quot;&lt;&lt;endl;</span><br><span class="line">    break;</span><br><span class="line">    case 3: cout&lt;&lt;&quot;您认为是尿片电影&quot;&lt;&lt;endl;</span><br><span class="line">    break;</span><br><span class="line">    case 2: cout&lt;&lt;&quot;您认为是辣鸡电影&quot;&lt;&lt;endl;</span><br><span class="line">    break;</span><br><span class="line">    default： cout&lt;&lt;&quot;您认为是烂片&quot;&lt;&lt;endl;</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 循环结构 </summary>              <div class='content'>              <h2 id="while循环语句（先买票再上船）"><a href="#while循环语句（先买票再上船）" class="headerlink" title="while循环语句（先买票再上船）"></a>while循环语句（先买票再上船）</h2><p>==语法： while（循环条件）{ 循环语句 }==</p><p>==解释： 只要循环条件为真，就执行循环语句==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int num=0;</span><br><span class="line">  while(num&lt;10)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dowhile循环语句-先上船再买票"><a href="#dowhile循环语句-先上船再买票" class="headerlink" title="dowhile循环语句(先上船再买票)"></a>dowhile循环语句(先上船再买票)</h2><p>==语法： do{ 循环语句 }  while { 循环语句 }==</p><p>==区别： 与while语句的区别在于do……while会先执行一次循环语句，再判断循环条件==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int num=0;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    num++</span><br><span class="line">  &#125;while(num&lt;10);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h2><p>==for（起始表达式；条件表达式；末尾循环体）{ 循环语句； }==</p><h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2>              </div>            </details><details class="folding-tag" green><summary> 跳转语句 </summary>              <div class='content'>              <h2 id="while循环语句（先买票再上船）"><a href="#while循环语句（先买票再上船）" class="headerlink" title="while循环语句（先买票再上船）"></a>while循环语句（先买票再上船）</h2><p>==语法： while（循环条件）{ 循环语句 }==</p><p>==解释： 只要循环条件为真，就执行循环语句==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int num=0;</span><br><span class="line">  while(num&lt;10)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dowhile循环语句-先上船再买票"><a href="#dowhile循环语句-先上船再买票" class="headerlink" title="dowhile循环语句(先上船再买票)"></a>dowhile循环语句(先上船再买票)</h2><p>==语法： do{ 循环语句 }  while { 循环语句 }==</p><p>==区别： 与while语句的区别在于do……while会先执行一次循环语句，再判断循环条件==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int num=0;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    num++</span><br><span class="line">  &#125;while(num&lt;10);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h2><p>==for（起始表达式；条件表达式；末尾循环体）{ 循环语句； }==</p><h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2>              </div>            </details>              </div>            </details><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><details class="folding-tag" yellow><summary> 数组 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 一维数组 </summary>              <div class='content'>              <h2 id="一维数组的定义方式"><a href="#一维数组的定义方式" class="headerlink" title="一维数组的定义方式"></a>一维数组的定义方式</h2><ol><li>数据类型 数组名【数组长度】</li><li>数据类型 数组名【数组长度】={ 值1，值2，值3，…… }</li><li>数据类型 数组名【】={ 值1，值2，值3，…… }</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int score[5];</span><br><span class="line">  score[0]=1;</span><br><span class="line">  score[1]=2;</span><br><span class="line">  score[2]=3;</span><br><span class="line">  score[3]=4;</span><br><span class="line">  score[4]=5;</span><br><span class="line">  int list[10]=&#123;1,2,3,4,5,6,7,8,9,10&#125;</span><br><span class="line">  int num[]=&#123;A,B,C,D,E,F,G&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一维数组名的用途"><a href="#一维数组名的用途" class="headerlink" title="一维数组名的用途"></a>一维数组名的用途</h3><p>==1：可以统计整个数组在内存中的长度==</p><p>==2：可以获取数组在内存中的首地址==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //1：可以统计整个数组在内存中的长度</span><br><span class="line">  int score[10]=&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">  cout&lt;&lt;&quot;整个数组所占内存空间为&quot;&lt;&lt;sizeof(score)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;每个元素所占空间为&quot;&lt;&lt;sizeof(score[0])&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;数组的元素个数为&quot;&lt;&lt;sizeof(score)/sizeof(score[0])&lt;&lt;endl;</span><br><span class="line">  //2：可以获取数组在内存中的首地址</span><br><span class="line">  cout&lt;&lt;&quot;数组的首地址为: &quot;&lt;&lt;(int)score&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;数组第一个元素地址为&quot;&lt;&lt;(int)&amp;score[0]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 二维数组 </summary>              <div class='content'>              <h2 id="二维数组的定义方式"><a href="#二维数组的定义方式" class="headerlink" title="二维数组的定义方式"></a>二维数组的定义方式</h2><ol><li>数据类型 数组名[ 行数 ] [ 列数 ]；</li><li>数据类型 数组名[ 行数 ] [ 列数 ]={ { 数据1，数据2 }，{ 数据2，数据4 } }；</li><li>数据类型 数组名[ 行数 ] [ 列数 ]={ 数据1，数据2，数据3，数据4…… }；</li><li><p>数据类型 数组名[   ] [ 列数 ]={ 数据1，数据2，数据3，数据4…… }；</p><p>==不可以写成 数据类型 数组名 [ 行数 ] [  ] 等于 { 数据1，数据2，数据3，数据4…… }；==</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int arr[][3]=&#123;1,2,3,4,5,6,7,8&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组数组名"><a href="#二维数组数组名" class="headerlink" title="二维数组数组名"></a>二维数组数组名</h3><p>1：查看二维数组所占内存空间</p><p>2：获取二维数组首地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int score[2][3]=&#123;1,2,3,4,5,6&#125;;</span><br><span class="line">  cout&lt;&lt;&quot;查看二维数组所占内存空间：&quot;&lt;&lt;sizeof(score)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;获取二维数组一行大小：&quot;&lt;&lt;sizeof(score[0])&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;获取二维数组元素大小：&quot;&lt;&lt;sizeof(score[0][0])&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;获取二维数组首地址 &quot;&lt;&lt;(int)&amp;score&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;获取二维数组第一个元素地址&quot;&lt;&lt;(int)&amp;score[0][0]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 冒泡排序 </summary>              <div class='content'>              <p>1：比较相邻的元素。如果第一个比第二个大，就交换两个数</p><p>2：对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值 </p><p>3：重复以上步骤，每次比较次数-1，直到不需要比较</p><p><br/></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int arr[9]=&#123;4,2,8,0,5,7,1,3,9&#125;;</span><br><span class="line">  for(int i=0;i&lt;9-1;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    for(int j=0;j&lt;9-1;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      if(arr[j]&gt;arr[j+1])</span><br><span class="line">      &#123;</span><br><span class="line">        int temp=arr[j];</span><br><span class="line">        arr[j]=arr[j+1];</span><br><span class="line">        arr[j+1]=temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><details class="folding-tag" yellow><summary> 程序流程结构 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 函数的定义 </summary>              <div class='content'>              <h2 id="函数的定义一般主要有5个步骤："><a href="#函数的定义一般主要有5个步骤：" class="headerlink" title="函数的定义一般主要有5个步骤："></a>函数的定义一般主要有5个步骤：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">==1：返回值类型：一个函数可以返回一个值。在函数定义中==</span><br><span class="line"></span><br><span class="line">==2：函数名：给函数起个名称==</span><br><span class="line"></span><br><span class="line">==3：参数列表：使用函数时，传入的数据==</span><br><span class="line"></span><br><span class="line">==4：函数体语句：花括号内的代码，函数内需要执行的语句==</span><br><span class="line"></span><br><span class="line">==5：return表达式：和返回值类型挂钩，函数执行完后，返回相应的数据==</span><br></pre></td></tr></table></figure><p><br/></p><hr><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名（参数列表）</span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  函数体语句</span><br><span class="line">  </span><br><span class="line">  return 表达式</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br/></p><p>例子：</p><blockquote><p>实现一个加法函数，功能为：传入两个整形数据，计算数据相加的结果，并且返回</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int add(int num1,int num2)</span><br><span class="line">&#123;</span><br><span class="line">  int sum=num1+num2;</span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 函数的调用 </summary>              <div class='content'>              <p>==功能：使用定义好的函数==</p><p>==语法：函数名（参数）==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int add(int num1,int num2)</span><br><span class="line">&#123;</span><br><span class="line">  int sun=num1+num2;</span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=10;</span><br><span class="line">  //调用add函数</span><br><span class="line">  int sum=add(a,b)</span><br><span class="line">  cout&lt;&lt;&quot;sum= &quot;&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 值传递 </summary>              <div class='content'>              <p>==所谓值传递，就是 函数调用时实参将数值传入给形参==</p><p>==值传递，如果形参发生，并不会影响实参==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void swap(int num1,int num2)</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;&quot;交换前:&quot;&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;num1=&quot;&lt;&lt;num1&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;num2=&quot;&lt;&lt;num2&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">  int temp=num1;</span><br><span class="line">  num1=num2;</span><br><span class="line">  num2=temp;</span><br><span class="line">  </span><br><span class="line">  cout&lt;&lt;&quot;交换后:&quot;&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;num1=&quot;&lt;&lt;num1&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;num2=&quot;&lt;&lt;num2&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">  //return ；当函数声明的时候，不需要返回值，可以不写return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=20;</span><br><span class="line">  swap(a,b);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" ><summary> 函数的常见样式 </summary>              <div class='content'>              <p>==常见的函数样式有4种==</p><pre><code>==1：无参无返====2：有参无返====3：无参有饭====4：有参有返==</code></pre><hr><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">//1：无参无饭</span><br><span class="line">void test1()</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;&quot;代码太难了&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//2：有参无返</span><br><span class="line">void test2(int a)</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;&quot;this is test2 a= &quot;&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//3：无参有返</span><br><span class="line">int test3()</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;&quot;this is test3 &quot;&lt;&lt;endl;</span><br><span class="line">  teturn 100;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//4：有参有返</span><br><span class="line">int test4(int b,int c)</span><br><span class="line">&#123;</span><br><span class="line">  sum=s1+s2;</span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //无参无饭函数调用</span><br><span class="line">  test1();</span><br><span class="line">  </span><br><span class="line">  //有参无返函数调用</span><br><span class="line">  test2(100);</span><br><span class="line">  </span><br><span class="line">  //无参有返函数调用</span><br><span class="line">  int c=test3();</span><br><span class="line">  cout&lt;&lt;&quot;c= &quot;&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">  //有参有返函数调用</span><br><span class="line">  int s1=100;</span><br><span class="line">  int s2=200;</span><br><span class="line">  int sum=test4(s1,s2);</span><br><span class="line">  cout&lt;&lt;&quot;sum=&quot;&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 函数的声明 </summary>              <div class='content'>              <p>==作用：告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义==</p><p>==函数声明可以多次，但是函数的定义只能有一次==</p><hr><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//函数声明</span><br><span class="line">//比较函数，实现两个整形数字进行比较，返回较大的值</span><br><span class="line">int max(int a,int b)   //提前声明</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=20;</span><br><span class="line">  int c=max(a,b);</span><br><span class="line">  cout&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int max(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">  return a&gt;b?a:b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 函数的分文件编写 </summary>              <div class='content'>              <p>==作用：让代码结构更加清晰==</p><p><br/></p><p>==函数分文件编写一般有4个步骤==</p><pre><code>1：创建后缀名为.h的头文件2：创建后缀名为.cpp的源文件3：在头文件中写函数声明4：在源文件中写函数的定义</code></pre>              </div>            </details>              </div>            </details><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><details class="folding-tag" yellow><summary> 指针 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 指针变量的定义和使用 </summary>              <div class='content'>              <h2 id="指针的基本概念"><a href="#指针的基本概念" class="headerlink" title="指针的基本概念"></a>指针的基本概念</h2><p>==指针的作用：可以通过指针间接访问内存==</p><ul><li>内存编号是从0开始记录的，一般用十六进制的数字表示</li><li>可以利用指针变量保存地址</li></ul><h2 id="指针变量的定义和使用"><a href="#指针变量的定义和使用" class="headerlink" title="指针变量的定义和使用"></a>指针变量的定义和使用</h2><p>==指针定义的语法：数据类型 * 指针变量名；==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //1：定义指针</span><br><span class="line">  int a=10;</span><br><span class="line">  int *p；   //定义指针</span><br><span class="line">  p=&amp;a;      //让指针记录a的地址</span><br><span class="line">  cout&lt;&lt;&quot;a的地址为：&quot;&lt;&lt;&amp;a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;指针p为：&quot;&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">  //2：使用指针</span><br><span class="line">  //可以通过解引用（指针前面加一个*   被称为解引用的操作）的方式来找到指针指向的内存</span><br><span class="line">  *p=1000;</span><br><span class="line">  cout&lt;&lt;&quot;a= &quot;&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;*p= &quot;&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 指针所占的内存空间 </summary>              <div class='content'>              <p>指针也是种数据类型:：占用4个字节（32位）8个字节（64位）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a;</span><br><span class="line">  int *p=&amp;a;</span><br><span class="line">  //不管什么数据类型都占4个字节</span><br><span class="line">  cout&lt;&lt;&quot;sizeof(int*)= &quot;&lt;&lt;sizeof(p)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;sizeof(int*)= &quot;&lt;&lt;sizeof(int *)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;sizeof(double*)= &quot;&lt;&lt;sizeof(double *)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;sizeof(float*)= &quot;&lt;&lt;sizeof(float *)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;sizeof(char*)= &quot;&lt;&lt;sizeof(char *)&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 空指针和野指针 </summary>              <div class='content'>              <h2 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h2><p>==空指针：指针变量指向内存中编号为0的空间==</p><p>==用途：初始化指针变量==</p><p>==注意：空指针指向的内存是不可以访问的==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //指针变量p指向内存编号为0的内存</span><br><span class="line">  int *p=NULL;</span><br><span class="line">  //空指针指向的内存是不可以访问的</span><br><span class="line">  *p =100;    //显示不能访问</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h2><p>==野指针：指针变量指向非法的内存空间==</p><p>在操作中尽量避免野指针</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int *p=(int *)0x1100;   //野指针</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" bule><summary> const修饰指针 </summary>              <div class='content'>              <p>==const修饰指针的三种情况==</p><ul><li><p>const修饰指针   ——— 常量指针</p><p>特点：指针的指向可以修改，但是指针指向的值不可以修改</p></li><li><p>const修饰常量   ———指针常量</p><p>特点：  指针的指向不可以修改，但是指针指向的值可以修改</p></li><li>const即修饰指针，有修饰常量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"> int a=10;</span><br><span class="line"> int b=10;</span><br><span class="line"> int *p=&amp;a;</span><br><span class="line"> const int *p=&amp;a;             //常量指针</span><br><span class="line"> int * const p=&amp;a;           //指针常量</span><br><span class="line"> const int *const p=&amp;a;     //const即修饰指针，有修饰常量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 指针和数组 </summary>              <div class='content'>              <p>==作用：利用指针访问数组中的元素==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int arr[10]=&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">  int *p=arr;   //arr就是数组首地址</span><br><span class="line">  //p++;</span><br><span class="line">  //cout&lt;&lt;&quot;利用指针访问第二个元素：&quot;&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">  for(int i=0;i&lt;10;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">    p++;</span><br><span class="line">  &#125;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 指针和函数 </summary>              <div class='content'>              <p>==作用：利用指正作为函数参数，可以修改实参的值==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">void swap1(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">  int temp=a;</span><br><span class="line">  a=b;</span><br><span class="line">  b=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void swap2(int *p1,int *p2)</span><br><span class="line">&#123;</span><br><span class="line">  int temp=*p1;</span><br><span class="line">  *p1=*p2;</span><br><span class="line">  *p2=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //指针和函数</span><br><span class="line">  //1:值传递</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=20;</span><br><span class="line">  swap1(a,b);</span><br><span class="line">  //2:地址传递    ///地址传输可以修改实参</span><br><span class="line">  swap2(&amp;a,&amp;b);</span><br><span class="line">  cout&lt;&lt;&quot;a= &quot;&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;&quot;b= &quot;&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 指针、数组、函数 </summary>              <div class='content'>              <p>案例：封装一个函数，利用冒泡排序，实现对整形数组的升序排序</p><p>数组：int arr[10]={4,3,6,9,1,2,10,8,7,5};</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void bubbleSort(int *arr,int length)</span><br><span class="line">&#123;</span><br><span class="line">  for(int i=0;i&lt;length-1;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    for(int j=0;j&lt;length-i-1;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      if(arr[j]&gt;arr[j+1])</span><br><span class="line">      &#123;</span><br><span class="line">        int temp=arr[j];</span><br><span class="line">        arr[j]=arr[j+1];</span><br><span class="line">        arr[j+1]=temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void printArray(int *arr,int length)</span><br><span class="line">&#123;</span><br><span class="line">  for(int i=0;i&lt;length;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;arr[i]&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int arr[10]=&#123;4,3,6,9,1,2,10,8,7,5&#125;;</span><br><span class="line">  int length=sizeof(arr)/sizeof(arr[0]);</span><br><span class="line">  bubbleSort(arr,length);</span><br><span class="line">  printArray(arr,length);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><details class="folding-tag" yellow><summary> 结构体 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 结构体定义和使用 </summary>              <div class='content'>              <h2 id="结构体的基本概念"><a href="#结构体的基本概念" class="headerlink" title="结构体的基本概念"></a>结构体的基本概念</h2><p>结构体属于用户自定义的数据类型，允许用户储存不同的数据类型</p><p><br/></p><h2 id="结构体定义和使用"><a href="#结构体定义和使用" class="headerlink" title="结构体定义和使用"></a>结构体定义和使用</h2><p>==语法：struct 结构体名{ 结构体成员列表 } ；==</p><p>通过结构体创建变量的方式有三种：</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 ={ 成员1值，成员2值…… }</li><li>定义结构体时顺便创建变量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct studnet&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  bool sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct studnet&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  bool sex;</span><br><span class="line">&#125;s3;</span><br><span class="line">//同过学生类型来创建具体学生</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //1. struct student s1</span><br><span class="line">  struct student s1;    //给s1属性赋值通过.访问结构体变量中的属性(创建变量时struct可以省略)</span><br><span class="line">  s1.name=&quot;张三&quot;；</span><br><span class="line">  s1.age=18;</span><br><span class="line">  s1.sex=1;</span><br><span class="line">  </span><br><span class="line">  cout&lt;&lt;&quot;姓名: &quot;&lt;&lt;s1.name&lt;&lt;&quot;年龄：&quot;&lt;&lt;s1.age&lt;&lt;&quot;性别 &quot;&lt;&lt;s1.sex&lt;&lt;endl;</span><br><span class="line">  //2. struct student s2=&#123; .... &#125;;</span><br><span class="line">  </span><br><span class="line">  struct student s2=&#123;&quot;李四&quot;,19,0&#125;;</span><br><span class="line">  cout&lt;&lt;&quot;姓名: &quot;&lt;&lt;s2.name&lt;&lt;&quot;年龄：&quot;&lt;&lt;s2.age&lt;&lt;&quot;性别 &quot;&lt;&lt;s2.sex&lt;&lt;endl;</span><br><span class="line">  //在定义结构体时顺便创建变量</span><br><span class="line">  s3.name=&quot;王五&quot;;</span><br><span class="line">  s3.age=200;</span><br><span class="line">  s3.sex=1</span><br><span class="line">  cout&lt;&lt;&quot;姓名: &quot;&lt;&lt;s3.name&lt;&lt;&quot;年龄：&quot;&lt;&lt;s3.age&lt;&lt;&quot;性别 &quot;&lt;&lt;s3.sex&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" ><summary> 结构体数组 </summary>              <div class='content'>              <p>==作用：将自定义的结构体放入到数组中方便维护==</p><p><strong>语法：struct 结构体名 数组名[ 元素个数 ]={ { }，{ }，{ }，…… }</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  int sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //创建结构体数组</span><br><span class="line">  struct student arr[3]</span><br><span class="line">  &#123;</span><br><span class="line">    &#123;&quot;张三&quot;,18,0&#125;,</span><br><span class="line">    &#123;&quot;李四&quot;,20,1&#125;,</span><br><span class="line">    &#123;&quot;王五&quot;,19,0&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  //给结构体数组中的元素赋值</span><br><span class="line">  arr[2].name=&quot;赵六&quot;;</span><br><span class="line">  arr[2].age=28;</span><br><span class="line">  //遍历结构体数组</span><br><span class="line">  for(int i=0;i&lt;3;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;arr[i].name&lt;&lt;arr[i].age&lt;&lt;arr[i].sex&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 结构体指针 </summary>              <div class='content'>              <p>==作用：通过指针访问结构体中的成员==</p><p>利用操作符-&gt;可以通过结构体指针访问结构体属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//定义学生的结构体</span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  int sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  //创建学生结构体变量</span><br><span class="line">  struct student s1=&#123;&quot;张三&quot;,18,0&#125;;</span><br><span class="line">  //通过指针指向结构体变量</span><br><span class="line">  struct student *p=&amp;s1;</span><br><span class="line">  //通过指针访问结构体变量的数据</span><br><span class="line">  cout&lt;&lt;&quot;姓名：&quot;&lt;&lt;p-&gt;name&lt;&lt;&quot;年龄：&quot;&lt;&lt;p-&gt;age&lt;&lt;&quot;性别：&quot;&lt;&lt;p-&gt;sex&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 结构体嵌套结构体 </summary>              <div class='content'>              <p>==作用：结构体中的成员可以是另一个结构体==</p><p>==例如：每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  int sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct teacher</span><br><span class="line">&#123;</span><br><span class="line">  int id;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  struct student stu;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  teacher t;</span><br><span class="line">  t.id=100;</span><br><span class="line">  t.name=&quot;老王&quot;；</span><br><span class="line">  t.age=30;</span><br><span class="line">  t.stu.name=&quot;小王&quot;；</span><br><span class="line">  t.stu.age=20;</span><br><span class="line">  t.stu.sex=0;</span><br><span class="line">  //打印</span><br><span class="line">  cout&lt;&lt;&quot;老师姓名：&quot;&lt;&lt;t.name&lt;&lt;&quot;老师编号：&quot;&lt;&lt;t.id&lt;&lt;&quot;老师年龄：&quot;&lt;&lt;t.age&lt;&lt;&quot;学生姓名&quot;&lt;&lt;t.stu.name&lt;&lt;&quot;学生年龄&quot;&lt;&lt;t.stu.age&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 结构体做函数参数 </summary>              <div class='content'>              <p>==作用：将结构体作为参数向函数中传递==</p><p>==传递方式有两种：==</p><ul><li>==值传递==</li><li>==地址传递==</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//定义学生结构体</span><br><span class="line">struct student&#123;</span><br><span class="line">    string name;</span><br><span class="line">    int age;</span><br><span class="line">    int sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//打印学生信息</span><br><span class="line">//1:值传递</span><br><span class="line">void printstudent1(struct student s)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;子函数中 姓名：&quot;&lt;&lt;s.name&lt;&lt;&quot;年龄：&quot;&lt;&lt;s.age&lt;&lt;&quot;性别：&quot;&lt;&lt;s.sex&lt;&lt;endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//2：地址传递</span><br><span class="line">void printstudent2(struct student *p)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;子函数2中 姓名：&quot;&lt;&lt;p-&gt;name&lt;&lt;&quot;年龄：&quot;&lt;&lt;p-&gt;age&lt;&lt;&quot;性别：&quot;&lt;&lt;p-&gt;sex&lt;&lt;endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //创建结构体变量</span><br><span class="line">    struct student s;</span><br><span class="line">    s.name=&quot;张三&quot;;</span><br><span class="line">    s.age=18;</span><br><span class="line">    s.sex=0;</span><br><span class="line">    printstudent1(s);</span><br><span class="line">    printstudent2(&amp;s);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 结构体中const使用场景 </summary>              <div class='content'>              <p>==作用：用const来防止误操作==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  int sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void printstudent(const struct student *s)</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;s-&gt;name&lt;&lt;s-&gt;age&lt;&lt;s-&gt;sex&lt;&lt;endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  struct student s=&#123;&quot;张三&quot;,18,0&#125;;</span><br><span class="line">  printstudent(&amp;s);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 结构体案例1 </summary>              <div class='content'>              <p><strong>案例描述：</strong><br>学校正在做毕设项目，每名老师带领5个学生，总共有8名老师，需求如下：<br>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员<br>学生的成员有姓名，考试分数，创建数组存放3名老师 ，通过函数给每个老师及所带学生赋值<br>最终打印出老师数据以及老师所带学生数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct student&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct  teacher&#123;</span><br><span class="line">  string name;</span><br><span class="line">  struct student stu[5];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void allocatespace(struct teacher arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">  string nameseed=&quot;ABCDE&quot;;</span><br><span class="line">  int scorel[5]=&#123;1,2,3,4,5&#125;;</span><br><span class="line">  for(int i=0;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    arr[i].name=&quot;Teacher_a&quot;;</span><br><span class="line">    arr[i].name+=nameseed[i];</span><br><span class="line">    for(int j=0;j&lt;5;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      arr[i].stu[j].name=&quot;Student_&quot;;</span><br><span class="line">      arr[i].stu[j].name+=nameseed[j];</span><br><span class="line">      arr[i].stu[j].score=scorel[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void printInfo(struct teacher arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">  for(int i=0;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;老师姓名：&quot;&lt;&lt;arr[i].name&lt;&lt;endl;</span><br><span class="line">    for(int j=0;j&lt;5;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      cout&lt;&lt;&quot;\t老师学生姓名：&quot;&lt;&lt;arr[i].stu[j].name&lt;&lt;endl&lt;&lt;&quot;\t成绩：&quot;&lt;&lt;arr[i].stu[j].score&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  struct teacher arr[3];</span><br><span class="line">  int len=sizeof(arr)/sizeof(arr[0]);</span><br><span class="line">  allocatespace(arr,len);</span><br><span class="line">  printInfo(arr,len);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 结构体案例2 </summary>              <div class='content'>              <p><strong>案例描述：</strong></p><p>设计一个英雄的结构体，包括成员姓名，年龄，性别；创建结构体数据数组，数组中存放5名英雄。</p><p>通过冒泡排序算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p><hr><p>==五名英雄信息：==</p><p>{“刘备”,23,“男”}，</p><p>{“关羽”,22,“男”}，</p><p>{“张飞”,20,“男”}，</p><p>{“赵云”,21,“男”}，</p><p>{“貂蝉”,19,“女”}，</p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct hero</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  string sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void heroInfo(struct hero arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">  string xingming[5]=&#123;&quot;刘备&quot;,&quot;关羽&quot;,&quot;张飞&quot;,&quot;赵云&quot;,&quot;貂蝉&quot;&#125;;</span><br><span class="line">  int nianlin[5]=&#123;23,22,20,21,19&#125;;</span><br><span class="line">  string xingbie[5]=&#123;&quot;男&quot;,&quot;男&quot;,&quot;男&quot;,&quot;男&quot;,&quot;女&quot;&#125;;</span><br><span class="line">  for(int i=0;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    arr[i].name=xingming[i];</span><br><span class="line">    arr[i].age=nianlin[i];</span><br><span class="line">    arr[i].sex=xingbie[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void herosort(struct hero arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">  for(int i=0;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    for(int j=0;j&lt;len-i-1;j++)</span><br><span class="line">    &#123;</span><br><span class="line">      if(arr[j].age&lt;arr[j+1].age)</span><br><span class="line">      &#123;</span><br><span class="line">        struct hero temp=arr[j];</span><br><span class="line">        arr[j]=arr[j+1];</span><br><span class="line">        arr[j+1]=temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void printhero(struct hero arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">  for(int i=0;i&lt;len;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;&quot;英雄姓名：&quot;&lt;&lt;arr[i].name&lt;&lt;&quot;英雄年龄:&quot;&lt;&lt;arr[i].age&lt;&lt;&quot;英雄性别:&quot;&lt;&lt;arr[i].sex&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  struct hero arr[5];</span><br><span class="line">  int len=sizeof(arr)/sizeof(arr[0]);</span><br><span class="line">  heroInfo(arr,len);</span><br><span class="line">  herosort(arr,len);</span><br><span class="line">  printhero(arr,len);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/VolantisTags.css"/>
      <url>/css/VolantisTags.css</url>
      
        <content type="html"><![CDATA[* {    box-sizing: border-box;    outline: none;    margin: 0;    padding: 0;  }  details {    display: block;    padding: 20px;    margin: 0.5rem 0;    border-radius: 4px;    background: #fff;    font-size: 0.9375rem;    transition: all 0.28s ease;    -moz-transition: all 0.28s ease;    -webkit-transition: all 0.28s ease;    -o-transition: all 0.28s ease;    border: 1px solid #f6f6f6;  }  summary {    display: block;  }  details summary {    cursor: pointer;    padding: 16px;    margin: -20px;    border-radius: 4px;    color: rgba(85, 85, 85, 0.7);    font-size: 0.875rem;    font-weight: bold;    position: relative;    line-height: normal;  }  details summary > p,  details summary > h1,  details summary > h2,  details summary > h3,  details summary > h4,  details summary > h5,  details summary > h6 {    display: inline;    border-bottom: none !important;  }  details summary:hover {    color: #555;  }  details summary:hover:after {    position: absolute;    content: "+";    text-align: center;    top: 50%;    transform: translateY(-50%);    right: 16px;  }  details > summary {    background: #f6f6f6;  }  details[blue] {    border-color: #e8f4fd;  }  details[blue] > summary {    background: #e8f4fd;  }  details[cyan] {    border-color: #e8fafe;  }  details[cyan] > summary {    background: #e8fafe;  }  details[green] {    border-color: #ebf9ed;  }  details[green] > summary {    background: #ebf9ed;  }  details[yellow] {    border-color: #fff8e9;  }  details[yellow] > summary {    background: #fff8e9;  }  details[red] {    border-color: #feefee;  }  details[red] > summary {    background: #feefee;  }  details[open] {    border-color: rgba(85, 85, 85, 0.2);  }  details[open] > summary {    border-bottom: 1px solid rgba(85, 85, 85, 0.2);    border-bottom-left-radius: 0;    border-bottom-right-radius: 0;  }  details[open][blue] {    border-color: rgba(33, 150, 243, 0.3);  }  details[open][blue] > summary {    border-bottom-color: rgba(33, 150, 243, 0.3);  }  details[open][cyan] {    border-color: rgba(27, 205, 252, 0.3);  }  details[open][cyan] > summary {    border-bottom-color: rgba(27, 205, 252, 0.3);  }  details[open][green] {    border-color: rgba(61, 197, 80, 0.3);  }  details[open][green] > summary {    border-bottom-color: rgba(61, 197, 80, 0.3);  }  details[open][yellow] {    border-color: rgba(255, 189, 43, 0.3);  }  details[open][yellow] > summary {    border-bottom-color: rgba(255, 189, 43, 0.3);  }  details[open][red] {    border-color: rgba(254, 95, 88, 0.3);  }  details[open][red] > summary {    border-bottom-color: rgba(254, 95, 88, 0.3);  }  details[open] > summary {    color: #555;    margin-bottom: 0;  }  details[open] > summary:hover:after {    content: "-";  }    details[open] > div.content {    padding: 16px;    margin: -16px;    margin-top: 0;  }            /*note标签*/      div.note {    position: relative;    margin-top: 0.5rem;    margin-bottom: 0.5rem;    padding: 0.6rem 16px 0.5rem 16px;    padding-left: calc(16px + 16px);    border-radius: 4px;    background: #f6f6f6;    border-left: 4px solid #767676;  }  div.note h2,  div.note h3,  div.note h4,  div.note h5,  div.note h6 {    margin-top: 3px;    margin-bottom: 0;    padding-top: 0 !important;    border-bottom: initial;  }  div.note p,  div.note ul,  div.note ol,  div.note blockquote,  div.note img {    font-size: 14px;    margin-top: 0.5rem;    margin-bottom: 0.5rem;  }  div.note::before {    position: absolute;    top: calc(50% - 24px * 0.5);    left: 4px;    width: 24px;    height: 24px;    text-align: center;    font-weight: 600;    line-height: 24px;    vertical-align: middle;    font-family: 'Font Awesome 5 Free';  }  div.note::before {    color: #767676;    content: '\f054';  }  div.note::before {    content: '\f054';  }  div.note.quote {    background: #e8f4fd;    border-color: #2196f3;  }  div.note.quote::before {    color: #2196f3;    content: '\f10d';  }  div.note.info {    background: #e8f4fd;    border-color: #2196f3;  }  div.note.info::before {    color: #2196f3;    content: '\f129';  }  div.note.success,  div.note.done {    background: #ebf9ed;    border-color: #3dc550;  }  div.note.success::before,  div.note.done::before {    color: #3dc550;    content: '\f00c';  }  div.note.warning {    background: #fff8e9;    border-color: #ffbd2b;  }  div.note.warning::before {    color: #ffbd2b;    content: '\f12a';  }  div.note.danger,  div.note.error {    background: #feefee;    border-color: #fe5f58;  }  div.note.danger::before,  div.note.error::before {    color: #fe5f58;    content: '\f00d';  }  div.note.radiation::before {    content: '\f7b9';  }  div.note.bug::before {    content: '\f188';  }  div.note.idea::before {    content: '\f0eb';  }  div.note.link::before {    content: '\f0c1';  }  div.note.paperclip::before {    content: '\f0c6';  }  div.note.todo::before {    content: '\f0ae';  }  div.note.message::before {    content: '\f4ad';  }  div.note.guide::before {    content: '\f277';  }  div.note.download::before {    content: '\f019';  }  div.note.up::before {    content: '\f102';  }  div.note.undo::before {    content: '\f2ea';  }  div.note.play::before {    content: '\f144';  }  div.note.clear {    background: none;    border-color: none;  }  div.note.light {    background: #f6f6f6;    border-color: #aaa;  }  div.note.light::before {    color: #aaa;  }  div.note.gray {    background: #f6f6f6;    border-color: #767676;  }  div.note.gray::before {    color: #767676;  }  div.note.red {    background: #feefee;    border-color: #fe5f58;  }  div.note.red::before {    color: #fe5f58;  }  div.note.yellow {    background: #fff8e9;    border-color: #ffbd2b;  }  div.note.yellow::before {    color: #ffbd2b;  }  div.note.green {    background: #ebf9ed;    border-color: #3dc550;  }  div.note.green::before {    color: #3dc550;  }  div.note.cyan {    background: #e8fafe;    border-color: #1bcdfc;  }  div.note.cyan::before {    color: #1bcdfc;  }  div.note.blue {    background: #e8f4fd;    border-color: #2196f3;  }  div.note.blue::before {    color: #2196f3;  }      /*note标签结束*/    /*文字标签*/  p.p.subtitle {    font-weight: bold;    color: #2196f3;    padding-top: 1rem;  }  p.p.subtitle:first-child {    padding-top: 0.5rem;  }  span.p.logo,  p.p.logo {    font-family: "Varela Round", "PingFang SC", "Microsoft YaHei", Helvetica, Arial, Helvetica, monospace;  }  span.p.code,  p.p.code {    font-family: Menlo, UbuntuMono, Monaco, monospace, courier, sans-serif;  }  span.p.left,  p.p.left {    display: block;    text-align: left;  }  span.p.center,  p.p.center {    display: block;    text-align: center;  }  span.p.right,  p.p.right {    display: block;    text-align: right;  }  span.p.small,  p.p.small {    font-size: 0.875rem;  }  span.p.large,  p.p.large {    font-size: 3rem;    line-height: 1.4;  }  span.p.huge,  p.p.huge {    font-size: 4rem;    line-height: 1.4;  }  span.p.ultra,  p.p.ultra {    font-size: 6rem;    line-height: 1.4;  }  span.p.small,  p.p.small,  span.p.large,  p.p.large,  span.p.huge,  p.p.huge,  span.p.ultra,  p.p.ultra {    margin: 0;    padding: 0;  }  span.p.bold,  p.p.bold {    font-weight: bold;  }  span.p.h1,  p.p.h1 {    font-size: 1.625rem;    color: #555;    padding-top: 1rem;  }  span.p.h2,  p.p.h2 {    font-size: 1.375rem;    color: #555;    padding-top: 1rem;    border-bottom: 1px solid rgba(85,85,85,0.1);  }  span.p.h3,  p.p.h3 {    font-size: 1.25rem;    color: #2196f3;    padding-top: 1rem;  }  span.p.h4,  p.p.h4 {    font-size: 1.125rem;    color: #555;    padding-top: 1rem;  }  span.p.red,  p.p.red {    color: #fe5f58;  }  span.p.yellow,  p.p.yellow {    color: #ffbd2b;  }  span.p.green,  p.p.green {    color: #3dc550;  }  span.p.cyan,  p.p.cyan {    color: #1bcdfc;  }  span.p.blue,  p.p.blue {    color: #2196f3;  }  span.p.gray,  p.p.gray {    color: #666;  }  /*文字标签结束*/          div.tabs {    display: block;    position: relative;    margin-top: 0.5rem;    margin-bottom: 0.5rem;    border-radius: 4px;    background: #fff;    border: 1px solid rgba(85, 85, 85, 0.2);    font-size: 0.7375rem;  }    .tab::before {    content: none !important;  }    div.tabs ul li {    padding: 0 !important;    margin: 0 !important;  }    div.tabs ul li a {    border-radius: 0;  }    [data-theme="dark"] div.tabs {    border-radius: 2px;    border-color: rgba(0, 0, 0, 0.8);  }    [data-theme="dark"] div.tabs ul.nav-tabs {    background: rgba(0, 0, 0, 0.8);    color: white;    filter: brightness(0.7);  }  [data-theme="dark"] div.tabs .tab-content .tab-pane {    background: rgba(0, 0, 0, 0.8);    color: rgba(255, 255, 255, 0.7);  }  div.tabs .highlight,  div.tabs details,  div.tabs div.note,  div.tabs ol,  div.tabs p,  div.tabs ul {    margin-top: 0.5rem;    margin-bottom: 0.5rem;  }    div.tabs ul.nav-tabs {    display: -ms-flexbox;    display: flex;    overflow-x: auto;    white-space: nowrap;    -ms-flex-pack: start;    justify-content: flex-start;    margin: 0 !important;    padding: 0 !important;    background: #f6f6f6;    border-radius: 4px 4px 0 0;    line-height: 1.4em;  }    div.tabs ul.nav-tabs li.tab {    list-style-type: none;    margin-top: 0;    margin-bottom: 0;  }    div.tabs ul.nav-tabs li.tab:last-child {    padding-right: 16px;  }    div.tabs ul.nav-tabs li.tab a {    display: block;    cursor: pointer;    border-radius: 4px 4px 0 0;    padding: 8px;    text-align: center;    line-height: inherit;    font-weight: 700;    color: rgba(68, 68, 68, 0.65);    border: 1px solid transparent;  }    div.tabs ul.nav-tabs li.tab a:hover {    color: #555;  }    div.tabs ul.nav-tabs li.tab.active a {    cursor: default;    color: #555;    background: #fff;    border: 1px solid rgba(85, 85, 85, 0.2);    border-bottom: 1px solid #fff;  }    div.tabs .tab-content {    border-top: 1px solid rgba(85, 85, 85, 0.2);    margin-top: -1px;  }    div.tabs .tab-content .tab-pane {    padding: 16px;  }    div.tabs .tab-content .tab-pane:not(.active) {    display: none;    opacity: 0;  }    div.tabs .tab-content .tab-pane.active {    display: block;    opacity: 1;  }    div.tabs .tab-content .tab-pane > .fancybox:first-child,  div.tabs .tab-content .tab-pane > .highlight:first-child,  div.tabs .tab-content .tab-pane > .note:first-child,  div.tabs .tab-content .tab-pane > .tabs:first-child,  div.tabs .tab-content .tab-pane > ol:first-child,  div.tabs .tab-content .tab-pane > p:first-child,  div.tabs .tab-content .tab-pane > ul:first-child {    margin-top: 0;  }    div.tabs .tab-content .tab-pane > .fancybox:last-child,  div.tabs .tab-content .tab-pane > .highlight:last-child,  div.tabs .tab-content .tab-pane > .note:last-child,  div.tabs .tab-content .tab-pane > .tabs:last-child,  div.tabs .tab-content .tab-pane > ol:last-child,  div.tabs .tab-content .tab-pane > p:last-child,  div.tabs .tab-content .tab-pane > ul:last-child {    margin-bottom: 0;  }    div.btns {    margin: 0 -8px;    display: -ms-flexbox;    display: flex;    -ms-flex-wrap: wrap;    flex-wrap: wrap;    -ms-flex-align: start;    align-items: flex-start;    overflow: visible;  }    [data-theme="dark"] div.btns {    filter: brightness(0.7);  }    [data-theme="dark"] div.btns a {    background: 0 0;  }    div.btns,  div.btns a,  div.btns p {    font-size: 0.8125rem;    color: #555;  }    div.btns b {    font-size: 0.875rem;  }    .btns img {    margin: 0 !important;  }    div.btns.wide > a {    padding-left: 32px;    padding-right: 32px;  }    div.btns.fill > a {    -ms-flex-positive: 1;    flex-grow: 1;    width: auto;  }    div.btns.around {    -ms-flex-pack: distribute;    justify-content: space-around;  }    div.btns.center {    -ms-flex-pack: center;    justify-content: center;  }    div.btns.grid2 > a {    width: calc(100% / 2 - 16px);  }    @media screen and (max-width: 1024px) {    div.btns.grid2 > a {      width: calc(100% / 2 - 16px);    }  }    @media screen and (max-width: 768px) {    div.btns.grid2 > a {      width: calc(100% / 2 - 16px);    }  }    @media screen and (max-width: 500px) {    div.btns.grid2 > a {      width: calc(100% / 1 - 16px);    }  }    div.btns.grid3 > a {    width: calc(100% / 3 - 16px);  }    @media screen and (max-width: 1024px) {    div.btns.grid3 > a {      width: calc(100% / 3 - 16px);    }  }    @media screen and (max-width: 768px) {    div.btns.grid3 > a {      width: calc(100% / 3 - 16px);    }  }    @media screen and (max-width: 500px) {    div.btns.grid3 > a {      width: calc(100% / 1 - 16px);    }  }    div.btns.grid4 > a {    width: calc(100% / 4 - 16px);  }    @media screen and (max-width: 1024px) {    div.btns.grid4 > a {      width: calc(100% / 3 - 16px);    }  }    @media screen and (max-width: 768px) {    div.btns.grid4 > a {      width: calc(100% / 3 - 16px);    }  }    @media screen and (max-width: 500px) {    div.btns.grid4 > a {      width: calc(100% / 2 - 16px);    }  }    div.btns.grid5 > a {    width: calc(100% / 5 - 16px);  }    @media screen and (max-width: 1024px) {    div.btns.grid5 > a {      width: calc(100% / 4 - 16px);    }  }    @media screen and (max-width: 768px) {    div.btns.grid5 > a {      width: calc(100% / 3 - 16px);    }  }    @media screen and (max-width: 500px) {    div.btns.grid5 > a {      width: calc(100% / 2 - 16px);    }  }    div.btns a {    transition: all 0.28s ease;    -moz-transition: all 0.28s ease;    -webkit-transition: all 0.28s ease;    -o-transition: all 0.28s ease;    margin: 8px;    margin-top: calc(1.25 * 16px + 32px);    min-width: 120px;    font-weight: 700;    display: -ms-flexbox;    display: flex;    -ms-flex-pack: start;    justify-content: flex-start;    -ms-flex-line-pack: center;    align-content: center;    -ms-flex-align: center;    align-items: center;    -ms-flex-direction: column;    flex-direction: column;    padding: 8px;    text-align: center;    background: #f6f6f6;    border-radius: 4px;  }      div.btns a > i:first-child,  div.btns a > img:first-child {    transition: all 0.28s ease;    -moz-transition: all 0.28s ease;    -webkit-transition: all 0.28s ease;    -o-transition: all 0.28s ease;    height: 64px;    width: 64px;    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.1);    margin: 16px 8px 4px 8px;    margin-top: calc(-1.25 * 16px - 32px);    border: 2px solid #fff;    background: #fff;    line-height: 60px;    font-size: 28px;  }    div.btns a > i:first-child.auto,  div.btns a > img:first-child.auto {    width: auto;  }    div.btns a > i:first-child {    color: #fff;    background: #2196f3;  }    div.btns a b,  div.btns a p {    margin: 0.25em;    font-weight: 400;    line-height: 1.25;    word-wrap: break-word;  }    div.btns a b {    font-weight: 700;    line-height: 1.3;  }    div.btns a img {    margin: 0.4em auto;  }    div.btns a:not([href]) {    cursor: default;    color: inherit;  }    div.btns a[href]:hover {    background: rgba(255, 87, 34, 0.15);  }    div.btns a[href]:hover,  div.btns a[href]:hover b {    color: #ff5722;  }    div.btns a[href]:hover > i:first-child,  div.btns a[href]:hover > img:first-child {    transform: scale(1.1) translateY(-8px);    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.1);  }    div.btns a[href]:hover > i:first-child {    background: #ff5722;  }    div.btns.circle a > i:first-child,  div.btns.circle a > img:first-child {    border-radius: 32px;  }    div.btns.rounded a > i:first-child,  div.btns.rounded a > img:first-child {    border-radius: 16px;  }            /*checkbox*/  .checkbox {    display: -ms-flexbox;    display: flex;    -ms-flex-align: center;    align-items: center;  }    .checkbox input {    -webkit-appearance: none;    -moz-appearance: none;    -ms-appearance: none;    -o-appearance: none;    appearance: none;    position: relative;    height: 16px;    width: 16px;    transition: all 0.15s ease-out 0s;    cursor: pointer;    display: inline-block;    outline: 0;    border-radius: 2px;    -ms-flex-negative: 0;    flex-shrink: 0;    margin-right: 8px;  }    [data-theme="dark"] .checkbox {    filter: brightness(0.7);  }    .checkbox input[type="checkbox"]:after,  .checkbox input[type="checkbox"]:before {    position: absolute;    content: "";    background: #fff;  }    .checkbox input[type="checkbox"]:before {    left: 1px;    top: 5px;    width: 0;    height: 2px;    transition: all 0.2s ease-in;    transform: rotate(45deg);    -webkit-transform: rotate(45deg);    -moz-transform: rotate(45deg);    -ms-transform: rotate(45deg);    -o-transform: rotate(45deg);  }    .checkbox input[type="checkbox"]:after {    right: 7px;    bottom: 3px;    width: 2px;    height: 0;    transition: all 0.2s ease-out;    transform: rotate(40deg);    -webkit-transform: rotate(40deg);    -moz-transform: rotate(40deg);    -ms-transform: rotate(40deg);    -o-transform: rotate(40deg);    transition-delay: 0.25s;  }    .checkbox input[type="checkbox"]:checked:before {    left: 0;    top: 7px;    width: 6px;    height: 2px;  }    .checkbox input[type="checkbox"]:checked:after {    right: 3px;    bottom: 1px;    width: 2px;    height: 10px;  }    .checkbox.minus input[type="checkbox"]:before {    transform: rotate(0);    left: 1px;    top: 5px;    width: 0;    height: 2px;  }    .checkbox.minus input[type="checkbox"]:after {    transform: rotate(0);    left: 1px;    top: 5px;    width: 0;    height: 2px;  }    .checkbox.minus input[type="checkbox"]:checked:before {    left: 1px;    top: 5px;    width: 10px;    height: 2px;  }    .checkbox.minus input[type="checkbox"]:checked:after {    left: 1px;    top: 5px;    width: 10px;    height: 2px;  }    .checkbox.plus input[type="checkbox"]:before {    transform: rotate(0);    left: 1px;    top: 5px;    width: 0;    height: 2px;  }    .checkbox.plus input[type="checkbox"]:after {    transform: rotate(0);    left: 5px;    top: 1px;    width: 2px;    height: 0;  }    .checkbox.plus input[type="checkbox"]:checked:before {    left: 1px;    top: 5px;    width: 10px;    height: 2px;  }    .checkbox.plus input[type="checkbox"]:checked:after {    left: 5px;    top: 1px;    width: 2px;    height: 10px;  }    .checkbox.times input[type="checkbox"]:before {    transform: rotate(45deg);    left: 3px;    top: 1px;    width: 0;    height: 2px;  }    .checkbox.times input[type="checkbox"]:after {    transform: rotate(135deg);    right: 3px;    top: 1px;    width: 0;    height: 2px;  }    .checkbox.times input[type="checkbox"]:checked:before {    left: 1px;    top: 5px;    width: 10px;    height: 2px;  }    .checkbox.times input[type="checkbox"]:checked:after {    right: 1px;    top: 5px;    width: 10px;    height: 2px;  }    .checkbox input[type="radio"] {    border-radius: 50%;  }    .checkbox input[type="radio"]:before {    content: "";    display: block;    width: 8px;    height: 8px;    border-radius: 50%;    margin: 2px;    transform: scale(0);    transition: all 0.25s ease-out;  }    .checkbox input[type="radio"]:checked:before {    transform: scale(1);  }    .checkbox input {    border: 2px solid #2196f3;  }    .checkbox input[type="checkbox"]:checked {    background: #2196f3;  }    .checkbox input[type="radio"]:checked:before {    background: #2196f3;  }    .checkbox.red input {    border-color: #fe5f58;  }    .checkbox.red input[type="checkbox"]:checked {    background: #fe5f58;  }    .checkbox.red input[type="radio"]:checked:before {    background: #fe5f58;  }    .checkbox.green input {    border-color: #3dc550;  }    .checkbox.green input[type="checkbox"]:checked {    background: #3dc550;  }    .checkbox.green input[type="radio"]:checked:before {    background: #3dc550;  }    .checkbox.yellow input {    border-color: #ffbd2b;  }    .checkbox.yellow input[type="checkbox"]:checked {    background: #ffbd2b;  }    .checkbox.yellow input[type="radio"]:checked:before {    background: #ffbd2b;  }    .checkbox.cyan input {    border-color: #1bcdfc;  }    .checkbox.cyan input[type="checkbox"]:checked {    background: #1bcdfc;  }    .checkbox.cyan input[type="radio"]:checked:before {    background: #1bcdfc;  }    .checkbox.blue input {    border-color: #2196f3;  }    .checkbox.blue input[type="checkbox"]:checked {    background: #2196f3;  }    .checkbox.blue input[type="radio"]:checked:before {    background: #2196f3;  }    .checkbox p {    display: inline-block;    margin-top: 2px !important;    margin-bottom: 0 !important;  }    div.tabs details {    margin-top: 0.5rem;    margin-bottom: 0.5rem;  }    div.dropmenu {    display: inline-block;    position: relative;    line-height: 2.4;    cursor: default;    transition: all 0.28s ease;    -moz-transition: all 0.28s ease;    -webkit-transition: all 0.28s ease;    -o-transition: all 0.28s ease;    color: rgba(85,85,85,0.85);    background: #f6f6f6;    border-radius: 4px;    border: 1px solid #e7e7e7;    padding: 0 16px;    padding-top: 1px;    font-size: 0.875rem;    font-weight: bold;  }  div.dropmenu:hover {    background: #e8f4fd;    border-color: #cce7fb;  }  div.dropmenu:hover >ul {    display: block;    margin-left: -8px;    margin-top: -4px;  }  div.dropmenu ul>li {    list-style: none;  }  div.dropmenu ul>li >a:hover {    text-decoration: none !important;  }  div.dropmenu .list-v .list-v {    left: calc(100% - 0.5 * 16px);  }        details {    display: block;    padding: 16px;    margin: 0.5rem 0;    border-radius: 4px;    font-size: 0.7375rem;    transition: all 0.28s ease;    -moz-transition: all 0.28s ease;    -webkit-transition: all 0.28s ease;    -o-transition: all 0.28s ease;    border: 1px solid #f6f6f6;    line-height: 1.3;  }    [data-theme="dark"] details {    filter: brightness(0.7);  }    details summary {    cursor: pointer;    padding: 16px;    margin: -16px;    border-radius: 4px;    color: rgba(85, 85, 85, 0.7);    font-size: 0.775rem;    font-weight: 700;    position: relative;  }    details summary > h1,  details summary > h2,  details summary > h3,  details summary > h4,  details summary > h5,  details summary > h6,  details summary > p {    display: inline;    border-bottom: none !important;    margin-top: 2px;    margin-bottom: 0;  }    details summary:hover {    color: #555;  }    details summary:hover:after {    position: absolute;    content: "+";    text-align: center;    top: 50%;    transform: translateY(-50%);    right: 16px;  }    details > summary {    background: #f6f6f6;  }    details[blue] {    border-color: #e8f4fd;  }    details[blue] > summary {    background: #e8f4fd;  }    details[cyan] {    border-color: #e8fafe;  }    details[cyan] > summary {    background: #e8fafe;  }    details[green] {    border-color: #ebf9ed;  }    details[green] > summary {    background: #ebf9ed;  }    details[yellow] {    border-color: #fff8e9;  }    details[yellow] > summary {    background: #fff8e9;  }    details[red] {    border-color: #feefee;  }    details[red] > summary {    background: #feefee;  }    details[open] {    border-color: rgba(85, 85, 85, 0.2);  }    details[open] > summary {    border-bottom: 1px solid rgba(85, 85, 85, 0.2);    border-bottom-left-radius: 0;    border-bottom-right-radius: 0;  }    details[open][blue] {    border-color: rgba(33, 150, 243, 0.3);  }    details[open][blue] > summary {    border-bottom-color: rgba(33, 150, 243, 0.3);  }    details[open][cyan] {    border-color: rgba(27, 205, 252, 0.3);  }    details[open][cyan] > summary {    border-bottom-color: rgba(27, 205, 252, 0.3);  }    details[open][green] {    border-color: rgba(61, 197, 80, 0.3);  }    details[open][green] > summary {    border-bottom-color: rgba(61, 197, 80, 0.3);  }    details[open][yellow] {    border-color: rgba(255, 189, 43, 0.3);  }    details[open][yellow] > summary {    border-bottom-color: rgba(255, 189, 43, 0.3);  }    details[open][red] {    border-color: rgba(254, 95, 88, 0.3);  }    details[open][red] > summary {    border-bottom-color: rgba(254, 95, 88, 0.3);  }    details[open] > summary {    color: #555;    margin-bottom: 0;  }    details[open] > summary:hover:after {    content: "-";  }    details[open] > div.content {    padding: 16px;    margin: -16px;    margin-top: 0;  }    details[open] >div.content > p:first-child,  details[open] >div.content > .tabs:first-child,  details[open] >div.content > ul:first-child,  details[open] >div.content > ol:first-child,  details[open] >div.content > .highlight:first-child,  details[open] >div.content > .note:first-child,  details[open] >div.content > .fancybox:first-child,  details[open] >div.content > details:first-child {    margin-top: 0;  }    details[open] >div.content > p:last-child,  details[open] >div.content > .tabs:last-child,  details[open] >div.content > ul:last-child,  details[open] >div.content > ol:last-child,  details[open] >div.content > .highlight:last-child,  details[open] >div.content > .note:last-child,  details[open] >div.content > .fancybox:last-child,  details[open] >div.content > details:last-child {    margin-bottom: 0;  }      div.tabs .tab-content .tab-pane > p:first-child,  div.tabs .tab-content .tab-pane > .tabs:first-child,  div.tabs .tab-content .tab-pane > ul:first-child,  div.tabs .tab-content .tab-pane > ol:first-child,  div.tabs .tab-content .tab-pane > .highlight:first-child,  div.tabs .tab-content .tab-pane > .note:first-child,  div.tabs .tab-content .tab-pane > .fancybox:first-child {    margin-top: 0;  }  div.tabs .tab-content .tab-pane > p:last-child,  div.tabs .tab-content .tab-pane > .tabs:last-child,  div.tabs .tab-content .tab-pane > ul:last-child,  div.tabs .tab-content .tab-pane > ol:last-child,  div.tabs .tab-content .tab-pane > .highlight:last-child,  div.tabs .tab-content .tab-pane > .note:last-child,  div.tabs .tab-content .tab-pane > .fancybox:last-child {    margin-bottom: 0;  }    /*fancybox图片相关*/      div.gallery {    margin: 0.5rem 0;    overflow: hidden;  }  div.gallery >.fancybox,  div.gallery >p>.fancybox {    margin: 1px;    padding: 0;    position: relative;  }  div.gallery >.fancybox .image-caption,  div.gallery >p>.fancybox .image-caption {    opacity: 0;    transform: translateY(100%);    transition: all 0.3s ease;    pointer-events: none;    position: absolute;    width: 100%;    bottom: 0;    text-align: center;    background: rgba(0,0,0,0.3);    color: #fff;  }  div.gallery >.fancybox .image-caption:empty,  div.gallery >p>.fancybox .image-caption:empty {    display: none;  }  div.gallery >.fancybox:hover .image-caption,  div.gallery >p>.fancybox:hover .image-caption {    opacity: 1;    transform: translateY(0);  }  div.gallery,  div.gallery >p {    display: -ms-flexbox;    display: flex;    -ms-flex-pack: center;        justify-content: center;    -ms-flex-align: center;        align-items: center;    -ms-flex-wrap: nowrap;        flex-wrap: nowrap;    padding: 0 !important;    -ms-flex-align: stretch;        align-items: stretch;  }  div.gallery[col]>p {    -ms-flex-wrap: wrap;        flex-wrap: wrap;    -ms-flex-pack: start;        justify-content: flex-start;  }  div.gallery[col='2']>p>.fancybox {    width: calc(50% - 2 * 1px);  }  div.gallery[col='3']>p>.fancybox {    width: calc(33.33% - 2 * 1px);  }  div.gallery[col='4']>p>.fancybox {    width: calc(25% - 2 * 1px);  }  div.gallery[col='5']>p>.fancybox {    width: calc(20% - 2 * 1px);  }  div.gallery[col='6']>p>.fancybox {    width: calc(16.66% - 2 * 1px);  }  div.gallery[col='7']>p>.fancybox {    width: calc(14.2857% - 2 * 1px);  }  div.gallery[col='8']>p>.fancybox {    width: calc(12.5% - 2 * 1px);  }  div.gallery >p {    margin: 0;  }  div.gallery.left,  div.gallery.left>p {    -ms-flex-pack: start;        justify-content: flex-start;  }  div.gallery.center,  div.gallery.center>p {    -ms-flex-pack: center;        justify-content: center;  }  div.gallery.right,  div.gallery.right>p {    -ms-flex-pack: end;        justify-content: flex-end;  }  div.gallery.stretch,  div.gallery.stretch>p {    -ms-flex-align: stretch;        align-items: stretch;  }  div.gallery.stretch img,  div.gallery.stretch>p img {    transform: scale(1.5);  }  .fancybox-container .fancybox-stage {    cursor: zoom-out;  }  .fancybox {    display: -ms-flexbox;    display: flex;    -ms-flex-direction: column;        flex-direction: column;    -ms-flex-pack: center;        justify-content: center;    -ms-flex-align: center;        align-items: center;    -ms-flex-wrap: nowrap;        flex-wrap: nowrap;    padding: 0 !important;    overflow: hidden;    border-radius: 2px;  }  @media screen and (max-width: 500px) {    .fancybox {      border-radius: 1px;    }  }  .fancybox a {    line-height: 0;    margin: 0;    -ms-flex-align: stretch;        align-items: stretch;    cursor: zoom-in;  }  .fancybox .gallery {    overflow: hidden;  }  .fancybox .image-caption {    font-size: 0.8125rem;    padding-top: 0.5rem;    padding-bottom: 0.5rem;    color: rgba(85,85,85,0.65);  }      /*播放器相关*/  audio,  video {    border-radius: 4px;    max-width: 100%;  }  video {    z-index: 1;    transition: all 0.28s ease;    -moz-transition: all 0.28s ease;    -webkit-transition: all 0.28s ease;    -o-transition: all 0.28s ease;  }  video:hover {    box-shadow: 0 4px 8px 0px rgba(0,0,0,0.24), 0 8px 16px 0px rgba(0,0,0,0.24);  }  div.video {    line-height: 0;    text-align: center;  }  div.videos {    max-width: calc(100% + 2 * 4px);    display: -ms-flexbox;    display: flex;    -ms-flex-wrap: wrap;        flex-wrap: wrap;    -ms-flex-pack: start;        justify-content: flex-start;    -ms-flex-align: end;        align-items: flex-end;    margin: 0.5rem -4px;  }  div.videos .video,  div.videos iframe {    width: 100%;    margin: 4px;  }  div.videos iframe {    border-radius: 4px;    width: 100%;    min-height: 300px;  }  div.videos.left {    -ms-flex-pack: start;        justify-content: flex-start;  }  div.videos.center {    -ms-flex-pack: center;        justify-content: center;  }  div.videos.right {    -ms-flex-pack: end;        justify-content: flex-end;  }  div.videos.stretch {    -ms-flex-align: stretch;        align-items: stretch;  }  div.videos[col='1'] .video,  div.videos[col='1'] iframe {    width: 100%;  }  div.videos[col='2'] .video,  div.videos[col='2'] iframe {    width: calc(50% - 2 * 4px);  }  div.videos[col='3'] .video,  div.videos[col='3'] iframe {    width: calc(33.33% - 2 * 4px);  }  div.videos[col='4'] .video,  div.videos[col='4'] iframe {    width: calc(25% - 2 * 4px);  }    ]]></content>
      
    </entry>
    
    
  
</search>
